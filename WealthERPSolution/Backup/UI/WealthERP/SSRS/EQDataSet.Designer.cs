//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.SSRS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EQDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EQDataSet : global::System.Data.DataSet {
        
        private EQHoldingDataTable tableEQHolding;
        
        private PortfolioXIRRDataTable tablePortfolioXIRR;
        
        private EQCapitalGainDataTable tableEQCapitalGain;
        
        private EQTranxnDataTable tableEQTranxn;
        
        private ReportHeaderDataTable tableReportHeader;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EQDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EQDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EQHolding"] != null)) {
                    base.Tables.Add(new EQHoldingDataTable(ds.Tables["EQHolding"]));
                }
                if ((ds.Tables["PortfolioXIRR"] != null)) {
                    base.Tables.Add(new PortfolioXIRRDataTable(ds.Tables["PortfolioXIRR"]));
                }
                if ((ds.Tables["EQCapitalGain"] != null)) {
                    base.Tables.Add(new EQCapitalGainDataTable(ds.Tables["EQCapitalGain"]));
                }
                if ((ds.Tables["EQTranxn"] != null)) {
                    base.Tables.Add(new EQTranxnDataTable(ds.Tables["EQTranxn"]));
                }
                if ((ds.Tables["ReportHeader"] != null)) {
                    base.Tables.Add(new ReportHeaderDataTable(ds.Tables["ReportHeader"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EQHoldingDataTable EQHolding {
            get {
                return this.tableEQHolding;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortfolioXIRRDataTable PortfolioXIRR {
            get {
                return this.tablePortfolioXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EQCapitalGainDataTable EQCapitalGain {
            get {
                return this.tableEQCapitalGain;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EQTranxnDataTable EQTranxn {
            get {
                return this.tableEQTranxn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReportHeaderDataTable ReportHeader {
            get {
                return this.tableReportHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EQDataSet cln = ((EQDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EQHolding"] != null)) {
                    base.Tables.Add(new EQHoldingDataTable(ds.Tables["EQHolding"]));
                }
                if ((ds.Tables["PortfolioXIRR"] != null)) {
                    base.Tables.Add(new PortfolioXIRRDataTable(ds.Tables["PortfolioXIRR"]));
                }
                if ((ds.Tables["EQCapitalGain"] != null)) {
                    base.Tables.Add(new EQCapitalGainDataTable(ds.Tables["EQCapitalGain"]));
                }
                if ((ds.Tables["EQTranxn"] != null)) {
                    base.Tables.Add(new EQTranxnDataTable(ds.Tables["EQTranxn"]));
                }
                if ((ds.Tables["ReportHeader"] != null)) {
                    base.Tables.Add(new ReportHeaderDataTable(ds.Tables["ReportHeader"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEQHolding = ((EQHoldingDataTable)(base.Tables["EQHolding"]));
            if ((initTable == true)) {
                if ((this.tableEQHolding != null)) {
                    this.tableEQHolding.InitVars();
                }
            }
            this.tablePortfolioXIRR = ((PortfolioXIRRDataTable)(base.Tables["PortfolioXIRR"]));
            if ((initTable == true)) {
                if ((this.tablePortfolioXIRR != null)) {
                    this.tablePortfolioXIRR.InitVars();
                }
            }
            this.tableEQCapitalGain = ((EQCapitalGainDataTable)(base.Tables["EQCapitalGain"]));
            if ((initTable == true)) {
                if ((this.tableEQCapitalGain != null)) {
                    this.tableEQCapitalGain.InitVars();
                }
            }
            this.tableEQTranxn = ((EQTranxnDataTable)(base.Tables["EQTranxn"]));
            if ((initTable == true)) {
                if ((this.tableEQTranxn != null)) {
                    this.tableEQTranxn.InitVars();
                }
            }
            this.tableReportHeader = ((ReportHeaderDataTable)(base.Tables["ReportHeader"]));
            if ((initTable == true)) {
                if ((this.tableReportHeader != null)) {
                    this.tableReportHeader.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EQDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EQDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEQHolding = new EQHoldingDataTable();
            base.Tables.Add(this.tableEQHolding);
            this.tablePortfolioXIRR = new PortfolioXIRRDataTable();
            base.Tables.Add(this.tablePortfolioXIRR);
            this.tableEQCapitalGain = new EQCapitalGainDataTable();
            base.Tables.Add(this.tableEQCapitalGain);
            this.tableEQTranxn = new EQTranxnDataTable();
            base.Tables.Add(this.tableEQTranxn);
            this.tableReportHeader = new ReportHeaderDataTable();
            base.Tables.Add(this.tableReportHeader);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEQHolding() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortfolioXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEQCapitalGain() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEQTranxn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReportHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EQDataSet ds = new EQDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EQHoldingRowChangeEventHandler(object sender, EQHoldingRowChangeEvent e);
        
        public delegate void PortfolioXIRRRowChangeEventHandler(object sender, PortfolioXIRRRowChangeEvent e);
        
        public delegate void EQCapitalGainRowChangeEventHandler(object sender, EQCapitalGainRowChangeEvent e);
        
        public delegate void EQTranxnRowChangeEventHandler(object sender, EQTranxnRowChangeEvent e);
        
        public delegate void ReportHeaderRowChangeEventHandler(object sender, ReportHeaderRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EQHoldingDataTable : global::System.Data.TypedTableBase<EQHoldingRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnInvStartDate;
            
            private global::System.Data.DataColumn columnBalanceUnits;
            
            private global::System.Data.DataColumn columnPurchaseAmt;
            
            private global::System.Data.DataColumn columnRedeemedAmt;
            
            private global::System.Data.DataColumn columnAvgPrice;
            
            private global::System.Data.DataColumn columnInvestedCost;
            
            private global::System.Data.DataColumn columnCurrentNAV;
            
            private global::System.Data.DataColumn columnCurrentNAVDate;
            
            private global::System.Data.DataColumn columnCurrentValue;
            
            private global::System.Data.DataColumn columnDVR;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnPL;
            
            private global::System.Data.DataColumn columnABS;
            
            private global::System.Data.DataColumn columnXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQHoldingDataTable() {
                this.TableName = "EQHolding";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EQHoldingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EQHoldingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvStartDateColumn {
                get {
                    return this.columnInvStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceUnitsColumn {
                get {
                    return this.columnBalanceUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PurchaseAmtColumn {
                get {
                    return this.columnPurchaseAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RedeemedAmtColumn {
                get {
                    return this.columnRedeemedAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgPriceColumn {
                get {
                    return this.columnAvgPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestedCostColumn {
                get {
                    return this.columnInvestedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentNAVColumn {
                get {
                    return this.columnCurrentNAV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentNAVDateColumn {
                get {
                    return this.columnCurrentNAVDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentValueColumn {
                get {
                    return this.columnCurrentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVRColumn {
                get {
                    return this.columnDVR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLColumn {
                get {
                    return this.columnPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ABSColumn {
                get {
                    return this.columnABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQHoldingRow this[int index] {
                get {
                    return ((EQHoldingRow)(this.Rows[index]));
                }
            }
            
            public event EQHoldingRowChangeEventHandler EQHoldingRowChanging;
            
            public event EQHoldingRowChangeEventHandler EQHoldingRowChanged;
            
            public event EQHoldingRowChangeEventHandler EQHoldingRowDeleting;
            
            public event EQHoldingRowChangeEventHandler EQHoldingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEQHoldingRow(EQHoldingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQHoldingRow AddEQHoldingRow(
                        string CustomerName, 
                        string CustomerId, 
                        string PortfolioName, 
                        string PortfolioId, 
                        string ScripName, 
                        string FolioNum, 
                        string InvStartDate, 
                        decimal BalanceUnits, 
                        string PurchaseAmt, 
                        string RedeemedAmt, 
                        double AvgPrice, 
                        string InvestedCost, 
                        string CurrentNAV, 
                        string CurrentNAVDate, 
                        string CurrentValue, 
                        string DVR, 
                        string DVP, 
                        string PL, 
                        string ABS, 
                        string XIRR) {
                EQHoldingRow rowEQHoldingRow = ((EQHoldingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        InvStartDate,
                        BalanceUnits,
                        PurchaseAmt,
                        RedeemedAmt,
                        AvgPrice,
                        InvestedCost,
                        CurrentNAV,
                        CurrentNAVDate,
                        CurrentValue,
                        DVR,
                        DVP,
                        PL,
                        ABS,
                        XIRR};
                rowEQHoldingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEQHoldingRow);
                return rowEQHoldingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EQHoldingDataTable cln = ((EQHoldingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EQHoldingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnInvStartDate = base.Columns["InvStartDate"];
                this.columnBalanceUnits = base.Columns["BalanceUnits"];
                this.columnPurchaseAmt = base.Columns["PurchaseAmt"];
                this.columnRedeemedAmt = base.Columns["RedeemedAmt"];
                this.columnAvgPrice = base.Columns["AvgPrice"];
                this.columnInvestedCost = base.Columns["InvestedCost"];
                this.columnCurrentNAV = base.Columns["CurrentNAV"];
                this.columnCurrentNAVDate = base.Columns["CurrentNAVDate"];
                this.columnCurrentValue = base.Columns["CurrentValue"];
                this.columnDVR = base.Columns["DVR"];
                this.columnDVP = base.Columns["DVP"];
                this.columnPL = base.Columns["PL"];
                this.columnABS = base.Columns["ABS"];
                this.columnXIRR = base.Columns["XIRR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnInvStartDate = new global::System.Data.DataColumn("InvStartDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvStartDate);
                this.columnBalanceUnits = new global::System.Data.DataColumn("BalanceUnits", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceUnits);
                this.columnPurchaseAmt = new global::System.Data.DataColumn("PurchaseAmt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseAmt);
                this.columnRedeemedAmt = new global::System.Data.DataColumn("RedeemedAmt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRedeemedAmt);
                this.columnAvgPrice = new global::System.Data.DataColumn("AvgPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgPrice);
                this.columnInvestedCost = new global::System.Data.DataColumn("InvestedCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestedCost);
                this.columnCurrentNAV = new global::System.Data.DataColumn("CurrentNAV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentNAV);
                this.columnCurrentNAVDate = new global::System.Data.DataColumn("CurrentNAVDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentNAVDate);
                this.columnCurrentValue = new global::System.Data.DataColumn("CurrentValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentValue);
                this.columnDVR = new global::System.Data.DataColumn("DVR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVR);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnPL = new global::System.Data.DataColumn("PL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPL);
                this.columnABS = new global::System.Data.DataColumn("ABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABS);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
                this.columnAvgPrice.DefaultValue = ((double)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQHoldingRow NewEQHoldingRow() {
                return ((EQHoldingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EQHoldingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EQHoldingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EQHoldingRowChanged != null)) {
                    this.EQHoldingRowChanged(this, new EQHoldingRowChangeEvent(((EQHoldingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EQHoldingRowChanging != null)) {
                    this.EQHoldingRowChanging(this, new EQHoldingRowChangeEvent(((EQHoldingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EQHoldingRowDeleted != null)) {
                    this.EQHoldingRowDeleted(this, new EQHoldingRowChangeEvent(((EQHoldingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EQHoldingRowDeleting != null)) {
                    this.EQHoldingRowDeleting(this, new EQHoldingRowChangeEvent(((EQHoldingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEQHoldingRow(EQHoldingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EQDataSet ds = new EQDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EQHoldingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortfolioXIRRDataTable : global::System.Data.TypedTableBase<PortfolioXIRRRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnXIRR;
            
            private global::System.Data.DataColumn columnABS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRDataTable() {
                this.TableName = "PortfolioXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortfolioXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ABSColumn {
                get {
                    return this.columnABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow this[int index] {
                get {
                    return ((PortfolioXIRRRow)(this.Rows[index]));
                }
            }
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowChanging;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowChanged;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowDeleting;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortfolioXIRRRow(PortfolioXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow AddPortfolioXIRRRow(string CustomerName, string PortfolioName, string XIRR, string ABS) {
                PortfolioXIRRRow rowPortfolioXIRRRow = ((PortfolioXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        PortfolioName,
                        XIRR,
                        ABS};
                rowPortfolioXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortfolioXIRRRow);
                return rowPortfolioXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortfolioXIRRDataTable cln = ((PortfolioXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortfolioXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnXIRR = base.Columns["XIRR"];
                this.columnABS = base.Columns["ABS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
                this.columnABS = new global::System.Data.DataColumn("ABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABS);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow NewPortfolioXIRRRow() {
                return ((PortfolioXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortfolioXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortfolioXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortfolioXIRRRowChanged != null)) {
                    this.PortfolioXIRRRowChanged(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortfolioXIRRRowChanging != null)) {
                    this.PortfolioXIRRRowChanging(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortfolioXIRRRowDeleted != null)) {
                    this.PortfolioXIRRRowDeleted(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortfolioXIRRRowDeleting != null)) {
                    this.PortfolioXIRRRowDeleting(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortfolioXIRRRow(PortfolioXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EQDataSet ds = new EQDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortfolioXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EQCapitalGainDataTable : global::System.Data.TypedTableBase<EQCapitalGainRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnSellDate;
            
            private global::System.Data.DataColumn columnSellRate;
            
            private global::System.Data.DataColumn columnSellAmount;
            
            private global::System.Data.DataColumn columnBuyDate;
            
            private global::System.Data.DataColumn columnBuyRate;
            
            private global::System.Data.DataColumn columnBuyAmount;
            
            private global::System.Data.DataColumn columnDays;
            
            private global::System.Data.DataColumn columnLTCG;
            
            private global::System.Data.DataColumn columnSTCG;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQCapitalGainDataTable() {
                this.TableName = "EQCapitalGain";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EQCapitalGainDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EQCapitalGainDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellDateColumn {
                get {
                    return this.columnSellDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellRateColumn {
                get {
                    return this.columnSellRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellAmountColumn {
                get {
                    return this.columnSellAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyDateColumn {
                get {
                    return this.columnBuyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyRateColumn {
                get {
                    return this.columnBuyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyAmountColumn {
                get {
                    return this.columnBuyAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DaysColumn {
                get {
                    return this.columnDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LTCGColumn {
                get {
                    return this.columnLTCG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STCGColumn {
                get {
                    return this.columnSTCG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryNameColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQCapitalGainRow this[int index] {
                get {
                    return ((EQCapitalGainRow)(this.Rows[index]));
                }
            }
            
            public event EQCapitalGainRowChangeEventHandler EQCapitalGainRowChanging;
            
            public event EQCapitalGainRowChangeEventHandler EQCapitalGainRowChanged;
            
            public event EQCapitalGainRowChangeEventHandler EQCapitalGainRowDeleting;
            
            public event EQCapitalGainRowChangeEventHandler EQCapitalGainRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEQCapitalGainRow(EQCapitalGainRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQCapitalGainRow AddEQCapitalGainRow(
                        string CustomerName, 
                        string CustomerId, 
                        string PortfolioName, 
                        string PortfolioId, 
                        string ScripName, 
                        string FolioNum, 
                        string Units, 
                        string SellDate, 
                        string SellRate, 
                        string SellAmount, 
                        string BuyDate, 
                        string BuyRate, 
                        string BuyAmount, 
                        string Days, 
                        string LTCG, 
                        string STCG, 
                        string PAIC_AssetInstrumentCategoryName) {
                EQCapitalGainRow rowEQCapitalGainRow = ((EQCapitalGainRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        Units,
                        SellDate,
                        SellRate,
                        SellAmount,
                        BuyDate,
                        BuyRate,
                        BuyAmount,
                        Days,
                        LTCG,
                        STCG,
                        PAIC_AssetInstrumentCategoryName};
                rowEQCapitalGainRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEQCapitalGainRow);
                return rowEQCapitalGainRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EQCapitalGainDataTable cln = ((EQCapitalGainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EQCapitalGainDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnUnits = base.Columns["Units"];
                this.columnSellDate = base.Columns["SellDate"];
                this.columnSellRate = base.Columns["SellRate"];
                this.columnSellAmount = base.Columns["SellAmount"];
                this.columnBuyDate = base.Columns["BuyDate"];
                this.columnBuyRate = base.Columns["BuyRate"];
                this.columnBuyAmount = base.Columns["BuyAmount"];
                this.columnDays = base.Columns["Days"];
                this.columnLTCG = base.Columns["LTCG"];
                this.columnSTCG = base.Columns["STCG"];
                this.columnPAIC_AssetInstrumentCategoryName = base.Columns["PAIC_AssetInstrumentCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnSellDate = new global::System.Data.DataColumn("SellDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellDate);
                this.columnSellRate = new global::System.Data.DataColumn("SellRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellRate);
                this.columnSellAmount = new global::System.Data.DataColumn("SellAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellAmount);
                this.columnBuyDate = new global::System.Data.DataColumn("BuyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyDate);
                this.columnBuyRate = new global::System.Data.DataColumn("BuyRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyRate);
                this.columnBuyAmount = new global::System.Data.DataColumn("BuyAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyAmount);
                this.columnDays = new global::System.Data.DataColumn("Days", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays);
                this.columnLTCG = new global::System.Data.DataColumn("LTCG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLTCG);
                this.columnSTCG = new global::System.Data.DataColumn("STCG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTCG);
                this.columnPAIC_AssetInstrumentCategoryName = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQCapitalGainRow NewEQCapitalGainRow() {
                return ((EQCapitalGainRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EQCapitalGainRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EQCapitalGainRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EQCapitalGainRowChanged != null)) {
                    this.EQCapitalGainRowChanged(this, new EQCapitalGainRowChangeEvent(((EQCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EQCapitalGainRowChanging != null)) {
                    this.EQCapitalGainRowChanging(this, new EQCapitalGainRowChangeEvent(((EQCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EQCapitalGainRowDeleted != null)) {
                    this.EQCapitalGainRowDeleted(this, new EQCapitalGainRowChangeEvent(((EQCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EQCapitalGainRowDeleting != null)) {
                    this.EQCapitalGainRowDeleting(this, new EQCapitalGainRowChangeEvent(((EQCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEQCapitalGainRow(EQCapitalGainRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EQDataSet ds = new EQDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EQCapitalGainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EQTranxnDataTable : global::System.Data.TypedTableBase<EQTranxnRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnCreditUnits;
            
            private global::System.Data.DataColumn columnCreditAmount;
            
            private global::System.Data.DataColumn columnDebitUnits;
            
            private global::System.Data.DataColumn columnDebitAmount;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnTranxnType;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQTranxnDataTable() {
                this.TableName = "EQTranxn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EQTranxnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EQTranxnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditUnitsColumn {
                get {
                    return this.columnCreditUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditAmountColumn {
                get {
                    return this.columnCreditAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitUnitsColumn {
                get {
                    return this.columnDebitUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitAmountColumn {
                get {
                    return this.columnDebitAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TranxnTypeColumn {
                get {
                    return this.columnTranxnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryNameColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQTranxnRow this[int index] {
                get {
                    return ((EQTranxnRow)(this.Rows[index]));
                }
            }
            
            public event EQTranxnRowChangeEventHandler EQTranxnRowChanging;
            
            public event EQTranxnRowChangeEventHandler EQTranxnRowChanged;
            
            public event EQTranxnRowChangeEventHandler EQTranxnRowDeleting;
            
            public event EQTranxnRowChangeEventHandler EQTranxnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEQTranxnRow(EQTranxnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQTranxnRow AddEQTranxnRow(string CustomerName, string CustomerId, string PortfolioName, string PortfolioId, string ScripName, string FolioNum, string TransactionDate, decimal Price, string CreditUnits, string CreditAmount, double DebitUnits, string DebitAmount, string DVP, string TranxnType, string PAIC_AssetInstrumentCategoryName) {
                EQTranxnRow rowEQTranxnRow = ((EQTranxnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        TransactionDate,
                        Price,
                        CreditUnits,
                        CreditAmount,
                        DebitUnits,
                        DebitAmount,
                        DVP,
                        TranxnType,
                        PAIC_AssetInstrumentCategoryName};
                rowEQTranxnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEQTranxnRow);
                return rowEQTranxnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EQTranxnDataTable cln = ((EQTranxnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EQTranxnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
                this.columnPrice = base.Columns["Price"];
                this.columnCreditUnits = base.Columns["CreditUnits"];
                this.columnCreditAmount = base.Columns["CreditAmount"];
                this.columnDebitUnits = base.Columns["DebitUnits"];
                this.columnDebitAmount = base.Columns["DebitAmount"];
                this.columnDVP = base.Columns["DVP"];
                this.columnTranxnType = base.Columns["TranxnType"];
                this.columnPAIC_AssetInstrumentCategoryName = base.Columns["PAIC_AssetInstrumentCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnCreditUnits = new global::System.Data.DataColumn("CreditUnits", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditUnits);
                this.columnCreditAmount = new global::System.Data.DataColumn("CreditAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditAmount);
                this.columnDebitUnits = new global::System.Data.DataColumn("DebitUnits", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitUnits);
                this.columnDebitAmount = new global::System.Data.DataColumn("DebitAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitAmount);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnTranxnType = new global::System.Data.DataColumn("TranxnType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTranxnType);
                this.columnPAIC_AssetInstrumentCategoryName = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryName);
                this.columnTransactionDate.Caption = "InvStartDate";
                this.columnPrice.Caption = "BalanceUnits";
                this.columnCreditUnits.Caption = "PurchaseAmt";
                this.columnCreditAmount.Caption = "RedeemedAmt";
                this.columnDebitUnits.Caption = "AvgPrice";
                this.columnDebitUnits.DefaultValue = ((double)(0));
                this.columnDebitAmount.Caption = "InvestedCost";
                this.columnTranxnType.Caption = "CurrentNAV";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQTranxnRow NewEQTranxnRow() {
                return ((EQTranxnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EQTranxnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EQTranxnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EQTranxnRowChanged != null)) {
                    this.EQTranxnRowChanged(this, new EQTranxnRowChangeEvent(((EQTranxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EQTranxnRowChanging != null)) {
                    this.EQTranxnRowChanging(this, new EQTranxnRowChangeEvent(((EQTranxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EQTranxnRowDeleted != null)) {
                    this.EQTranxnRowDeleted(this, new EQTranxnRowChangeEvent(((EQTranxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EQTranxnRowDeleting != null)) {
                    this.EQTranxnRowDeleting(this, new EQTranxnRowChangeEvent(((EQTranxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEQTranxnRow(EQTranxnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EQDataSet ds = new EQDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EQTranxnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReportHeaderDataTable : global::System.Data.TypedTableBase<ReportHeaderRow> {
            
            private global::System.Data.DataColumn columnHeader1;
            
            private global::System.Data.DataColumn columnHeader2;
            
            private global::System.Data.DataColumn columnHeader3;
            
            private global::System.Data.DataColumn columnHeader4;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderDataTable() {
                this.TableName = "ReportHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReportHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header1Column {
                get {
                    return this.columnHeader1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header2Column {
                get {
                    return this.columnHeader2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header3Column {
                get {
                    return this.columnHeader3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header4Column {
                get {
                    return this.columnHeader4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow this[int index] {
                get {
                    return ((ReportHeaderRow)(this.Rows[index]));
                }
            }
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowChanging;
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowChanged;
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowDeleting;
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReportHeaderRow(ReportHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow AddReportHeaderRow(string Header1, string Header2, string Header3, string Header4) {
                ReportHeaderRow rowReportHeaderRow = ((ReportHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Header1,
                        Header2,
                        Header3,
                        Header4};
                rowReportHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReportHeaderRow);
                return rowReportHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReportHeaderDataTable cln = ((ReportHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReportHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeader1 = base.Columns["Header1"];
                this.columnHeader2 = base.Columns["Header2"];
                this.columnHeader3 = base.Columns["Header3"];
                this.columnHeader4 = base.Columns["Header4"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeader1 = new global::System.Data.DataColumn("Header1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader1);
                this.columnHeader2 = new global::System.Data.DataColumn("Header2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader2);
                this.columnHeader3 = new global::System.Data.DataColumn("Header3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader3);
                this.columnHeader4 = new global::System.Data.DataColumn("Header4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader4);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow NewReportHeaderRow() {
                return ((ReportHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReportHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReportHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReportHeaderRowChanged != null)) {
                    this.ReportHeaderRowChanged(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReportHeaderRowChanging != null)) {
                    this.ReportHeaderRowChanging(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReportHeaderRowDeleted != null)) {
                    this.ReportHeaderRowDeleted(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReportHeaderRowDeleting != null)) {
                    this.ReportHeaderRowDeleting(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReportHeaderRow(ReportHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EQDataSet ds = new EQDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReportHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EQHoldingRow : global::System.Data.DataRow {
            
            private EQHoldingDataTable tableEQHolding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EQHoldingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEQHolding = ((EQHoldingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvStartDate {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.InvStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvStartDate\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.InvStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BalanceUnits {
                get {
                    try {
                        return ((decimal)(this[this.tableEQHolding.BalanceUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BalanceUnits\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.BalanceUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PurchaseAmt {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.PurchaseAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchaseAmt\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.PurchaseAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RedeemedAmt {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.RedeemedAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RedeemedAmt\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.RedeemedAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AvgPrice {
                get {
                    try {
                        return ((double)(this[this.tableEQHolding.AvgPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgPrice\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.AvgPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvestedCost {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.InvestedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvestedCost\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.InvestedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentNAV {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.CurrentNAVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentNAV\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.CurrentNAVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentNAVDate {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.CurrentNAVDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentNAVDate\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.CurrentNAVDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentValue {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.CurrentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentValue\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.CurrentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVR {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.DVRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVR\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.DVRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVP {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PL {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.PLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PL\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.PLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABS {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.ABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABS\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.ABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XIRR {
                get {
                    try {
                        return ((string)(this[this.tableEQHolding.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'EQHolding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQHolding.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableEQHolding.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableEQHolding.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableEQHolding.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableEQHolding.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableEQHolding.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableEQHolding.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableEQHolding.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableEQHolding.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableEQHolding.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableEQHolding.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableEQHolding.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableEQHolding.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvStartDateNull() {
                return this.IsNull(this.tableEQHolding.InvStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvStartDateNull() {
                this[this.tableEQHolding.InvStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceUnitsNull() {
                return this.IsNull(this.tableEQHolding.BalanceUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceUnitsNull() {
                this[this.tableEQHolding.BalanceUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaseAmtNull() {
                return this.IsNull(this.tableEQHolding.PurchaseAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchaseAmtNull() {
                this[this.tableEQHolding.PurchaseAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRedeemedAmtNull() {
                return this.IsNull(this.tableEQHolding.RedeemedAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRedeemedAmtNull() {
                this[this.tableEQHolding.RedeemedAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgPriceNull() {
                return this.IsNull(this.tableEQHolding.AvgPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgPriceNull() {
                this[this.tableEQHolding.AvgPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvestedCostNull() {
                return this.IsNull(this.tableEQHolding.InvestedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvestedCostNull() {
                this[this.tableEQHolding.InvestedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentNAVNull() {
                return this.IsNull(this.tableEQHolding.CurrentNAVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentNAVNull() {
                this[this.tableEQHolding.CurrentNAVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentNAVDateNull() {
                return this.IsNull(this.tableEQHolding.CurrentNAVDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentNAVDateNull() {
                this[this.tableEQHolding.CurrentNAVDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentValueNull() {
                return this.IsNull(this.tableEQHolding.CurrentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentValueNull() {
                this[this.tableEQHolding.CurrentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVRNull() {
                return this.IsNull(this.tableEQHolding.DVRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVRNull() {
                this[this.tableEQHolding.DVRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableEQHolding.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableEQHolding.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLNull() {
                return this.IsNull(this.tableEQHolding.PLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLNull() {
                this[this.tableEQHolding.PLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABSNull() {
                return this.IsNull(this.tableEQHolding.ABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABSNull() {
                this[this.tableEQHolding.ABSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tableEQHolding.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tableEQHolding.XIRRColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortfolioXIRRRow : global::System.Data.DataRow {
            
            private PortfolioXIRRDataTable tablePortfolioXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortfolioXIRR = ((PortfolioXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XIRR {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABS {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.ABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABS\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.ABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tablePortfolioXIRR.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tablePortfolioXIRR.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tablePortfolioXIRR.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tablePortfolioXIRR.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tablePortfolioXIRR.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tablePortfolioXIRR.XIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABSNull() {
                return this.IsNull(this.tablePortfolioXIRR.ABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABSNull() {
                this[this.tablePortfolioXIRR.ABSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EQCapitalGainRow : global::System.Data.DataRow {
            
            private EQCapitalGainDataTable tableEQCapitalGain;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EQCapitalGainRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEQCapitalGain = ((EQCapitalGainDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SellDate {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.SellDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellDate\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.SellDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SellRate {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.SellRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellRate\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.SellRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SellAmount {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.SellAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellAmount\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.SellAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyDate {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.BuyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyDate\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.BuyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyRate {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.BuyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyRate\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.BuyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyAmount {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.BuyAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyAmount\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.BuyAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Days {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.DaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.DaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LTCG {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.LTCGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LTCG\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.LTCGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STCG {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.STCGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STCG\' in table \'EQCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.STCGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableEQCapitalGain.PAIC_AssetInstrumentCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryName\' in table \'EQCapitalGain\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQCapitalGain.PAIC_AssetInstrumentCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableEQCapitalGain.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableEQCapitalGain.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableEQCapitalGain.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableEQCapitalGain.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableEQCapitalGain.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableEQCapitalGain.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableEQCapitalGain.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableEQCapitalGain.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableEQCapitalGain.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableEQCapitalGain.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableEQCapitalGain.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableEQCapitalGain.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableEQCapitalGain.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableEQCapitalGain.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellDateNull() {
                return this.IsNull(this.tableEQCapitalGain.SellDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellDateNull() {
                this[this.tableEQCapitalGain.SellDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellRateNull() {
                return this.IsNull(this.tableEQCapitalGain.SellRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellRateNull() {
                this[this.tableEQCapitalGain.SellRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellAmountNull() {
                return this.IsNull(this.tableEQCapitalGain.SellAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellAmountNull() {
                this[this.tableEQCapitalGain.SellAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyDateNull() {
                return this.IsNull(this.tableEQCapitalGain.BuyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyDateNull() {
                this[this.tableEQCapitalGain.BuyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyRateNull() {
                return this.IsNull(this.tableEQCapitalGain.BuyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyRateNull() {
                this[this.tableEQCapitalGain.BuyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyAmountNull() {
                return this.IsNull(this.tableEQCapitalGain.BuyAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyAmountNull() {
                this[this.tableEQCapitalGain.BuyAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysNull() {
                return this.IsNull(this.tableEQCapitalGain.DaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysNull() {
                this[this.tableEQCapitalGain.DaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLTCGNull() {
                return this.IsNull(this.tableEQCapitalGain.LTCGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLTCGNull() {
                this[this.tableEQCapitalGain.LTCGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTCGNull() {
                return this.IsNull(this.tableEQCapitalGain.STCGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTCGNull() {
                this[this.tableEQCapitalGain.STCGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryNameNull() {
                return this.IsNull(this.tableEQCapitalGain.PAIC_AssetInstrumentCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryNameNull() {
                this[this.tableEQCapitalGain.PAIC_AssetInstrumentCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EQTranxnRow : global::System.Data.DataRow {
            
            private EQTranxnDataTable tableEQTranxn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EQTranxnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEQTranxn = ((EQTranxnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionDate {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.TransactionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionDate\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableEQTranxn.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditUnits {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.CreditUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditUnits\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.CreditUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditAmount {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.CreditAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditAmount\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.CreditAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DebitUnits {
                get {
                    try {
                        return ((double)(this[this.tableEQTranxn.DebitUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebitUnits\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.DebitUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebitAmount {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.DebitAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebitAmount\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.DebitAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVP {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TranxnType {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.TranxnTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TranxnType\' in table \'EQTranxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.TranxnTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableEQTranxn.PAIC_AssetInstrumentCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryName\' in table \'EQTranxn\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableEQTranxn.PAIC_AssetInstrumentCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableEQTranxn.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableEQTranxn.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableEQTranxn.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableEQTranxn.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableEQTranxn.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableEQTranxn.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableEQTranxn.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableEQTranxn.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableEQTranxn.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableEQTranxn.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableEQTranxn.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableEQTranxn.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionDateNull() {
                return this.IsNull(this.tableEQTranxn.TransactionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionDateNull() {
                this[this.tableEQTranxn.TransactionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableEQTranxn.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableEQTranxn.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditUnitsNull() {
                return this.IsNull(this.tableEQTranxn.CreditUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditUnitsNull() {
                this[this.tableEQTranxn.CreditUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditAmountNull() {
                return this.IsNull(this.tableEQTranxn.CreditAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditAmountNull() {
                this[this.tableEQTranxn.CreditAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitUnitsNull() {
                return this.IsNull(this.tableEQTranxn.DebitUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitUnitsNull() {
                this[this.tableEQTranxn.DebitUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitAmountNull() {
                return this.IsNull(this.tableEQTranxn.DebitAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitAmountNull() {
                this[this.tableEQTranxn.DebitAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableEQTranxn.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableEQTranxn.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTranxnTypeNull() {
                return this.IsNull(this.tableEQTranxn.TranxnTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTranxnTypeNull() {
                this[this.tableEQTranxn.TranxnTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryNameNull() {
                return this.IsNull(this.tableEQTranxn.PAIC_AssetInstrumentCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryNameNull() {
                this[this.tableEQTranxn.PAIC_AssetInstrumentCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReportHeaderRow : global::System.Data.DataRow {
            
            private ReportHeaderDataTable tableReportHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReportHeader = ((ReportHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header1 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header1\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header2 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header2\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header3 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header3\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header4 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header4\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader1Null() {
                return this.IsNull(this.tableReportHeader.Header1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader1Null() {
                this[this.tableReportHeader.Header1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader2Null() {
                return this.IsNull(this.tableReportHeader.Header2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader2Null() {
                this[this.tableReportHeader.Header2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader3Null() {
                return this.IsNull(this.tableReportHeader.Header3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader3Null() {
                this[this.tableReportHeader.Header3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader4Null() {
                return this.IsNull(this.tableReportHeader.Header4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader4Null() {
                this[this.tableReportHeader.Header4Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EQHoldingRowChangeEvent : global::System.EventArgs {
            
            private EQHoldingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQHoldingRowChangeEvent(EQHoldingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQHoldingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortfolioXIRRRowChangeEvent : global::System.EventArgs {
            
            private PortfolioXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRowChangeEvent(PortfolioXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EQCapitalGainRowChangeEvent : global::System.EventArgs {
            
            private EQCapitalGainRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQCapitalGainRowChangeEvent(EQCapitalGainRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQCapitalGainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EQTranxnRowChangeEvent : global::System.EventArgs {
            
            private EQTranxnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQTranxnRowChangeEvent(EQTranxnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EQTranxnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReportHeaderRowChangeEvent : global::System.EventArgs {
            
            private ReportHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRowChangeEvent(ReportHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591