//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.SSRS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EquityAnalytic")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EquityAnalytic : global::System.Data.DataSet {
        
        private CategoryLevelEquityXIRRDataTable tableCategoryLevelEquityXIRR;
        
        private SubCategoryLevelEquityXIRRDataTable tableSubCategoryLevelEquityXIRR;
        
        private TransactionDetailsDataTable tableTransactionDetails;
        
        private TotalXIRRDataTable tableTotalXIRR;
        
        private StockLevelEquityXIRRDataTable tableStockLevelEquityXIRR;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EquityAnalytic() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EquityAnalytic(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CategoryLevelEquityXIRR"] != null)) {
                    base.Tables.Add(new CategoryLevelEquityXIRRDataTable(ds.Tables["CategoryLevelEquityXIRR"]));
                }
                if ((ds.Tables["SubCategoryLevelEquityXIRR"] != null)) {
                    base.Tables.Add(new SubCategoryLevelEquityXIRRDataTable(ds.Tables["SubCategoryLevelEquityXIRR"]));
                }
                if ((ds.Tables["TransactionDetails"] != null)) {
                    base.Tables.Add(new TransactionDetailsDataTable(ds.Tables["TransactionDetails"]));
                }
                if ((ds.Tables["TotalXIRR"] != null)) {
                    base.Tables.Add(new TotalXIRRDataTable(ds.Tables["TotalXIRR"]));
                }
                if ((ds.Tables["StockLevelEquityXIRR"] != null)) {
                    base.Tables.Add(new StockLevelEquityXIRRDataTable(ds.Tables["StockLevelEquityXIRR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryLevelEquityXIRRDataTable CategoryLevelEquityXIRR {
            get {
                return this.tableCategoryLevelEquityXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubCategoryLevelEquityXIRRDataTable SubCategoryLevelEquityXIRR {
            get {
                return this.tableSubCategoryLevelEquityXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionDetailsDataTable TransactionDetails {
            get {
                return this.tableTransactionDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TotalXIRRDataTable TotalXIRR {
            get {
                return this.tableTotalXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockLevelEquityXIRRDataTable StockLevelEquityXIRR {
            get {
                return this.tableStockLevelEquityXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EquityAnalytic cln = ((EquityAnalytic)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CategoryLevelEquityXIRR"] != null)) {
                    base.Tables.Add(new CategoryLevelEquityXIRRDataTable(ds.Tables["CategoryLevelEquityXIRR"]));
                }
                if ((ds.Tables["SubCategoryLevelEquityXIRR"] != null)) {
                    base.Tables.Add(new SubCategoryLevelEquityXIRRDataTable(ds.Tables["SubCategoryLevelEquityXIRR"]));
                }
                if ((ds.Tables["TransactionDetails"] != null)) {
                    base.Tables.Add(new TransactionDetailsDataTable(ds.Tables["TransactionDetails"]));
                }
                if ((ds.Tables["TotalXIRR"] != null)) {
                    base.Tables.Add(new TotalXIRRDataTable(ds.Tables["TotalXIRR"]));
                }
                if ((ds.Tables["StockLevelEquityXIRR"] != null)) {
                    base.Tables.Add(new StockLevelEquityXIRRDataTable(ds.Tables["StockLevelEquityXIRR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCategoryLevelEquityXIRR = ((CategoryLevelEquityXIRRDataTable)(base.Tables["CategoryLevelEquityXIRR"]));
            if ((initTable == true)) {
                if ((this.tableCategoryLevelEquityXIRR != null)) {
                    this.tableCategoryLevelEquityXIRR.InitVars();
                }
            }
            this.tableSubCategoryLevelEquityXIRR = ((SubCategoryLevelEquityXIRRDataTable)(base.Tables["SubCategoryLevelEquityXIRR"]));
            if ((initTable == true)) {
                if ((this.tableSubCategoryLevelEquityXIRR != null)) {
                    this.tableSubCategoryLevelEquityXIRR.InitVars();
                }
            }
            this.tableTransactionDetails = ((TransactionDetailsDataTable)(base.Tables["TransactionDetails"]));
            if ((initTable == true)) {
                if ((this.tableTransactionDetails != null)) {
                    this.tableTransactionDetails.InitVars();
                }
            }
            this.tableTotalXIRR = ((TotalXIRRDataTable)(base.Tables["TotalXIRR"]));
            if ((initTable == true)) {
                if ((this.tableTotalXIRR != null)) {
                    this.tableTotalXIRR.InitVars();
                }
            }
            this.tableStockLevelEquityXIRR = ((StockLevelEquityXIRRDataTable)(base.Tables["StockLevelEquityXIRR"]));
            if ((initTable == true)) {
                if ((this.tableStockLevelEquityXIRR != null)) {
                    this.tableStockLevelEquityXIRR.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EquityAnalytic";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EquityAnalytic.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCategoryLevelEquityXIRR = new CategoryLevelEquityXIRRDataTable();
            base.Tables.Add(this.tableCategoryLevelEquityXIRR);
            this.tableSubCategoryLevelEquityXIRR = new SubCategoryLevelEquityXIRRDataTable();
            base.Tables.Add(this.tableSubCategoryLevelEquityXIRR);
            this.tableTransactionDetails = new TransactionDetailsDataTable();
            base.Tables.Add(this.tableTransactionDetails);
            this.tableTotalXIRR = new TotalXIRRDataTable();
            base.Tables.Add(this.tableTotalXIRR);
            this.tableStockLevelEquityXIRR = new StockLevelEquityXIRRDataTable();
            base.Tables.Add(this.tableStockLevelEquityXIRR);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategoryLevelEquityXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubCategoryLevelEquityXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransactionDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTotalXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockLevelEquityXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EquityAnalytic ds = new EquityAnalytic();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CategoryLevelEquityXIRRRowChangeEventHandler(object sender, CategoryLevelEquityXIRRRowChangeEvent e);
        
        public delegate void SubCategoryLevelEquityXIRRRowChangeEventHandler(object sender, SubCategoryLevelEquityXIRRRowChangeEvent e);
        
        public delegate void TransactionDetailsRowChangeEventHandler(object sender, TransactionDetailsRowChangeEvent e);
        
        public delegate void TotalXIRRRowChangeEventHandler(object sender, TotalXIRRRowChangeEvent e);
        
        public delegate void StockLevelEquityXIRRRowChangeEventHandler(object sender, StockLevelEquityXIRRRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoryLevelEquityXIRRDataTable : global::System.Data.TypedTableBase<CategoryLevelEquityXIRRRow> {
            
            private global::System.Data.DataColumn columnPGSC_CategoryId;
            
            private global::System.Data.DataColumn columnPGSC_SectorCategoryName;
            
            private global::System.Data.DataColumn columnCET_TradeTotal;
            
            private global::System.Data.DataColumn columnIndex_Total;
            
            private global::System.Data.DataColumn columnCET_TradeTotal_Moi;
            
            private global::System.Data.DataColumn columnIndex_Total_Moi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryLevelEquityXIRRDataTable() {
                this.TableName = "CategoryLevelEquityXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryLevelEquityXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategoryLevelEquityXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_CategoryIdColumn {
                get {
                    return this.columnPGSC_CategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_SectorCategoryNameColumn {
                get {
                    return this.columnPGSC_SectorCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotalColumn {
                get {
                    return this.columnCET_TradeTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_TotalColumn {
                get {
                    return this.columnIndex_Total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotal_MoiColumn {
                get {
                    return this.columnCET_TradeTotal_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_Total_MoiColumn {
                get {
                    return this.columnIndex_Total_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryLevelEquityXIRRRow this[int index] {
                get {
                    return ((CategoryLevelEquityXIRRRow)(this.Rows[index]));
                }
            }
            
            public event CategoryLevelEquityXIRRRowChangeEventHandler CategoryLevelEquityXIRRRowChanging;
            
            public event CategoryLevelEquityXIRRRowChangeEventHandler CategoryLevelEquityXIRRRowChanged;
            
            public event CategoryLevelEquityXIRRRowChangeEventHandler CategoryLevelEquityXIRRRowDeleting;
            
            public event CategoryLevelEquityXIRRRowChangeEventHandler CategoryLevelEquityXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategoryLevelEquityXIRRRow(CategoryLevelEquityXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryLevelEquityXIRRRow AddCategoryLevelEquityXIRRRow(string PGSC_CategoryId, string PGSC_SectorCategoryName, string CET_TradeTotal, string Index_Total, string CET_TradeTotal_Moi, string Index_Total_Moi) {
                CategoryLevelEquityXIRRRow rowCategoryLevelEquityXIRRRow = ((CategoryLevelEquityXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PGSC_CategoryId,
                        PGSC_SectorCategoryName,
                        CET_TradeTotal,
                        Index_Total,
                        CET_TradeTotal_Moi,
                        Index_Total_Moi};
                rowCategoryLevelEquityXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategoryLevelEquityXIRRRow);
                return rowCategoryLevelEquityXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CategoryLevelEquityXIRRDataTable cln = ((CategoryLevelEquityXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CategoryLevelEquityXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPGSC_CategoryId = base.Columns["PGSC_CategoryId"];
                this.columnPGSC_SectorCategoryName = base.Columns["PGSC_SectorCategoryName"];
                this.columnCET_TradeTotal = base.Columns["CET_TradeTotal"];
                this.columnIndex_Total = base.Columns["Index_Total"];
                this.columnCET_TradeTotal_Moi = base.Columns["CET_TradeTotal_Moi"];
                this.columnIndex_Total_Moi = base.Columns["Index_Total_Moi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPGSC_CategoryId = new global::System.Data.DataColumn("PGSC_CategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_CategoryId);
                this.columnPGSC_SectorCategoryName = new global::System.Data.DataColumn("PGSC_SectorCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_SectorCategoryName);
                this.columnCET_TradeTotal = new global::System.Data.DataColumn("CET_TradeTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal);
                this.columnIndex_Total = new global::System.Data.DataColumn("Index_Total", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total);
                this.columnCET_TradeTotal_Moi = new global::System.Data.DataColumn("CET_TradeTotal_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal_Moi);
                this.columnIndex_Total_Moi = new global::System.Data.DataColumn("Index_Total_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total_Moi);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryLevelEquityXIRRRow NewCategoryLevelEquityXIRRRow() {
                return ((CategoryLevelEquityXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CategoryLevelEquityXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CategoryLevelEquityXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryLevelEquityXIRRRowChanged != null)) {
                    this.CategoryLevelEquityXIRRRowChanged(this, new CategoryLevelEquityXIRRRowChangeEvent(((CategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryLevelEquityXIRRRowChanging != null)) {
                    this.CategoryLevelEquityXIRRRowChanging(this, new CategoryLevelEquityXIRRRowChangeEvent(((CategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryLevelEquityXIRRRowDeleted != null)) {
                    this.CategoryLevelEquityXIRRRowDeleted(this, new CategoryLevelEquityXIRRRowChangeEvent(((CategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryLevelEquityXIRRRowDeleting != null)) {
                    this.CategoryLevelEquityXIRRRowDeleting(this, new CategoryLevelEquityXIRRRowChangeEvent(((CategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategoryLevelEquityXIRRRow(CategoryLevelEquityXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EquityAnalytic ds = new EquityAnalytic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoryLevelEquityXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubCategoryLevelEquityXIRRDataTable : global::System.Data.TypedTableBase<SubCategoryLevelEquityXIRRRow> {
            
            private global::System.Data.DataColumn columnPGSC_CategoryId;
            
            private global::System.Data.DataColumn columnPGSC_SectorCategoryName;
            
            private global::System.Data.DataColumn columnPGSSC_SubCategoryId;
            
            private global::System.Data.DataColumn columnPGSSC_SectorSubCategoryName;
            
            private global::System.Data.DataColumn columnCET_TradeTotal;
            
            private global::System.Data.DataColumn columnIndex_Total;
            
            private global::System.Data.DataColumn columnCET_TradeTotal_Moi;
            
            private global::System.Data.DataColumn columnIndex_Total_Moi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubCategoryLevelEquityXIRRDataTable() {
                this.TableName = "SubCategoryLevelEquityXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubCategoryLevelEquityXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubCategoryLevelEquityXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_CategoryIdColumn {
                get {
                    return this.columnPGSC_CategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_SectorCategoryNameColumn {
                get {
                    return this.columnPGSC_SectorCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSSC_SubCategoryIdColumn {
                get {
                    return this.columnPGSSC_SubCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSSC_SectorSubCategoryNameColumn {
                get {
                    return this.columnPGSSC_SectorSubCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotalColumn {
                get {
                    return this.columnCET_TradeTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_TotalColumn {
                get {
                    return this.columnIndex_Total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotal_MoiColumn {
                get {
                    return this.columnCET_TradeTotal_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_Total_MoiColumn {
                get {
                    return this.columnIndex_Total_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubCategoryLevelEquityXIRRRow this[int index] {
                get {
                    return ((SubCategoryLevelEquityXIRRRow)(this.Rows[index]));
                }
            }
            
            public event SubCategoryLevelEquityXIRRRowChangeEventHandler SubCategoryLevelEquityXIRRRowChanging;
            
            public event SubCategoryLevelEquityXIRRRowChangeEventHandler SubCategoryLevelEquityXIRRRowChanged;
            
            public event SubCategoryLevelEquityXIRRRowChangeEventHandler SubCategoryLevelEquityXIRRRowDeleting;
            
            public event SubCategoryLevelEquityXIRRRowChangeEventHandler SubCategoryLevelEquityXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubCategoryLevelEquityXIRRRow(SubCategoryLevelEquityXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubCategoryLevelEquityXIRRRow AddSubCategoryLevelEquityXIRRRow(string PGSC_CategoryId, string PGSC_SectorCategoryName, string PGSSC_SubCategoryId, string PGSSC_SectorSubCategoryName, string CET_TradeTotal, string Index_Total, string CET_TradeTotal_Moi, string Index_Total_Moi) {
                SubCategoryLevelEquityXIRRRow rowSubCategoryLevelEquityXIRRRow = ((SubCategoryLevelEquityXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PGSC_CategoryId,
                        PGSC_SectorCategoryName,
                        PGSSC_SubCategoryId,
                        PGSSC_SectorSubCategoryName,
                        CET_TradeTotal,
                        Index_Total,
                        CET_TradeTotal_Moi,
                        Index_Total_Moi};
                rowSubCategoryLevelEquityXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubCategoryLevelEquityXIRRRow);
                return rowSubCategoryLevelEquityXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubCategoryLevelEquityXIRRDataTable cln = ((SubCategoryLevelEquityXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubCategoryLevelEquityXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPGSC_CategoryId = base.Columns["PGSC_CategoryId"];
                this.columnPGSC_SectorCategoryName = base.Columns["PGSC_SectorCategoryName"];
                this.columnPGSSC_SubCategoryId = base.Columns["PGSSC_SubCategoryId"];
                this.columnPGSSC_SectorSubCategoryName = base.Columns["PGSSC_SectorSubCategoryName"];
                this.columnCET_TradeTotal = base.Columns["CET_TradeTotal"];
                this.columnIndex_Total = base.Columns["Index_Total"];
                this.columnCET_TradeTotal_Moi = base.Columns["CET_TradeTotal_Moi"];
                this.columnIndex_Total_Moi = base.Columns["Index_Total_Moi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPGSC_CategoryId = new global::System.Data.DataColumn("PGSC_CategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_CategoryId);
                this.columnPGSC_SectorCategoryName = new global::System.Data.DataColumn("PGSC_SectorCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_SectorCategoryName);
                this.columnPGSSC_SubCategoryId = new global::System.Data.DataColumn("PGSSC_SubCategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSSC_SubCategoryId);
                this.columnPGSSC_SectorSubCategoryName = new global::System.Data.DataColumn("PGSSC_SectorSubCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSSC_SectorSubCategoryName);
                this.columnCET_TradeTotal = new global::System.Data.DataColumn("CET_TradeTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal);
                this.columnIndex_Total = new global::System.Data.DataColumn("Index_Total", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total);
                this.columnCET_TradeTotal_Moi = new global::System.Data.DataColumn("CET_TradeTotal_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal_Moi);
                this.columnIndex_Total_Moi = new global::System.Data.DataColumn("Index_Total_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total_Moi);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubCategoryLevelEquityXIRRRow NewSubCategoryLevelEquityXIRRRow() {
                return ((SubCategoryLevelEquityXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubCategoryLevelEquityXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubCategoryLevelEquityXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubCategoryLevelEquityXIRRRowChanged != null)) {
                    this.SubCategoryLevelEquityXIRRRowChanged(this, new SubCategoryLevelEquityXIRRRowChangeEvent(((SubCategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubCategoryLevelEquityXIRRRowChanging != null)) {
                    this.SubCategoryLevelEquityXIRRRowChanging(this, new SubCategoryLevelEquityXIRRRowChangeEvent(((SubCategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubCategoryLevelEquityXIRRRowDeleted != null)) {
                    this.SubCategoryLevelEquityXIRRRowDeleted(this, new SubCategoryLevelEquityXIRRRowChangeEvent(((SubCategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubCategoryLevelEquityXIRRRowDeleting != null)) {
                    this.SubCategoryLevelEquityXIRRRowDeleting(this, new SubCategoryLevelEquityXIRRRowChangeEvent(((SubCategoryLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubCategoryLevelEquityXIRRRow(SubCategoryLevelEquityXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EquityAnalytic ds = new EquityAnalytic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubCategoryLevelEquityXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransactionDetailsDataTable : global::System.Data.TypedTableBase<TransactionDetailsRow> {
            
            private global::System.Data.DataColumn columnPEM_ScripCode;
            
            private global::System.Data.DataColumn columnCP_PortfolioId;
            
            private global::System.Data.DataColumn columnCP_PortfolioName;
            
            private global::System.Data.DataColumn columnPEM_CompanyName;
            
            private global::System.Data.DataColumn columnCET_TradeDate;
            
            private global::System.Data.DataColumn columnCET_Quantity;
            
            private global::System.Data.DataColumn columnCET_Rate;
            
            private global::System.Data.DataColumn columnCET_TradeTotal;
            
            private global::System.Data.DataColumn columnIndex_Price;
            
            private global::System.Data.DataColumn columnIndex_Qnty;
            
            private global::System.Data.DataColumn columnIndex_Total;
            
            private global::System.Data.DataColumn columnExchangeRate;
            
            private global::System.Data.DataColumn columnCET_BuySell;
            
            private global::System.Data.DataColumn columnWETT_TransactionCode;
            
            private global::System.Data.DataColumn columnPGSC_CategoryId;
            
            private global::System.Data.DataColumn columnPGSC_SectorCategoryName;
            
            private global::System.Data.DataColumn columnPGSSC_SubCategoryId;
            
            private global::System.Data.DataColumn columnPGSSC_SectorSubCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDetailsDataTable() {
                this.TableName = "TransactionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransactionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEM_ScripCodeColumn {
                get {
                    return this.columnPEM_ScripCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CP_PortfolioIdColumn {
                get {
                    return this.columnCP_PortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CP_PortfolioNameColumn {
                get {
                    return this.columnCP_PortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEM_CompanyNameColumn {
                get {
                    return this.columnPEM_CompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeDateColumn {
                get {
                    return this.columnCET_TradeDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_QuantityColumn {
                get {
                    return this.columnCET_Quantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_RateColumn {
                get {
                    return this.columnCET_Rate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotalColumn {
                get {
                    return this.columnCET_TradeTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_PriceColumn {
                get {
                    return this.columnIndex_Price;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_QntyColumn {
                get {
                    return this.columnIndex_Qnty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_TotalColumn {
                get {
                    return this.columnIndex_Total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExchangeRateColumn {
                get {
                    return this.columnExchangeRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_BuySellColumn {
                get {
                    return this.columnCET_BuySell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WETT_TransactionCodeColumn {
                get {
                    return this.columnWETT_TransactionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_CategoryIdColumn {
                get {
                    return this.columnPGSC_CategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_SectorCategoryNameColumn {
                get {
                    return this.columnPGSC_SectorCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSSC_SubCategoryIdColumn {
                get {
                    return this.columnPGSSC_SubCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSSC_SectorSubCategoryNameColumn {
                get {
                    return this.columnPGSSC_SectorSubCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDetailsRow this[int index] {
                get {
                    return ((TransactionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event TransactionDetailsRowChangeEventHandler TransactionDetailsRowChanging;
            
            public event TransactionDetailsRowChangeEventHandler TransactionDetailsRowChanged;
            
            public event TransactionDetailsRowChangeEventHandler TransactionDetailsRowDeleting;
            
            public event TransactionDetailsRowChangeEventHandler TransactionDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransactionDetailsRow(TransactionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDetailsRow AddTransactionDetailsRow(
                        string PEM_ScripCode, 
                        string CP_PortfolioId, 
                        string CP_PortfolioName, 
                        string PEM_CompanyName, 
                        string CET_TradeDate, 
                        string CET_Quantity, 
                        string CET_Rate, 
                        string CET_TradeTotal, 
                        string Index_Price, 
                        string Index_Qnty, 
                        string Index_Total, 
                        string ExchangeRate, 
                        string CET_BuySell, 
                        string WETT_TransactionCode, 
                        string PGSC_CategoryId, 
                        string PGSC_SectorCategoryName, 
                        string PGSSC_SubCategoryId, 
                        string PGSSC_SectorSubCategoryName) {
                TransactionDetailsRow rowTransactionDetailsRow = ((TransactionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PEM_ScripCode,
                        CP_PortfolioId,
                        CP_PortfolioName,
                        PEM_CompanyName,
                        CET_TradeDate,
                        CET_Quantity,
                        CET_Rate,
                        CET_TradeTotal,
                        Index_Price,
                        Index_Qnty,
                        Index_Total,
                        ExchangeRate,
                        CET_BuySell,
                        WETT_TransactionCode,
                        PGSC_CategoryId,
                        PGSC_SectorCategoryName,
                        PGSSC_SubCategoryId,
                        PGSSC_SectorSubCategoryName};
                rowTransactionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTransactionDetailsRow);
                return rowTransactionDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TransactionDetailsDataTable cln = ((TransactionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TransactionDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPEM_ScripCode = base.Columns["PEM_ScripCode"];
                this.columnCP_PortfolioId = base.Columns["CP_PortfolioId"];
                this.columnCP_PortfolioName = base.Columns["CP_PortfolioName"];
                this.columnPEM_CompanyName = base.Columns["PEM_CompanyName"];
                this.columnCET_TradeDate = base.Columns["CET_TradeDate"];
                this.columnCET_Quantity = base.Columns["CET_Quantity"];
                this.columnCET_Rate = base.Columns["CET_Rate"];
                this.columnCET_TradeTotal = base.Columns["CET_TradeTotal"];
                this.columnIndex_Price = base.Columns["Index_Price"];
                this.columnIndex_Qnty = base.Columns["Index_Qnty"];
                this.columnIndex_Total = base.Columns["Index_Total"];
                this.columnExchangeRate = base.Columns["ExchangeRate"];
                this.columnCET_BuySell = base.Columns["CET_BuySell"];
                this.columnWETT_TransactionCode = base.Columns["WETT_TransactionCode"];
                this.columnPGSC_CategoryId = base.Columns["PGSC_CategoryId"];
                this.columnPGSC_SectorCategoryName = base.Columns["PGSC_SectorCategoryName"];
                this.columnPGSSC_SubCategoryId = base.Columns["PGSSC_SubCategoryId"];
                this.columnPGSSC_SectorSubCategoryName = base.Columns["PGSSC_SectorSubCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPEM_ScripCode = new global::System.Data.DataColumn("PEM_ScripCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEM_ScripCode);
                this.columnCP_PortfolioId = new global::System.Data.DataColumn("CP_PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_PortfolioId);
                this.columnCP_PortfolioName = new global::System.Data.DataColumn("CP_PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_PortfolioName);
                this.columnPEM_CompanyName = new global::System.Data.DataColumn("PEM_CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEM_CompanyName);
                this.columnCET_TradeDate = new global::System.Data.DataColumn("CET_TradeDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeDate);
                this.columnCET_Quantity = new global::System.Data.DataColumn("CET_Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_Quantity);
                this.columnCET_Rate = new global::System.Data.DataColumn("CET_Rate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_Rate);
                this.columnCET_TradeTotal = new global::System.Data.DataColumn("CET_TradeTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal);
                this.columnIndex_Price = new global::System.Data.DataColumn("Index_Price", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Price);
                this.columnIndex_Qnty = new global::System.Data.DataColumn("Index_Qnty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Qnty);
                this.columnIndex_Total = new global::System.Data.DataColumn("Index_Total", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total);
                this.columnExchangeRate = new global::System.Data.DataColumn("ExchangeRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExchangeRate);
                this.columnCET_BuySell = new global::System.Data.DataColumn("CET_BuySell", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_BuySell);
                this.columnWETT_TransactionCode = new global::System.Data.DataColumn("WETT_TransactionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWETT_TransactionCode);
                this.columnPGSC_CategoryId = new global::System.Data.DataColumn("PGSC_CategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_CategoryId);
                this.columnPGSC_SectorCategoryName = new global::System.Data.DataColumn("PGSC_SectorCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_SectorCategoryName);
                this.columnPGSSC_SubCategoryId = new global::System.Data.DataColumn("PGSSC_SubCategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSSC_SubCategoryId);
                this.columnPGSSC_SectorSubCategoryName = new global::System.Data.DataColumn("PGSSC_SectorSubCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSSC_SectorSubCategoryName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDetailsRow NewTransactionDetailsRow() {
                return ((TransactionDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TransactionDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TransactionDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionDetailsRowChanged != null)) {
                    this.TransactionDetailsRowChanged(this, new TransactionDetailsRowChangeEvent(((TransactionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionDetailsRowChanging != null)) {
                    this.TransactionDetailsRowChanging(this, new TransactionDetailsRowChangeEvent(((TransactionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionDetailsRowDeleted != null)) {
                    this.TransactionDetailsRowDeleted(this, new TransactionDetailsRowChangeEvent(((TransactionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionDetailsRowDeleting != null)) {
                    this.TransactionDetailsRowDeleting(this, new TransactionDetailsRowChangeEvent(((TransactionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransactionDetailsRow(TransactionDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EquityAnalytic ds = new EquityAnalytic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransactionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TotalXIRRDataTable : global::System.Data.TypedTableBase<TotalXIRRRow> {
            
            private global::System.Data.DataColumn columnCET_TradeTotal;
            
            private global::System.Data.DataColumn columnIndex_Total;
            
            private global::System.Data.DataColumn columnCET_TradeTotal_Moi;
            
            private global::System.Data.DataColumn columnIndex_Total_Moi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalXIRRDataTable() {
                this.TableName = "TotalXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TotalXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TotalXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotalColumn {
                get {
                    return this.columnCET_TradeTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_TotalColumn {
                get {
                    return this.columnIndex_Total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotal_MoiColumn {
                get {
                    return this.columnCET_TradeTotal_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_Total_MoiColumn {
                get {
                    return this.columnIndex_Total_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalXIRRRow this[int index] {
                get {
                    return ((TotalXIRRRow)(this.Rows[index]));
                }
            }
            
            public event TotalXIRRRowChangeEventHandler TotalXIRRRowChanging;
            
            public event TotalXIRRRowChangeEventHandler TotalXIRRRowChanged;
            
            public event TotalXIRRRowChangeEventHandler TotalXIRRRowDeleting;
            
            public event TotalXIRRRowChangeEventHandler TotalXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTotalXIRRRow(TotalXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalXIRRRow AddTotalXIRRRow(string CET_TradeTotal, string Index_Total, string CET_TradeTotal_Moi, string Index_Total_Moi) {
                TotalXIRRRow rowTotalXIRRRow = ((TotalXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CET_TradeTotal,
                        Index_Total,
                        CET_TradeTotal_Moi,
                        Index_Total_Moi};
                rowTotalXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTotalXIRRRow);
                return rowTotalXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TotalXIRRDataTable cln = ((TotalXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TotalXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCET_TradeTotal = base.Columns["CET_TradeTotal"];
                this.columnIndex_Total = base.Columns["Index_Total"];
                this.columnCET_TradeTotal_Moi = base.Columns["CET_TradeTotal_Moi"];
                this.columnIndex_Total_Moi = base.Columns["Index_Total_Moi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCET_TradeTotal = new global::System.Data.DataColumn("CET_TradeTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal);
                this.columnIndex_Total = new global::System.Data.DataColumn("Index_Total", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total);
                this.columnCET_TradeTotal_Moi = new global::System.Data.DataColumn("CET_TradeTotal_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal_Moi);
                this.columnIndex_Total_Moi = new global::System.Data.DataColumn("Index_Total_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total_Moi);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalXIRRRow NewTotalXIRRRow() {
                return ((TotalXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TotalXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TotalXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TotalXIRRRowChanged != null)) {
                    this.TotalXIRRRowChanged(this, new TotalXIRRRowChangeEvent(((TotalXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TotalXIRRRowChanging != null)) {
                    this.TotalXIRRRowChanging(this, new TotalXIRRRowChangeEvent(((TotalXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TotalXIRRRowDeleted != null)) {
                    this.TotalXIRRRowDeleted(this, new TotalXIRRRowChangeEvent(((TotalXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TotalXIRRRowDeleting != null)) {
                    this.TotalXIRRRowDeleting(this, new TotalXIRRRowChangeEvent(((TotalXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTotalXIRRRow(TotalXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EquityAnalytic ds = new EquityAnalytic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TotalXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockLevelEquityXIRRDataTable : global::System.Data.TypedTableBase<StockLevelEquityXIRRRow> {
            
            private global::System.Data.DataColumn columnPEM_CompanyName;
            
            private global::System.Data.DataColumn _columnPEM_ScripCode_;
            
            private global::System.Data.DataColumn columnCET_TradeTotal;
            
            private global::System.Data.DataColumn columnIndex_Total;
            
            private global::System.Data.DataColumn columnCET_TradeTotal_Moi;
            
            private global::System.Data.DataColumn columnIndex_Total_Moi;
            
            private global::System.Data.DataColumn columnPGSC_CategoryId;
            
            private global::System.Data.DataColumn columnPGSC_SectorCategoryName;
            
            private global::System.Data.DataColumn columnPGSSC_SubCategoryId;
            
            private global::System.Data.DataColumn columnPGSSC_SectorSubCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockLevelEquityXIRRDataTable() {
                this.TableName = "StockLevelEquityXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockLevelEquityXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockLevelEquityXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEM_CompanyNameColumn {
                get {
                    return this.columnPEM_CompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _PEM_ScripCode_Column {
                get {
                    return this._columnPEM_ScripCode_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotalColumn {
                get {
                    return this.columnCET_TradeTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_TotalColumn {
                get {
                    return this.columnIndex_Total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CET_TradeTotal_MoiColumn {
                get {
                    return this.columnCET_TradeTotal_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index_Total_MoiColumn {
                get {
                    return this.columnIndex_Total_Moi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_CategoryIdColumn {
                get {
                    return this.columnPGSC_CategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSC_SectorCategoryNameColumn {
                get {
                    return this.columnPGSC_SectorCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSSC_SubCategoryIdColumn {
                get {
                    return this.columnPGSSC_SubCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PGSSC_SectorSubCategoryNameColumn {
                get {
                    return this.columnPGSSC_SectorSubCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockLevelEquityXIRRRow this[int index] {
                get {
                    return ((StockLevelEquityXIRRRow)(this.Rows[index]));
                }
            }
            
            public event StockLevelEquityXIRRRowChangeEventHandler StockLevelEquityXIRRRowChanging;
            
            public event StockLevelEquityXIRRRowChangeEventHandler StockLevelEquityXIRRRowChanged;
            
            public event StockLevelEquityXIRRRowChangeEventHandler StockLevelEquityXIRRRowDeleting;
            
            public event StockLevelEquityXIRRRowChangeEventHandler StockLevelEquityXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockLevelEquityXIRRRow(StockLevelEquityXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockLevelEquityXIRRRow AddStockLevelEquityXIRRRow(string PEM_CompanyName, string _PEM_ScripCode_, string CET_TradeTotal, string Index_Total, string CET_TradeTotal_Moi, string Index_Total_Moi, string PGSC_CategoryId, string PGSC_SectorCategoryName, string PGSSC_SubCategoryId, string PGSSC_SectorSubCategoryName) {
                StockLevelEquityXIRRRow rowStockLevelEquityXIRRRow = ((StockLevelEquityXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PEM_CompanyName,
                        _PEM_ScripCode_,
                        CET_TradeTotal,
                        Index_Total,
                        CET_TradeTotal_Moi,
                        Index_Total_Moi,
                        PGSC_CategoryId,
                        PGSC_SectorCategoryName,
                        PGSSC_SubCategoryId,
                        PGSSC_SectorSubCategoryName};
                rowStockLevelEquityXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockLevelEquityXIRRRow);
                return rowStockLevelEquityXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockLevelEquityXIRRDataTable cln = ((StockLevelEquityXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockLevelEquityXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPEM_CompanyName = base.Columns["PEM_CompanyName"];
                this._columnPEM_ScripCode_ = base.Columns["PEM_ScripCode\t"];
                this.columnCET_TradeTotal = base.Columns["CET_TradeTotal"];
                this.columnIndex_Total = base.Columns["Index_Total"];
                this.columnCET_TradeTotal_Moi = base.Columns["CET_TradeTotal_Moi"];
                this.columnIndex_Total_Moi = base.Columns["Index_Total_Moi"];
                this.columnPGSC_CategoryId = base.Columns["PGSC_CategoryId"];
                this.columnPGSC_SectorCategoryName = base.Columns["PGSC_SectorCategoryName"];
                this.columnPGSSC_SubCategoryId = base.Columns["PGSSC_SubCategoryId"];
                this.columnPGSSC_SectorSubCategoryName = base.Columns["PGSSC_SectorSubCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPEM_CompanyName = new global::System.Data.DataColumn("PEM_CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEM_CompanyName);
                this._columnPEM_ScripCode_ = new global::System.Data.DataColumn("PEM_ScripCode\t", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnPEM_ScripCode_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPEM_ScripCode_");
                this._columnPEM_ScripCode_.ExtendedProperties.Add("Generator_UserColumnName", "PEM_ScripCode\t");
                base.Columns.Add(this._columnPEM_ScripCode_);
                this.columnCET_TradeTotal = new global::System.Data.DataColumn("CET_TradeTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal);
                this.columnIndex_Total = new global::System.Data.DataColumn("Index_Total", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total);
                this.columnCET_TradeTotal_Moi = new global::System.Data.DataColumn("CET_TradeTotal_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCET_TradeTotal_Moi);
                this.columnIndex_Total_Moi = new global::System.Data.DataColumn("Index_Total_Moi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex_Total_Moi);
                this.columnPGSC_CategoryId = new global::System.Data.DataColumn("PGSC_CategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_CategoryId);
                this.columnPGSC_SectorCategoryName = new global::System.Data.DataColumn("PGSC_SectorCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSC_SectorCategoryName);
                this.columnPGSSC_SubCategoryId = new global::System.Data.DataColumn("PGSSC_SubCategoryId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSSC_SubCategoryId);
                this.columnPGSSC_SectorSubCategoryName = new global::System.Data.DataColumn("PGSSC_SectorSubCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGSSC_SectorSubCategoryName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockLevelEquityXIRRRow NewStockLevelEquityXIRRRow() {
                return ((StockLevelEquityXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockLevelEquityXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockLevelEquityXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockLevelEquityXIRRRowChanged != null)) {
                    this.StockLevelEquityXIRRRowChanged(this, new StockLevelEquityXIRRRowChangeEvent(((StockLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockLevelEquityXIRRRowChanging != null)) {
                    this.StockLevelEquityXIRRRowChanging(this, new StockLevelEquityXIRRRowChangeEvent(((StockLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockLevelEquityXIRRRowDeleted != null)) {
                    this.StockLevelEquityXIRRRowDeleted(this, new StockLevelEquityXIRRRowChangeEvent(((StockLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockLevelEquityXIRRRowDeleting != null)) {
                    this.StockLevelEquityXIRRRowDeleting(this, new StockLevelEquityXIRRRowChangeEvent(((StockLevelEquityXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockLevelEquityXIRRRow(StockLevelEquityXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EquityAnalytic ds = new EquityAnalytic();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockLevelEquityXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategoryLevelEquityXIRRRow : global::System.Data.DataRow {
            
            private CategoryLevelEquityXIRRDataTable tableCategoryLevelEquityXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryLevelEquityXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategoryLevelEquityXIRR = ((CategoryLevelEquityXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_CategoryId {
                get {
                    try {
                        return ((string)(this[this.tableCategoryLevelEquityXIRR.PGSC_CategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_CategoryId\' in table \'CategoryLevelEquityXIRR\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCategoryLevelEquityXIRR.PGSC_CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_SectorCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_SectorCategoryName\' in table \'CategoryLevelEquityXIRR\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal {
                get {
                    try {
                        return ((string)(this[this.tableCategoryLevelEquityXIRR.CET_TradeTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal\' in table \'CategoryLevelEquityXIRR\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCategoryLevelEquityXIRR.CET_TradeTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total {
                get {
                    try {
                        return ((string)(this[this.tableCategoryLevelEquityXIRR.Index_TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total\' in table \'CategoryLevelEquityXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategoryLevelEquityXIRR.Index_TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal_Moi {
                get {
                    try {
                        return ((string)(this[this.tableCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal_Moi\' in table \'CategoryLevelEquityXIRR\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total_Moi {
                get {
                    try {
                        return ((string)(this[this.tableCategoryLevelEquityXIRR.Index_Total_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total_Moi\' in table \'CategoryLevelEquityXIRR\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCategoryLevelEquityXIRR.Index_Total_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_CategoryIdNull() {
                return this.IsNull(this.tableCategoryLevelEquityXIRR.PGSC_CategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_CategoryIdNull() {
                this[this.tableCategoryLevelEquityXIRR.PGSC_CategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_SectorCategoryNameNull() {
                return this.IsNull(this.tableCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_SectorCategoryNameNull() {
                this[this.tableCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotalNull() {
                return this.IsNull(this.tableCategoryLevelEquityXIRR.CET_TradeTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotalNull() {
                this[this.tableCategoryLevelEquityXIRR.CET_TradeTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_TotalNull() {
                return this.IsNull(this.tableCategoryLevelEquityXIRR.Index_TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_TotalNull() {
                this[this.tableCategoryLevelEquityXIRR.Index_TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotal_MoiNull() {
                return this.IsNull(this.tableCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotal_MoiNull() {
                this[this.tableCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_Total_MoiNull() {
                return this.IsNull(this.tableCategoryLevelEquityXIRR.Index_Total_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_Total_MoiNull() {
                this[this.tableCategoryLevelEquityXIRR.Index_Total_MoiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubCategoryLevelEquityXIRRRow : global::System.Data.DataRow {
            
            private SubCategoryLevelEquityXIRRDataTable tableSubCategoryLevelEquityXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubCategoryLevelEquityXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubCategoryLevelEquityXIRR = ((SubCategoryLevelEquityXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_CategoryId {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.PGSC_CategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_CategoryId\' in table \'SubCategoryLevelEquityXIRR\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.PGSC_CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_SectorCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_SectorCategoryName\' in table \'SubCategoryLevelEquityXI" +
                                "RR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSSC_SubCategoryId {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.PGSSC_SubCategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSSC_SubCategoryId\' in table \'SubCategoryLevelEquityXIRR\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.PGSSC_SubCategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSSC_SectorSubCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSSC_SectorSubCategoryName\' in table \'SubCategoryLevelEqui" +
                                "tyXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.CET_TradeTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal\' in table \'SubCategoryLevelEquityXIRR\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.CET_TradeTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.Index_TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total\' in table \'SubCategoryLevelEquityXIRR\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.Index_TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal_Moi {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal_Moi\' in table \'SubCategoryLevelEquityXIRR\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total_Moi {
                get {
                    try {
                        return ((string)(this[this.tableSubCategoryLevelEquityXIRR.Index_Total_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total_Moi\' in table \'SubCategoryLevelEquityXIRR\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSubCategoryLevelEquityXIRR.Index_Total_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_CategoryIdNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.PGSC_CategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_CategoryIdNull() {
                this[this.tableSubCategoryLevelEquityXIRR.PGSC_CategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_SectorCategoryNameNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_SectorCategoryNameNull() {
                this[this.tableSubCategoryLevelEquityXIRR.PGSC_SectorCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSSC_SubCategoryIdNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.PGSSC_SubCategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSSC_SubCategoryIdNull() {
                this[this.tableSubCategoryLevelEquityXIRR.PGSSC_SubCategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSSC_SectorSubCategoryNameNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSSC_SectorSubCategoryNameNull() {
                this[this.tableSubCategoryLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotalNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.CET_TradeTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotalNull() {
                this[this.tableSubCategoryLevelEquityXIRR.CET_TradeTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_TotalNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.Index_TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_TotalNull() {
                this[this.tableSubCategoryLevelEquityXIRR.Index_TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotal_MoiNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotal_MoiNull() {
                this[this.tableSubCategoryLevelEquityXIRR.CET_TradeTotal_MoiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_Total_MoiNull() {
                return this.IsNull(this.tableSubCategoryLevelEquityXIRR.Index_Total_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_Total_MoiNull() {
                this[this.tableSubCategoryLevelEquityXIRR.Index_Total_MoiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransactionDetailsRow : global::System.Data.DataRow {
            
            private TransactionDetailsDataTable tableTransactionDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactionDetails = ((TransactionDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEM_ScripCode {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.PEM_ScripCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEM_ScripCode\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.PEM_ScripCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CP_PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CP_PortfolioId\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CP_PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CP_PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CP_PortfolioName\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CP_PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEM_CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.PEM_CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEM_CompanyName\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.PEM_CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeDate {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CET_TradeDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeDate\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CET_TradeDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_Quantity {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CET_QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_Quantity\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CET_QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_Rate {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CET_RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_Rate\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CET_RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CET_TradeTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CET_TradeTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Price {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.Index_PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Price\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.Index_PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Qnty {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.Index_QntyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Qnty\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.Index_QntyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.Index_TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.Index_TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExchangeRate {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.ExchangeRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExchangeRate\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.ExchangeRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_BuySell {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.CET_BuySellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_BuySell\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.CET_BuySellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WETT_TransactionCode {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.WETT_TransactionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WETT_TransactionCode\' in table \'TransactionDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.WETT_TransactionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_CategoryId {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.PGSC_CategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_CategoryId\' in table \'TransactionDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.PGSC_CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_SectorCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.PGSC_SectorCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_SectorCategoryName\' in table \'TransactionDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.PGSC_SectorCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSSC_SubCategoryId {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.PGSSC_SubCategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSSC_SubCategoryId\' in table \'TransactionDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.PGSSC_SubCategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSSC_SectorSubCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableTransactionDetails.PGSSC_SectorSubCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSSC_SectorSubCategoryName\' in table \'TransactionDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactionDetails.PGSSC_SectorSubCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEM_ScripCodeNull() {
                return this.IsNull(this.tableTransactionDetails.PEM_ScripCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEM_ScripCodeNull() {
                this[this.tableTransactionDetails.PEM_ScripCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCP_PortfolioIdNull() {
                return this.IsNull(this.tableTransactionDetails.CP_PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCP_PortfolioIdNull() {
                this[this.tableTransactionDetails.CP_PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCP_PortfolioNameNull() {
                return this.IsNull(this.tableTransactionDetails.CP_PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCP_PortfolioNameNull() {
                this[this.tableTransactionDetails.CP_PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEM_CompanyNameNull() {
                return this.IsNull(this.tableTransactionDetails.PEM_CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEM_CompanyNameNull() {
                this[this.tableTransactionDetails.PEM_CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeDateNull() {
                return this.IsNull(this.tableTransactionDetails.CET_TradeDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeDateNull() {
                this[this.tableTransactionDetails.CET_TradeDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_QuantityNull() {
                return this.IsNull(this.tableTransactionDetails.CET_QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_QuantityNull() {
                this[this.tableTransactionDetails.CET_QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_RateNull() {
                return this.IsNull(this.tableTransactionDetails.CET_RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_RateNull() {
                this[this.tableTransactionDetails.CET_RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotalNull() {
                return this.IsNull(this.tableTransactionDetails.CET_TradeTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotalNull() {
                this[this.tableTransactionDetails.CET_TradeTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_PriceNull() {
                return this.IsNull(this.tableTransactionDetails.Index_PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_PriceNull() {
                this[this.tableTransactionDetails.Index_PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_QntyNull() {
                return this.IsNull(this.tableTransactionDetails.Index_QntyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_QntyNull() {
                this[this.tableTransactionDetails.Index_QntyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_TotalNull() {
                return this.IsNull(this.tableTransactionDetails.Index_TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_TotalNull() {
                this[this.tableTransactionDetails.Index_TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExchangeRateNull() {
                return this.IsNull(this.tableTransactionDetails.ExchangeRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExchangeRateNull() {
                this[this.tableTransactionDetails.ExchangeRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_BuySellNull() {
                return this.IsNull(this.tableTransactionDetails.CET_BuySellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_BuySellNull() {
                this[this.tableTransactionDetails.CET_BuySellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWETT_TransactionCodeNull() {
                return this.IsNull(this.tableTransactionDetails.WETT_TransactionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWETT_TransactionCodeNull() {
                this[this.tableTransactionDetails.WETT_TransactionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_CategoryIdNull() {
                return this.IsNull(this.tableTransactionDetails.PGSC_CategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_CategoryIdNull() {
                this[this.tableTransactionDetails.PGSC_CategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_SectorCategoryNameNull() {
                return this.IsNull(this.tableTransactionDetails.PGSC_SectorCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_SectorCategoryNameNull() {
                this[this.tableTransactionDetails.PGSC_SectorCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSSC_SubCategoryIdNull() {
                return this.IsNull(this.tableTransactionDetails.PGSSC_SubCategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSSC_SubCategoryIdNull() {
                this[this.tableTransactionDetails.PGSSC_SubCategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSSC_SectorSubCategoryNameNull() {
                return this.IsNull(this.tableTransactionDetails.PGSSC_SectorSubCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSSC_SectorSubCategoryNameNull() {
                this[this.tableTransactionDetails.PGSSC_SectorSubCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TotalXIRRRow : global::System.Data.DataRow {
            
            private TotalXIRRDataTable tableTotalXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TotalXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTotalXIRR = ((TotalXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal {
                get {
                    try {
                        return ((string)(this[this.tableTotalXIRR.CET_TradeTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal\' in table \'TotalXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTotalXIRR.CET_TradeTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total {
                get {
                    try {
                        return ((string)(this[this.tableTotalXIRR.Index_TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total\' in table \'TotalXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTotalXIRR.Index_TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal_Moi {
                get {
                    try {
                        return ((string)(this[this.tableTotalXIRR.CET_TradeTotal_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal_Moi\' in table \'TotalXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTotalXIRR.CET_TradeTotal_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total_Moi {
                get {
                    try {
                        return ((string)(this[this.tableTotalXIRR.Index_Total_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total_Moi\' in table \'TotalXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTotalXIRR.Index_Total_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotalNull() {
                return this.IsNull(this.tableTotalXIRR.CET_TradeTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotalNull() {
                this[this.tableTotalXIRR.CET_TradeTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_TotalNull() {
                return this.IsNull(this.tableTotalXIRR.Index_TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_TotalNull() {
                this[this.tableTotalXIRR.Index_TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotal_MoiNull() {
                return this.IsNull(this.tableTotalXIRR.CET_TradeTotal_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotal_MoiNull() {
                this[this.tableTotalXIRR.CET_TradeTotal_MoiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_Total_MoiNull() {
                return this.IsNull(this.tableTotalXIRR.Index_Total_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_Total_MoiNull() {
                this[this.tableTotalXIRR.Index_Total_MoiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockLevelEquityXIRRRow : global::System.Data.DataRow {
            
            private StockLevelEquityXIRRDataTable tableStockLevelEquityXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockLevelEquityXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockLevelEquityXIRR = ((StockLevelEquityXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PEM_CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.PEM_CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEM_CompanyName\' in table \'StockLevelEquityXIRR\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.PEM_CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _PEM_ScripCode_ {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR._PEM_ScripCode_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PEM_ScripCode\t\' in table \'StockLevelEquityXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR._PEM_ScripCode_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.CET_TradeTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal\' in table \'StockLevelEquityXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.CET_TradeTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.Index_TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total\' in table \'StockLevelEquityXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.Index_TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CET_TradeTotal_Moi {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.CET_TradeTotal_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CET_TradeTotal_Moi\' in table \'StockLevelEquityXIRR\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.CET_TradeTotal_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index_Total_Moi {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.Index_Total_MoiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index_Total_Moi\' in table \'StockLevelEquityXIRR\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.Index_Total_MoiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_CategoryId {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.PGSC_CategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_CategoryId\' in table \'StockLevelEquityXIRR\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.PGSC_CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSC_SectorCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.PGSC_SectorCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSC_SectorCategoryName\' in table \'StockLevelEquityXIRR\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.PGSC_SectorCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSSC_SubCategoryId {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.PGSSC_SubCategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSSC_SubCategoryId\' in table \'StockLevelEquityXIRR\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.PGSSC_SubCategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGSSC_SectorSubCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableStockLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PGSSC_SectorSubCategoryName\' in table \'StockLevelEquityXIRR" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPEM_CompanyNameNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.PEM_CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPEM_CompanyNameNull() {
                this[this.tableStockLevelEquityXIRR.PEM_CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_PEM_ScripCode_Null() {
                return this.IsNull(this.tableStockLevelEquityXIRR._PEM_ScripCode_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_PEM_ScripCode_Null() {
                this[this.tableStockLevelEquityXIRR._PEM_ScripCode_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotalNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.CET_TradeTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotalNull() {
                this[this.tableStockLevelEquityXIRR.CET_TradeTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_TotalNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.Index_TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_TotalNull() {
                this[this.tableStockLevelEquityXIRR.Index_TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCET_TradeTotal_MoiNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.CET_TradeTotal_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCET_TradeTotal_MoiNull() {
                this[this.tableStockLevelEquityXIRR.CET_TradeTotal_MoiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex_Total_MoiNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.Index_Total_MoiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex_Total_MoiNull() {
                this[this.tableStockLevelEquityXIRR.Index_Total_MoiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_CategoryIdNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.PGSC_CategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_CategoryIdNull() {
                this[this.tableStockLevelEquityXIRR.PGSC_CategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSC_SectorCategoryNameNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.PGSC_SectorCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSC_SectorCategoryNameNull() {
                this[this.tableStockLevelEquityXIRR.PGSC_SectorCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSSC_SubCategoryIdNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.PGSSC_SubCategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSSC_SubCategoryIdNull() {
                this[this.tableStockLevelEquityXIRR.PGSSC_SubCategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGSSC_SectorSubCategoryNameNull() {
                return this.IsNull(this.tableStockLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGSSC_SectorSubCategoryNameNull() {
                this[this.tableStockLevelEquityXIRR.PGSSC_SectorSubCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoryLevelEquityXIRRRowChangeEvent : global::System.EventArgs {
            
            private CategoryLevelEquityXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryLevelEquityXIRRRowChangeEvent(CategoryLevelEquityXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryLevelEquityXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubCategoryLevelEquityXIRRRowChangeEvent : global::System.EventArgs {
            
            private SubCategoryLevelEquityXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubCategoryLevelEquityXIRRRowChangeEvent(SubCategoryLevelEquityXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubCategoryLevelEquityXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransactionDetailsRowChangeEvent : global::System.EventArgs {
            
            private TransactionDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDetailsRowChangeEvent(TransactionDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TotalXIRRRowChangeEvent : global::System.EventArgs {
            
            private TotalXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalXIRRRowChangeEvent(TotalXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockLevelEquityXIRRRowChangeEvent : global::System.EventArgs {
            
            private StockLevelEquityXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockLevelEquityXIRRRowChangeEvent(StockLevelEquityXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockLevelEquityXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591