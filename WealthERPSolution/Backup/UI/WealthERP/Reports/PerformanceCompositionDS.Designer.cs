//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4963
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PerformanceCompositionDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PerformanceCompositionDS : global::System.Data.DataSet {
        
        private PortfolioCompositionDataTable tablePortfolioComposition;
        
        private ToptenHoldingsDataTable tableToptenHoldings;
        
        private TopTenSectorsDataTable tableTopTenSectors;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PerformanceCompositionDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PerformanceCompositionDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PortfolioComposition"] != null)) {
                    base.Tables.Add(new PortfolioCompositionDataTable(ds.Tables["PortfolioComposition"]));
                }
                if ((ds.Tables["ToptenHoldings"] != null)) {
                    base.Tables.Add(new ToptenHoldingsDataTable(ds.Tables["ToptenHoldings"]));
                }
                if ((ds.Tables["TopTenSectors"] != null)) {
                    base.Tables.Add(new TopTenSectorsDataTable(ds.Tables["TopTenSectors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortfolioCompositionDataTable PortfolioComposition {
            get {
                return this.tablePortfolioComposition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ToptenHoldingsDataTable ToptenHoldings {
            get {
                return this.tableToptenHoldings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TopTenSectorsDataTable TopTenSectors {
            get {
                return this.tableTopTenSectors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PerformanceCompositionDS cln = ((PerformanceCompositionDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PortfolioComposition"] != null)) {
                    base.Tables.Add(new PortfolioCompositionDataTable(ds.Tables["PortfolioComposition"]));
                }
                if ((ds.Tables["ToptenHoldings"] != null)) {
                    base.Tables.Add(new ToptenHoldingsDataTable(ds.Tables["ToptenHoldings"]));
                }
                if ((ds.Tables["TopTenSectors"] != null)) {
                    base.Tables.Add(new TopTenSectorsDataTable(ds.Tables["TopTenSectors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePortfolioComposition = ((PortfolioCompositionDataTable)(base.Tables["PortfolioComposition"]));
            if ((initTable == true)) {
                if ((this.tablePortfolioComposition != null)) {
                    this.tablePortfolioComposition.InitVars();
                }
            }
            this.tableToptenHoldings = ((ToptenHoldingsDataTable)(base.Tables["ToptenHoldings"]));
            if ((initTable == true)) {
                if ((this.tableToptenHoldings != null)) {
                    this.tableToptenHoldings.InitVars();
                }
            }
            this.tableTopTenSectors = ((TopTenSectorsDataTable)(base.Tables["TopTenSectors"]));
            if ((initTable == true)) {
                if ((this.tableTopTenSectors != null)) {
                    this.tableTopTenSectors.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PerformanceCompositionDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PerformanceCompositionDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePortfolioComposition = new PortfolioCompositionDataTable();
            base.Tables.Add(this.tablePortfolioComposition);
            this.tableToptenHoldings = new ToptenHoldingsDataTable();
            base.Tables.Add(this.tableToptenHoldings);
            this.tableTopTenSectors = new TopTenSectorsDataTable();
            base.Tables.Add(this.tableTopTenSectors);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortfolioComposition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeToptenHoldings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTopTenSectors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PerformanceCompositionDS ds = new PerformanceCompositionDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PortfolioCompositionRowChangeEventHandler(object sender, PortfolioCompositionRowChangeEvent e);
        
        public delegate void ToptenHoldingsRowChangeEventHandler(object sender, ToptenHoldingsRowChangeEvent e);
        
        public delegate void TopTenSectorsRowChangeEventHandler(object sender, TopTenSectorsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortfolioCompositionDataTable : global::System.Data.TypedTableBase<PortfolioCompositionRow> {
            
            private global::System.Data.DataColumn columnSchemeCode;
            
            private global::System.Data.DataColumn columnSchemeName;
            
            private global::System.Data.DataColumn columnCurrentValue;
            
            private global::System.Data.DataColumn columnOneMonthReturn;
            
            private global::System.Data.DataColumn columnSixMonthReturn;
            
            private global::System.Data.DataColumn columnOneYearReturn;
            
            private global::System.Data.DataColumn columnThreeYearReturn;
            
            private global::System.Data.DataColumn columnFiveYearReturn;
            
            private global::System.Data.DataColumn columnInceptionReturn;
            
            private global::System.Data.DataColumn columnCashInPortfolio;
            
            private global::System.Data.DataColumn columnPE;
            
            private global::System.Data.DataColumn columnPB;
            
            private global::System.Data.DataColumn columnSharpe;
            
            private global::System.Data.DataColumn columnSd;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnTop5Holding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioCompositionDataTable() {
                this.TableName = "PortfolioComposition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioCompositionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortfolioCompositionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeCodeColumn {
                get {
                    return this.columnSchemeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeNameColumn {
                get {
                    return this.columnSchemeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentValueColumn {
                get {
                    return this.columnCurrentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OneMonthReturnColumn {
                get {
                    return this.columnOneMonthReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SixMonthReturnColumn {
                get {
                    return this.columnSixMonthReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OneYearReturnColumn {
                get {
                    return this.columnOneYearReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThreeYearReturnColumn {
                get {
                    return this.columnThreeYearReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FiveYearReturnColumn {
                get {
                    return this.columnFiveYearReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InceptionReturnColumn {
                get {
                    return this.columnInceptionReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashInPortfolioColumn {
                get {
                    return this.columnCashInPortfolio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEColumn {
                get {
                    return this.columnPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PBColumn {
                get {
                    return this.columnPB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SharpeColumn {
                get {
                    return this.columnSharpe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SdColumn {
                get {
                    return this.columnSd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Top5HoldingColumn {
                get {
                    return this.columnTop5Holding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioCompositionRow this[int index] {
                get {
                    return ((PortfolioCompositionRow)(this.Rows[index]));
                }
            }
            
            public event PortfolioCompositionRowChangeEventHandler PortfolioCompositionRowChanging;
            
            public event PortfolioCompositionRowChangeEventHandler PortfolioCompositionRowChanged;
            
            public event PortfolioCompositionRowChangeEventHandler PortfolioCompositionRowDeleting;
            
            public event PortfolioCompositionRowChangeEventHandler PortfolioCompositionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortfolioCompositionRow(PortfolioCompositionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioCompositionRow AddPortfolioCompositionRow(
                        int SchemeCode, 
                        string SchemeName, 
                        double CurrentValue, 
                        double OneMonthReturn, 
                        double SixMonthReturn, 
                        double OneYearReturn, 
                        double ThreeYearReturn, 
                        double FiveYearReturn, 
                        double InceptionReturn, 
                        double CashInPortfolio, 
                        double PE, 
                        double PB, 
                        double Sharpe, 
                        double Sd, 
                        string CustomerName, 
                        double Top5Holding) {
                PortfolioCompositionRow rowPortfolioCompositionRow = ((PortfolioCompositionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SchemeCode,
                        SchemeName,
                        CurrentValue,
                        OneMonthReturn,
                        SixMonthReturn,
                        OneYearReturn,
                        ThreeYearReturn,
                        FiveYearReturn,
                        InceptionReturn,
                        CashInPortfolio,
                        PE,
                        PB,
                        Sharpe,
                        Sd,
                        CustomerName,
                        Top5Holding};
                rowPortfolioCompositionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortfolioCompositionRow);
                return rowPortfolioCompositionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortfolioCompositionDataTable cln = ((PortfolioCompositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortfolioCompositionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemeCode = base.Columns["SchemeCode"];
                this.columnSchemeName = base.Columns["SchemeName"];
                this.columnCurrentValue = base.Columns["CurrentValue"];
                this.columnOneMonthReturn = base.Columns["OneMonthReturn"];
                this.columnSixMonthReturn = base.Columns["SixMonthReturn"];
                this.columnOneYearReturn = base.Columns["OneYearReturn"];
                this.columnThreeYearReturn = base.Columns["ThreeYearReturn"];
                this.columnFiveYearReturn = base.Columns["FiveYearReturn"];
                this.columnInceptionReturn = base.Columns["InceptionReturn"];
                this.columnCashInPortfolio = base.Columns["CashInPortfolio"];
                this.columnPE = base.Columns["PE"];
                this.columnPB = base.Columns["PB"];
                this.columnSharpe = base.Columns["Sharpe"];
                this.columnSd = base.Columns["Sd"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnTop5Holding = base.Columns["Top5Holding"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemeCode = new global::System.Data.DataColumn("SchemeCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemeCode);
                this.columnSchemeName = new global::System.Data.DataColumn("SchemeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemeName);
                this.columnCurrentValue = new global::System.Data.DataColumn("CurrentValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentValue);
                this.columnOneMonthReturn = new global::System.Data.DataColumn("OneMonthReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOneMonthReturn);
                this.columnSixMonthReturn = new global::System.Data.DataColumn("SixMonthReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSixMonthReturn);
                this.columnOneYearReturn = new global::System.Data.DataColumn("OneYearReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOneYearReturn);
                this.columnThreeYearReturn = new global::System.Data.DataColumn("ThreeYearReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThreeYearReturn);
                this.columnFiveYearReturn = new global::System.Data.DataColumn("FiveYearReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFiveYearReturn);
                this.columnInceptionReturn = new global::System.Data.DataColumn("InceptionReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInceptionReturn);
                this.columnCashInPortfolio = new global::System.Data.DataColumn("CashInPortfolio", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashInPortfolio);
                this.columnPE = new global::System.Data.DataColumn("PE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPE);
                this.columnPB = new global::System.Data.DataColumn("PB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPB);
                this.columnSharpe = new global::System.Data.DataColumn("Sharpe", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSharpe);
                this.columnSd = new global::System.Data.DataColumn("Sd", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSd);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnTop5Holding = new global::System.Data.DataColumn("Top5Holding", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTop5Holding);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioCompositionRow NewPortfolioCompositionRow() {
                return ((PortfolioCompositionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortfolioCompositionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortfolioCompositionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortfolioCompositionRowChanged != null)) {
                    this.PortfolioCompositionRowChanged(this, new PortfolioCompositionRowChangeEvent(((PortfolioCompositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortfolioCompositionRowChanging != null)) {
                    this.PortfolioCompositionRowChanging(this, new PortfolioCompositionRowChangeEvent(((PortfolioCompositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortfolioCompositionRowDeleted != null)) {
                    this.PortfolioCompositionRowDeleted(this, new PortfolioCompositionRowChangeEvent(((PortfolioCompositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortfolioCompositionRowDeleting != null)) {
                    this.PortfolioCompositionRowDeleting(this, new PortfolioCompositionRowChangeEvent(((PortfolioCompositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortfolioCompositionRow(PortfolioCompositionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PerformanceCompositionDS ds = new PerformanceCompositionDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortfolioCompositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ToptenHoldingsDataTable : global::System.Data.TypedTableBase<ToptenHoldingsRow> {
            
            private global::System.Data.DataColumn columnInstrument;
            
            private global::System.Data.DataColumn columnInsType;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnPercentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsDataTable() {
                this.TableName = "ToptenHoldings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToptenHoldingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ToptenHoldingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentColumn {
                get {
                    return this.columnInstrument;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsTypeColumn {
                get {
                    return this.columnInsType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow this[int index] {
                get {
                    return ((ToptenHoldingsRow)(this.Rows[index]));
                }
            }
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowChanging;
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowChanged;
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowDeleting;
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddToptenHoldingsRow(ToptenHoldingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow AddToptenHoldingsRow(string Instrument, string InsType, double Amount, double Percentage) {
                ToptenHoldingsRow rowToptenHoldingsRow = ((ToptenHoldingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Instrument,
                        InsType,
                        Amount,
                        Percentage};
                rowToptenHoldingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowToptenHoldingsRow);
                return rowToptenHoldingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ToptenHoldingsDataTable cln = ((ToptenHoldingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ToptenHoldingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInstrument = base.Columns["Instrument"];
                this.columnInsType = base.Columns["InsType"];
                this.columnAmount = base.Columns["Amount"];
                this.columnPercentage = base.Columns["Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInstrument = new global::System.Data.DataColumn("Instrument", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrument);
                this.columnInsType = new global::System.Data.DataColumn("InsType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsType);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow NewToptenHoldingsRow() {
                return ((ToptenHoldingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ToptenHoldingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ToptenHoldingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ToptenHoldingsRowChanged != null)) {
                    this.ToptenHoldingsRowChanged(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ToptenHoldingsRowChanging != null)) {
                    this.ToptenHoldingsRowChanging(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ToptenHoldingsRowDeleted != null)) {
                    this.ToptenHoldingsRowDeleted(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ToptenHoldingsRowDeleting != null)) {
                    this.ToptenHoldingsRowDeleting(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveToptenHoldingsRow(ToptenHoldingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PerformanceCompositionDS ds = new PerformanceCompositionDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ToptenHoldingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TopTenSectorsDataTable : global::System.Data.TypedTableBase<TopTenSectorsRow> {
            
            private global::System.Data.DataColumn columnSectorCode;
            
            private global::System.Data.DataColumn columnSector;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnPercentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsDataTable() {
                this.TableName = "TopTenSectors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TopTenSectorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TopTenSectorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorCodeColumn {
                get {
                    return this.columnSectorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorColumn {
                get {
                    return this.columnSector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow this[int index] {
                get {
                    return ((TopTenSectorsRow)(this.Rows[index]));
                }
            }
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowChanging;
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowChanged;
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowDeleting;
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTopTenSectorsRow(TopTenSectorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow AddTopTenSectorsRow(string SectorCode, string Sector, double Amount, double Percentage) {
                TopTenSectorsRow rowTopTenSectorsRow = ((TopTenSectorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectorCode,
                        Sector,
                        Amount,
                        Percentage};
                rowTopTenSectorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTopTenSectorsRow);
                return rowTopTenSectorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TopTenSectorsDataTable cln = ((TopTenSectorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TopTenSectorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectorCode = base.Columns["SectorCode"];
                this.columnSector = base.Columns["Sector"];
                this.columnAmount = base.Columns["Amount"];
                this.columnPercentage = base.Columns["Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectorCode = new global::System.Data.DataColumn("SectorCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectorCode);
                this.columnSector = new global::System.Data.DataColumn("Sector", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSector);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow NewTopTenSectorsRow() {
                return ((TopTenSectorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TopTenSectorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TopTenSectorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TopTenSectorsRowChanged != null)) {
                    this.TopTenSectorsRowChanged(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TopTenSectorsRowChanging != null)) {
                    this.TopTenSectorsRowChanging(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TopTenSectorsRowDeleted != null)) {
                    this.TopTenSectorsRowDeleted(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TopTenSectorsRowDeleting != null)) {
                    this.TopTenSectorsRowDeleting(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTopTenSectorsRow(TopTenSectorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PerformanceCompositionDS ds = new PerformanceCompositionDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TopTenSectorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortfolioCompositionRow : global::System.Data.DataRow {
            
            private PortfolioCompositionDataTable tablePortfolioComposition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioCompositionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortfolioComposition = ((PortfolioCompositionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemeCode {
                get {
                    try {
                        return ((int)(this[this.tablePortfolioComposition.SchemeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchemeCode\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.SchemeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchemeName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioComposition.SchemeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchemeName\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.SchemeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentValue {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.CurrentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentValue\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.CurrentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OneMonthReturn {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.OneMonthReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OneMonthReturn\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.OneMonthReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SixMonthReturn {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.SixMonthReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SixMonthReturn\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.SixMonthReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OneYearReturn {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.OneYearReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OneYearReturn\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.OneYearReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ThreeYearReturn {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.ThreeYearReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThreeYearReturn\' in table \'PortfolioComposition\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.ThreeYearReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FiveYearReturn {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.FiveYearReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FiveYearReturn\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.FiveYearReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InceptionReturn {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.InceptionReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InceptionReturn\' in table \'PortfolioComposition\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.InceptionReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CashInPortfolio {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.CashInPortfolioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashInPortfolio\' in table \'PortfolioComposition\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.CashInPortfolioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PE {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.PEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PE\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.PEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PB {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.PBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PB\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.PBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sharpe {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.SharpeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sharpe\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.SharpeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sd {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.SdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sd\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.SdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioComposition.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Top5Holding {
                get {
                    try {
                        return ((double)(this[this.tablePortfolioComposition.Top5HoldingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Top5Holding\' in table \'PortfolioComposition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioComposition.Top5HoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeCodeNull() {
                return this.IsNull(this.tablePortfolioComposition.SchemeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeCodeNull() {
                this[this.tablePortfolioComposition.SchemeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeNameNull() {
                return this.IsNull(this.tablePortfolioComposition.SchemeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeNameNull() {
                this[this.tablePortfolioComposition.SchemeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentValueNull() {
                return this.IsNull(this.tablePortfolioComposition.CurrentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentValueNull() {
                this[this.tablePortfolioComposition.CurrentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneMonthReturnNull() {
                return this.IsNull(this.tablePortfolioComposition.OneMonthReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOneMonthReturnNull() {
                this[this.tablePortfolioComposition.OneMonthReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSixMonthReturnNull() {
                return this.IsNull(this.tablePortfolioComposition.SixMonthReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSixMonthReturnNull() {
                this[this.tablePortfolioComposition.SixMonthReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneYearReturnNull() {
                return this.IsNull(this.tablePortfolioComposition.OneYearReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOneYearReturnNull() {
                this[this.tablePortfolioComposition.OneYearReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThreeYearReturnNull() {
                return this.IsNull(this.tablePortfolioComposition.ThreeYearReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThreeYearReturnNull() {
                this[this.tablePortfolioComposition.ThreeYearReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiveYearReturnNull() {
                return this.IsNull(this.tablePortfolioComposition.FiveYearReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiveYearReturnNull() {
                this[this.tablePortfolioComposition.FiveYearReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInceptionReturnNull() {
                return this.IsNull(this.tablePortfolioComposition.InceptionReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInceptionReturnNull() {
                this[this.tablePortfolioComposition.InceptionReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashInPortfolioNull() {
                return this.IsNull(this.tablePortfolioComposition.CashInPortfolioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashInPortfolioNull() {
                this[this.tablePortfolioComposition.CashInPortfolioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPENull() {
                return this.IsNull(this.tablePortfolioComposition.PEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPENull() {
                this[this.tablePortfolioComposition.PEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPBNull() {
                return this.IsNull(this.tablePortfolioComposition.PBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPBNull() {
                this[this.tablePortfolioComposition.PBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSharpeNull() {
                return this.IsNull(this.tablePortfolioComposition.SharpeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSharpeNull() {
                this[this.tablePortfolioComposition.SharpeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSdNull() {
                return this.IsNull(this.tablePortfolioComposition.SdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSdNull() {
                this[this.tablePortfolioComposition.SdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tablePortfolioComposition.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tablePortfolioComposition.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTop5HoldingNull() {
                return this.IsNull(this.tablePortfolioComposition.Top5HoldingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTop5HoldingNull() {
                this[this.tablePortfolioComposition.Top5HoldingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ToptenHoldingsRow : global::System.Data.DataRow {
            
            private ToptenHoldingsDataTable tableToptenHoldings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToptenHoldingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableToptenHoldings = ((ToptenHoldingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instrument {
                get {
                    try {
                        return ((string)(this[this.tableToptenHoldings.InstrumentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instrument\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.InstrumentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsType {
                get {
                    try {
                        return ((string)(this[this.tableToptenHoldings.InsTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsType\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.InsTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount {
                get {
                    try {
                        return ((double)(this[this.tableToptenHoldings.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Percentage {
                get {
                    try {
                        return ((double)(this[this.tableToptenHoldings.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentNull() {
                return this.IsNull(this.tableToptenHoldings.InstrumentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentNull() {
                this[this.tableToptenHoldings.InstrumentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsTypeNull() {
                return this.IsNull(this.tableToptenHoldings.InsTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsTypeNull() {
                this[this.tableToptenHoldings.InsTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableToptenHoldings.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableToptenHoldings.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableToptenHoldings.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableToptenHoldings.PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TopTenSectorsRow : global::System.Data.DataRow {
            
            private TopTenSectorsDataTable tableTopTenSectors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TopTenSectorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTopTenSectors = ((TopTenSectorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectorCode {
                get {
                    try {
                        return ((string)(this[this.tableTopTenSectors.SectorCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectorCode\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.SectorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sector {
                get {
                    try {
                        return ((string)(this[this.tableTopTenSectors.SectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sector\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.SectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount {
                get {
                    try {
                        return ((double)(this[this.tableTopTenSectors.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Percentage {
                get {
                    try {
                        return ((double)(this[this.tableTopTenSectors.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorCodeNull() {
                return this.IsNull(this.tableTopTenSectors.SectorCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorCodeNull() {
                this[this.tableTopTenSectors.SectorCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorNull() {
                return this.IsNull(this.tableTopTenSectors.SectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorNull() {
                this[this.tableTopTenSectors.SectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableTopTenSectors.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableTopTenSectors.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableTopTenSectors.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableTopTenSectors.PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortfolioCompositionRowChangeEvent : global::System.EventArgs {
            
            private PortfolioCompositionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioCompositionRowChangeEvent(PortfolioCompositionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioCompositionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ToptenHoldingsRowChangeEvent : global::System.EventArgs {
            
            private ToptenHoldingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRowChangeEvent(ToptenHoldingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TopTenSectorsRowChangeEvent : global::System.EventArgs {
            
            private TopTenSectorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRowChangeEvent(TopTenSectorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591