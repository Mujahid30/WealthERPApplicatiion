//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FPSectionalReportDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FPSectionalReportDS : global::System.Data.DataSet {
        
        private ImageSectionDataTable tableImageSection;
        
        private CustomerFamilyDetailsDataTable tableCustomerFamilyDetails;
        
        private WerpAssumptionsDataTable tableWerpAssumptions;
        
        private OtherGoalDataTable tableOtherGoal;
        
        private RTGoalDataTable tableRTGoal;
        
        private IncomeDataTable tableIncome;
        
        private ExpenseDataTable tableExpense;
        
        private CashFlowsDataTable tableCashFlows;
        
        private NetWorthDataTable tableNetWorth;
        
        private LiabilitiesDataTable tableLiabilities;
        
        private AssetAllocationDataTable tableAssetAllocation;
        
        private InsuranceDataTable tableInsurance;
        
        private GEInsuranceDataTable tableGEInsurance;
        
        private HLVAnalysisDataTable tableHLVAnalysis;
        
        private HLVBasedIncomeDataTable tableHLVBasedIncome;
        
        private ObservationDataTable tableObservation;
        
        private FinancialHealthDataTable tableFinancialHealth;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FPSectionalReportDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FPSectionalReportDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ImageSection"] != null)) {
                    base.Tables.Add(new ImageSectionDataTable(ds.Tables["ImageSection"]));
                }
                if ((ds.Tables["CustomerFamilyDetails"] != null)) {
                    base.Tables.Add(new CustomerFamilyDetailsDataTable(ds.Tables["CustomerFamilyDetails"]));
                }
                if ((ds.Tables["WerpAssumptions"] != null)) {
                    base.Tables.Add(new WerpAssumptionsDataTable(ds.Tables["WerpAssumptions"]));
                }
                if ((ds.Tables["OtherGoal"] != null)) {
                    base.Tables.Add(new OtherGoalDataTable(ds.Tables["OtherGoal"]));
                }
                if ((ds.Tables["RTGoal"] != null)) {
                    base.Tables.Add(new RTGoalDataTable(ds.Tables["RTGoal"]));
                }
                if ((ds.Tables["Income"] != null)) {
                    base.Tables.Add(new IncomeDataTable(ds.Tables["Income"]));
                }
                if ((ds.Tables["Expense"] != null)) {
                    base.Tables.Add(new ExpenseDataTable(ds.Tables["Expense"]));
                }
                if ((ds.Tables["CashFlows"] != null)) {
                    base.Tables.Add(new CashFlowsDataTable(ds.Tables["CashFlows"]));
                }
                if ((ds.Tables["NetWorth"] != null)) {
                    base.Tables.Add(new NetWorthDataTable(ds.Tables["NetWorth"]));
                }
                if ((ds.Tables["Liabilities"] != null)) {
                    base.Tables.Add(new LiabilitiesDataTable(ds.Tables["Liabilities"]));
                }
                if ((ds.Tables["AssetAllocation"] != null)) {
                    base.Tables.Add(new AssetAllocationDataTable(ds.Tables["AssetAllocation"]));
                }
                if ((ds.Tables["Insurance"] != null)) {
                    base.Tables.Add(new InsuranceDataTable(ds.Tables["Insurance"]));
                }
                if ((ds.Tables["GEInsurance"] != null)) {
                    base.Tables.Add(new GEInsuranceDataTable(ds.Tables["GEInsurance"]));
                }
                if ((ds.Tables["HLVAnalysis"] != null)) {
                    base.Tables.Add(new HLVAnalysisDataTable(ds.Tables["HLVAnalysis"]));
                }
                if ((ds.Tables["HLVBasedIncome"] != null)) {
                    base.Tables.Add(new HLVBasedIncomeDataTable(ds.Tables["HLVBasedIncome"]));
                }
                if ((ds.Tables["Observation"] != null)) {
                    base.Tables.Add(new ObservationDataTable(ds.Tables["Observation"]));
                }
                if ((ds.Tables["FinancialHealth"] != null)) {
                    base.Tables.Add(new FinancialHealthDataTable(ds.Tables["FinancialHealth"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImageSectionDataTable ImageSection {
            get {
                return this.tableImageSection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerFamilyDetailsDataTable CustomerFamilyDetails {
            get {
                return this.tableCustomerFamilyDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WerpAssumptionsDataTable WerpAssumptions {
            get {
                return this.tableWerpAssumptions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherGoalDataTable OtherGoal {
            get {
                return this.tableOtherGoal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RTGoalDataTable RTGoal {
            get {
                return this.tableRTGoal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IncomeDataTable Income {
            get {
                return this.tableIncome;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExpenseDataTable Expense {
            get {
                return this.tableExpense;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CashFlowsDataTable CashFlows {
            get {
                return this.tableCashFlows;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NetWorthDataTable NetWorth {
            get {
                return this.tableNetWorth;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LiabilitiesDataTable Liabilities {
            get {
                return this.tableLiabilities;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetAllocationDataTable AssetAllocation {
            get {
                return this.tableAssetAllocation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InsuranceDataTable Insurance {
            get {
                return this.tableInsurance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEInsuranceDataTable GEInsurance {
            get {
                return this.tableGEInsurance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HLVAnalysisDataTable HLVAnalysis {
            get {
                return this.tableHLVAnalysis;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HLVBasedIncomeDataTable HLVBasedIncome {
            get {
                return this.tableHLVBasedIncome;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ObservationDataTable Observation {
            get {
                return this.tableObservation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FinancialHealthDataTable FinancialHealth {
            get {
                return this.tableFinancialHealth;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FPSectionalReportDS cln = ((FPSectionalReportDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ImageSection"] != null)) {
                    base.Tables.Add(new ImageSectionDataTable(ds.Tables["ImageSection"]));
                }
                if ((ds.Tables["CustomerFamilyDetails"] != null)) {
                    base.Tables.Add(new CustomerFamilyDetailsDataTable(ds.Tables["CustomerFamilyDetails"]));
                }
                if ((ds.Tables["WerpAssumptions"] != null)) {
                    base.Tables.Add(new WerpAssumptionsDataTable(ds.Tables["WerpAssumptions"]));
                }
                if ((ds.Tables["OtherGoal"] != null)) {
                    base.Tables.Add(new OtherGoalDataTable(ds.Tables["OtherGoal"]));
                }
                if ((ds.Tables["RTGoal"] != null)) {
                    base.Tables.Add(new RTGoalDataTable(ds.Tables["RTGoal"]));
                }
                if ((ds.Tables["Income"] != null)) {
                    base.Tables.Add(new IncomeDataTable(ds.Tables["Income"]));
                }
                if ((ds.Tables["Expense"] != null)) {
                    base.Tables.Add(new ExpenseDataTable(ds.Tables["Expense"]));
                }
                if ((ds.Tables["CashFlows"] != null)) {
                    base.Tables.Add(new CashFlowsDataTable(ds.Tables["CashFlows"]));
                }
                if ((ds.Tables["NetWorth"] != null)) {
                    base.Tables.Add(new NetWorthDataTable(ds.Tables["NetWorth"]));
                }
                if ((ds.Tables["Liabilities"] != null)) {
                    base.Tables.Add(new LiabilitiesDataTable(ds.Tables["Liabilities"]));
                }
                if ((ds.Tables["AssetAllocation"] != null)) {
                    base.Tables.Add(new AssetAllocationDataTable(ds.Tables["AssetAllocation"]));
                }
                if ((ds.Tables["Insurance"] != null)) {
                    base.Tables.Add(new InsuranceDataTable(ds.Tables["Insurance"]));
                }
                if ((ds.Tables["GEInsurance"] != null)) {
                    base.Tables.Add(new GEInsuranceDataTable(ds.Tables["GEInsurance"]));
                }
                if ((ds.Tables["HLVAnalysis"] != null)) {
                    base.Tables.Add(new HLVAnalysisDataTable(ds.Tables["HLVAnalysis"]));
                }
                if ((ds.Tables["HLVBasedIncome"] != null)) {
                    base.Tables.Add(new HLVBasedIncomeDataTable(ds.Tables["HLVBasedIncome"]));
                }
                if ((ds.Tables["Observation"] != null)) {
                    base.Tables.Add(new ObservationDataTable(ds.Tables["Observation"]));
                }
                if ((ds.Tables["FinancialHealth"] != null)) {
                    base.Tables.Add(new FinancialHealthDataTable(ds.Tables["FinancialHealth"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableImageSection = ((ImageSectionDataTable)(base.Tables["ImageSection"]));
            if ((initTable == true)) {
                if ((this.tableImageSection != null)) {
                    this.tableImageSection.InitVars();
                }
            }
            this.tableCustomerFamilyDetails = ((CustomerFamilyDetailsDataTable)(base.Tables["CustomerFamilyDetails"]));
            if ((initTable == true)) {
                if ((this.tableCustomerFamilyDetails != null)) {
                    this.tableCustomerFamilyDetails.InitVars();
                }
            }
            this.tableWerpAssumptions = ((WerpAssumptionsDataTable)(base.Tables["WerpAssumptions"]));
            if ((initTable == true)) {
                if ((this.tableWerpAssumptions != null)) {
                    this.tableWerpAssumptions.InitVars();
                }
            }
            this.tableOtherGoal = ((OtherGoalDataTable)(base.Tables["OtherGoal"]));
            if ((initTable == true)) {
                if ((this.tableOtherGoal != null)) {
                    this.tableOtherGoal.InitVars();
                }
            }
            this.tableRTGoal = ((RTGoalDataTable)(base.Tables["RTGoal"]));
            if ((initTable == true)) {
                if ((this.tableRTGoal != null)) {
                    this.tableRTGoal.InitVars();
                }
            }
            this.tableIncome = ((IncomeDataTable)(base.Tables["Income"]));
            if ((initTable == true)) {
                if ((this.tableIncome != null)) {
                    this.tableIncome.InitVars();
                }
            }
            this.tableExpense = ((ExpenseDataTable)(base.Tables["Expense"]));
            if ((initTable == true)) {
                if ((this.tableExpense != null)) {
                    this.tableExpense.InitVars();
                }
            }
            this.tableCashFlows = ((CashFlowsDataTable)(base.Tables["CashFlows"]));
            if ((initTable == true)) {
                if ((this.tableCashFlows != null)) {
                    this.tableCashFlows.InitVars();
                }
            }
            this.tableNetWorth = ((NetWorthDataTable)(base.Tables["NetWorth"]));
            if ((initTable == true)) {
                if ((this.tableNetWorth != null)) {
                    this.tableNetWorth.InitVars();
                }
            }
            this.tableLiabilities = ((LiabilitiesDataTable)(base.Tables["Liabilities"]));
            if ((initTable == true)) {
                if ((this.tableLiabilities != null)) {
                    this.tableLiabilities.InitVars();
                }
            }
            this.tableAssetAllocation = ((AssetAllocationDataTable)(base.Tables["AssetAllocation"]));
            if ((initTable == true)) {
                if ((this.tableAssetAllocation != null)) {
                    this.tableAssetAllocation.InitVars();
                }
            }
            this.tableInsurance = ((InsuranceDataTable)(base.Tables["Insurance"]));
            if ((initTable == true)) {
                if ((this.tableInsurance != null)) {
                    this.tableInsurance.InitVars();
                }
            }
            this.tableGEInsurance = ((GEInsuranceDataTable)(base.Tables["GEInsurance"]));
            if ((initTable == true)) {
                if ((this.tableGEInsurance != null)) {
                    this.tableGEInsurance.InitVars();
                }
            }
            this.tableHLVAnalysis = ((HLVAnalysisDataTable)(base.Tables["HLVAnalysis"]));
            if ((initTable == true)) {
                if ((this.tableHLVAnalysis != null)) {
                    this.tableHLVAnalysis.InitVars();
                }
            }
            this.tableHLVBasedIncome = ((HLVBasedIncomeDataTable)(base.Tables["HLVBasedIncome"]));
            if ((initTable == true)) {
                if ((this.tableHLVBasedIncome != null)) {
                    this.tableHLVBasedIncome.InitVars();
                }
            }
            this.tableObservation = ((ObservationDataTable)(base.Tables["Observation"]));
            if ((initTable == true)) {
                if ((this.tableObservation != null)) {
                    this.tableObservation.InitVars();
                }
            }
            this.tableFinancialHealth = ((FinancialHealthDataTable)(base.Tables["FinancialHealth"]));
            if ((initTable == true)) {
                if ((this.tableFinancialHealth != null)) {
                    this.tableFinancialHealth.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FPSectionalReportDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FPSectionalReportDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableImageSection = new ImageSectionDataTable();
            base.Tables.Add(this.tableImageSection);
            this.tableCustomerFamilyDetails = new CustomerFamilyDetailsDataTable();
            base.Tables.Add(this.tableCustomerFamilyDetails);
            this.tableWerpAssumptions = new WerpAssumptionsDataTable();
            base.Tables.Add(this.tableWerpAssumptions);
            this.tableOtherGoal = new OtherGoalDataTable();
            base.Tables.Add(this.tableOtherGoal);
            this.tableRTGoal = new RTGoalDataTable();
            base.Tables.Add(this.tableRTGoal);
            this.tableIncome = new IncomeDataTable();
            base.Tables.Add(this.tableIncome);
            this.tableExpense = new ExpenseDataTable();
            base.Tables.Add(this.tableExpense);
            this.tableCashFlows = new CashFlowsDataTable();
            base.Tables.Add(this.tableCashFlows);
            this.tableNetWorth = new NetWorthDataTable();
            base.Tables.Add(this.tableNetWorth);
            this.tableLiabilities = new LiabilitiesDataTable();
            base.Tables.Add(this.tableLiabilities);
            this.tableAssetAllocation = new AssetAllocationDataTable();
            base.Tables.Add(this.tableAssetAllocation);
            this.tableInsurance = new InsuranceDataTable();
            base.Tables.Add(this.tableInsurance);
            this.tableGEInsurance = new GEInsuranceDataTable();
            base.Tables.Add(this.tableGEInsurance);
            this.tableHLVAnalysis = new HLVAnalysisDataTable();
            base.Tables.Add(this.tableHLVAnalysis);
            this.tableHLVBasedIncome = new HLVBasedIncomeDataTable();
            base.Tables.Add(this.tableHLVBasedIncome);
            this.tableObservation = new ObservationDataTable();
            base.Tables.Add(this.tableObservation);
            this.tableFinancialHealth = new FinancialHealthDataTable();
            base.Tables.Add(this.tableFinancialHealth);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImageSection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerFamilyDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWerpAssumptions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherGoal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRTGoal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIncome() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExpense() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCashFlows() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNetWorth() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLiabilities() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAssetAllocation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInsurance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGEInsurance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHLVAnalysis() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHLVBasedIncome() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeObservation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFinancialHealth() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FPSectionalReportDS ds = new FPSectionalReportDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ImageSectionRowChangeEventHandler(object sender, ImageSectionRowChangeEvent e);
        
        public delegate void CustomerFamilyDetailsRowChangeEventHandler(object sender, CustomerFamilyDetailsRowChangeEvent e);
        
        public delegate void WerpAssumptionsRowChangeEventHandler(object sender, WerpAssumptionsRowChangeEvent e);
        
        public delegate void OtherGoalRowChangeEventHandler(object sender, OtherGoalRowChangeEvent e);
        
        public delegate void RTGoalRowChangeEventHandler(object sender, RTGoalRowChangeEvent e);
        
        public delegate void IncomeRowChangeEventHandler(object sender, IncomeRowChangeEvent e);
        
        public delegate void ExpenseRowChangeEventHandler(object sender, ExpenseRowChangeEvent e);
        
        public delegate void CashFlowsRowChangeEventHandler(object sender, CashFlowsRowChangeEvent e);
        
        public delegate void NetWorthRowChangeEventHandler(object sender, NetWorthRowChangeEvent e);
        
        public delegate void LiabilitiesRowChangeEventHandler(object sender, LiabilitiesRowChangeEvent e);
        
        public delegate void AssetAllocationRowChangeEventHandler(object sender, AssetAllocationRowChangeEvent e);
        
        public delegate void InsuranceRowChangeEventHandler(object sender, InsuranceRowChangeEvent e);
        
        public delegate void GEInsuranceRowChangeEventHandler(object sender, GEInsuranceRowChangeEvent e);
        
        public delegate void HLVAnalysisRowChangeEventHandler(object sender, HLVAnalysisRowChangeEvent e);
        
        public delegate void HLVBasedIncomeRowChangeEventHandler(object sender, HLVBasedIncomeRowChangeEvent e);
        
        public delegate void ObservationRowChangeEventHandler(object sender, ObservationRowChangeEvent e);
        
        public delegate void FinancialHealthRowChangeEventHandler(object sender, FinancialHealthRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImageSectionDataTable : global::System.Data.TypedTableBase<ImageSectionRow> {
            
            private global::System.Data.DataColumn columnSectionImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageSectionDataTable() {
                this.TableName = "ImageSection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImageSectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImageSectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionImageColumn {
                get {
                    return this.columnSectionImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageSectionRow this[int index] {
                get {
                    return ((ImageSectionRow)(this.Rows[index]));
                }
            }
            
            public event ImageSectionRowChangeEventHandler ImageSectionRowChanging;
            
            public event ImageSectionRowChangeEventHandler ImageSectionRowChanged;
            
            public event ImageSectionRowChangeEventHandler ImageSectionRowDeleting;
            
            public event ImageSectionRowChangeEventHandler ImageSectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImageSectionRow(ImageSectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageSectionRow AddImageSectionRow(byte[] SectionImage) {
                ImageSectionRow rowImageSectionRow = ((ImageSectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionImage};
                rowImageSectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowImageSectionRow);
                return rowImageSectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ImageSectionDataTable cln = ((ImageSectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ImageSectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionImage = base.Columns["SectionImage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionImage = new global::System.Data.DataColumn("SectionImage", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionImage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageSectionRow NewImageSectionRow() {
                return ((ImageSectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ImageSectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ImageSectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImageSectionRowChanged != null)) {
                    this.ImageSectionRowChanged(this, new ImageSectionRowChangeEvent(((ImageSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImageSectionRowChanging != null)) {
                    this.ImageSectionRowChanging(this, new ImageSectionRowChangeEvent(((ImageSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImageSectionRowDeleted != null)) {
                    this.ImageSectionRowDeleted(this, new ImageSectionRowChangeEvent(((ImageSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImageSectionRowDeleting != null)) {
                    this.ImageSectionRowDeleting(this, new ImageSectionRowChangeEvent(((ImageSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImageSectionRow(ImageSectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImageSectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerFamilyDetailsDataTable : global::System.Data.TypedTableBase<CustomerFamilyDetailsRow> {
            
            private global::System.Data.DataColumn columnRelationShipCode;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDOB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerFamilyDetailsDataTable() {
                this.TableName = "CustomerFamilyDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerFamilyDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerFamilyDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationShipCodeColumn {
                get {
                    return this.columnRelationShipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerFamilyDetailsRow this[int index] {
                get {
                    return ((CustomerFamilyDetailsRow)(this.Rows[index]));
                }
            }
            
            public event CustomerFamilyDetailsRowChangeEventHandler CustomerFamilyDetailsRowChanging;
            
            public event CustomerFamilyDetailsRowChangeEventHandler CustomerFamilyDetailsRowChanged;
            
            public event CustomerFamilyDetailsRowChangeEventHandler CustomerFamilyDetailsRowDeleting;
            
            public event CustomerFamilyDetailsRowChangeEventHandler CustomerFamilyDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerFamilyDetailsRow(CustomerFamilyDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerFamilyDetailsRow AddCustomerFamilyDetailsRow(string RelationShipCode, string Name, System.DateTime DOB) {
                CustomerFamilyDetailsRow rowCustomerFamilyDetailsRow = ((CustomerFamilyDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RelationShipCode,
                        Name,
                        DOB};
                rowCustomerFamilyDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerFamilyDetailsRow);
                return rowCustomerFamilyDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerFamilyDetailsDataTable cln = ((CustomerFamilyDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerFamilyDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRelationShipCode = base.Columns["RelationShipCode"];
                this.columnName = base.Columns["Name"];
                this.columnDOB = base.Columns["DOB"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRelationShipCode = new global::System.Data.DataColumn("RelationShipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationShipCode);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerFamilyDetailsRow NewCustomerFamilyDetailsRow() {
                return ((CustomerFamilyDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerFamilyDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerFamilyDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerFamilyDetailsRowChanged != null)) {
                    this.CustomerFamilyDetailsRowChanged(this, new CustomerFamilyDetailsRowChangeEvent(((CustomerFamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerFamilyDetailsRowChanging != null)) {
                    this.CustomerFamilyDetailsRowChanging(this, new CustomerFamilyDetailsRowChangeEvent(((CustomerFamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerFamilyDetailsRowDeleted != null)) {
                    this.CustomerFamilyDetailsRowDeleted(this, new CustomerFamilyDetailsRowChangeEvent(((CustomerFamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerFamilyDetailsRowDeleting != null)) {
                    this.CustomerFamilyDetailsRowDeleting(this, new CustomerFamilyDetailsRowChangeEvent(((CustomerFamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerFamilyDetailsRow(CustomerFamilyDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerFamilyDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WerpAssumptionsDataTable : global::System.Data.TypedTableBase<WerpAssumptionsRow> {
            
            private global::System.Data.DataColumn columnAssumptionName;
            
            private global::System.Data.DataColumn columnAssumptionValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WerpAssumptionsDataTable() {
                this.TableName = "WerpAssumptions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WerpAssumptionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WerpAssumptionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssumptionNameColumn {
                get {
                    return this.columnAssumptionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssumptionValueColumn {
                get {
                    return this.columnAssumptionValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WerpAssumptionsRow this[int index] {
                get {
                    return ((WerpAssumptionsRow)(this.Rows[index]));
                }
            }
            
            public event WerpAssumptionsRowChangeEventHandler WerpAssumptionsRowChanging;
            
            public event WerpAssumptionsRowChangeEventHandler WerpAssumptionsRowChanged;
            
            public event WerpAssumptionsRowChangeEventHandler WerpAssumptionsRowDeleting;
            
            public event WerpAssumptionsRowChangeEventHandler WerpAssumptionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWerpAssumptionsRow(WerpAssumptionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WerpAssumptionsRow AddWerpAssumptionsRow(string AssumptionName, string AssumptionValue) {
                WerpAssumptionsRow rowWerpAssumptionsRow = ((WerpAssumptionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssumptionName,
                        AssumptionValue};
                rowWerpAssumptionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWerpAssumptionsRow);
                return rowWerpAssumptionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WerpAssumptionsDataTable cln = ((WerpAssumptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WerpAssumptionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssumptionName = base.Columns["AssumptionName"];
                this.columnAssumptionValue = base.Columns["AssumptionValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssumptionName = new global::System.Data.DataColumn("AssumptionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssumptionName);
                this.columnAssumptionValue = new global::System.Data.DataColumn("AssumptionValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssumptionValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WerpAssumptionsRow NewWerpAssumptionsRow() {
                return ((WerpAssumptionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WerpAssumptionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WerpAssumptionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WerpAssumptionsRowChanged != null)) {
                    this.WerpAssumptionsRowChanged(this, new WerpAssumptionsRowChangeEvent(((WerpAssumptionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WerpAssumptionsRowChanging != null)) {
                    this.WerpAssumptionsRowChanging(this, new WerpAssumptionsRowChangeEvent(((WerpAssumptionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WerpAssumptionsRowDeleted != null)) {
                    this.WerpAssumptionsRowDeleted(this, new WerpAssumptionsRowChangeEvent(((WerpAssumptionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WerpAssumptionsRowDeleting != null)) {
                    this.WerpAssumptionsRowDeleting(this, new WerpAssumptionsRowChangeEvent(((WerpAssumptionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWerpAssumptionsRow(WerpAssumptionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WerpAssumptionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherGoalDataTable : global::System.Data.TypedTableBase<OtherGoalRow> {
            
            private global::System.Data.DataColumn columnGoalName;
            
            private global::System.Data.DataColumn columnChildName;
            
            private global::System.Data.DataColumn columnCostToday;
            
            private global::System.Data.DataColumn columnGoalYear;
            
            private global::System.Data.DataColumn columnGoalAmount;
            
            private global::System.Data.DataColumn columnMonthlySavingsRequired;
            
            private global::System.Data.DataColumn columnYearlySavingsRequired;
            
            private global::System.Data.DataColumn columnInflationPercentage;
            
            private global::System.Data.DataColumn columnExpectedROI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherGoalDataTable() {
                this.TableName = "OtherGoal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherGoalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherGoalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalNameColumn {
                get {
                    return this.columnGoalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildNameColumn {
                get {
                    return this.columnChildName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostTodayColumn {
                get {
                    return this.columnCostToday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalYearColumn {
                get {
                    return this.columnGoalYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalAmountColumn {
                get {
                    return this.columnGoalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthlySavingsRequiredColumn {
                get {
                    return this.columnMonthlySavingsRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearlySavingsRequiredColumn {
                get {
                    return this.columnYearlySavingsRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflationPercentageColumn {
                get {
                    return this.columnInflationPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedROIColumn {
                get {
                    return this.columnExpectedROI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherGoalRow this[int index] {
                get {
                    return ((OtherGoalRow)(this.Rows[index]));
                }
            }
            
            public event OtherGoalRowChangeEventHandler OtherGoalRowChanging;
            
            public event OtherGoalRowChangeEventHandler OtherGoalRowChanged;
            
            public event OtherGoalRowChangeEventHandler OtherGoalRowDeleting;
            
            public event OtherGoalRowChangeEventHandler OtherGoalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherGoalRow(OtherGoalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherGoalRow AddOtherGoalRow(string GoalName, string ChildName, decimal CostToday, int GoalYear, decimal GoalAmount, decimal MonthlySavingsRequired, decimal YearlySavingsRequired, decimal InflationPercentage, string ExpectedROI) {
                OtherGoalRow rowOtherGoalRow = ((OtherGoalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GoalName,
                        ChildName,
                        CostToday,
                        GoalYear,
                        GoalAmount,
                        MonthlySavingsRequired,
                        YearlySavingsRequired,
                        InflationPercentage,
                        ExpectedROI};
                rowOtherGoalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherGoalRow);
                return rowOtherGoalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherGoalDataTable cln = ((OtherGoalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherGoalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGoalName = base.Columns["GoalName"];
                this.columnChildName = base.Columns["ChildName"];
                this.columnCostToday = base.Columns["CostToday"];
                this.columnGoalYear = base.Columns["GoalYear"];
                this.columnGoalAmount = base.Columns["GoalAmount"];
                this.columnMonthlySavingsRequired = base.Columns["MonthlySavingsRequired"];
                this.columnYearlySavingsRequired = base.Columns["YearlySavingsRequired"];
                this.columnInflationPercentage = base.Columns["InflationPercentage"];
                this.columnExpectedROI = base.Columns["ExpectedROI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGoalName = new global::System.Data.DataColumn("GoalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalName);
                this.columnChildName = new global::System.Data.DataColumn("ChildName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildName);
                this.columnCostToday = new global::System.Data.DataColumn("CostToday", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToday);
                this.columnGoalYear = new global::System.Data.DataColumn("GoalYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalYear);
                this.columnGoalAmount = new global::System.Data.DataColumn("GoalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalAmount);
                this.columnMonthlySavingsRequired = new global::System.Data.DataColumn("MonthlySavingsRequired", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthlySavingsRequired);
                this.columnYearlySavingsRequired = new global::System.Data.DataColumn("YearlySavingsRequired", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearlySavingsRequired);
                this.columnInflationPercentage = new global::System.Data.DataColumn("InflationPercentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflationPercentage);
                this.columnExpectedROI = new global::System.Data.DataColumn("ExpectedROI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedROI);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherGoalRow NewOtherGoalRow() {
                return ((OtherGoalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherGoalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherGoalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherGoalRowChanged != null)) {
                    this.OtherGoalRowChanged(this, new OtherGoalRowChangeEvent(((OtherGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherGoalRowChanging != null)) {
                    this.OtherGoalRowChanging(this, new OtherGoalRowChangeEvent(((OtherGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherGoalRowDeleted != null)) {
                    this.OtherGoalRowDeleted(this, new OtherGoalRowChangeEvent(((OtherGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherGoalRowDeleting != null)) {
                    this.OtherGoalRowDeleting(this, new OtherGoalRowChangeEvent(((OtherGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherGoalRow(OtherGoalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherGoalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RTGoalDataTable : global::System.Data.TypedTableBase<RTGoalRow> {
            
            private global::System.Data.DataColumn columnGoalName;
            
            private global::System.Data.DataColumn columnGoalYear;
            
            private global::System.Data.DataColumn columnCostToday;
            
            private global::System.Data.DataColumn columnFVofCostToday;
            
            private global::System.Data.DataColumn columnCurrentInvestment;
            
            private global::System.Data.DataColumn columnROIEarnedOnCurrInvest;
            
            private global::System.Data.DataColumn columnMonthlySavingsRequired;
            
            private global::System.Data.DataColumn columnYearlySavingsRequired;
            
            private global::System.Data.DataColumn columnLumpsumInvestmentRequired;
            
            private global::System.Data.DataColumn columnFutureValueOnCurrentInvest;
            
            private global::System.Data.DataColumn columnGapValues;
            
            private global::System.Data.DataColumn columnInflationPercentage;
            
            private global::System.Data.DataColumn columnExpectedROI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTGoalDataTable() {
                this.TableName = "RTGoal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RTGoalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RTGoalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalNameColumn {
                get {
                    return this.columnGoalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalYearColumn {
                get {
                    return this.columnGoalYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostTodayColumn {
                get {
                    return this.columnCostToday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FVofCostTodayColumn {
                get {
                    return this.columnFVofCostToday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentInvestmentColumn {
                get {
                    return this.columnCurrentInvestment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROIEarnedOnCurrInvestColumn {
                get {
                    return this.columnROIEarnedOnCurrInvest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthlySavingsRequiredColumn {
                get {
                    return this.columnMonthlySavingsRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearlySavingsRequiredColumn {
                get {
                    return this.columnYearlySavingsRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LumpsumInvestmentRequiredColumn {
                get {
                    return this.columnLumpsumInvestmentRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FutureValueOnCurrentInvestColumn {
                get {
                    return this.columnFutureValueOnCurrentInvest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GapValuesColumn {
                get {
                    return this.columnGapValues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflationPercentageColumn {
                get {
                    return this.columnInflationPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedROIColumn {
                get {
                    return this.columnExpectedROI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTGoalRow this[int index] {
                get {
                    return ((RTGoalRow)(this.Rows[index]));
                }
            }
            
            public event RTGoalRowChangeEventHandler RTGoalRowChanging;
            
            public event RTGoalRowChangeEventHandler RTGoalRowChanged;
            
            public event RTGoalRowChangeEventHandler RTGoalRowDeleting;
            
            public event RTGoalRowChangeEventHandler RTGoalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRTGoalRow(RTGoalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTGoalRow AddRTGoalRow(string GoalName, int GoalYear, decimal CostToday, decimal FVofCostToday, decimal CurrentInvestment, decimal ROIEarnedOnCurrInvest, decimal MonthlySavingsRequired, decimal YearlySavingsRequired, decimal LumpsumInvestmentRequired, decimal FutureValueOnCurrentInvest, decimal GapValues, string InflationPercentage, string ExpectedROI) {
                RTGoalRow rowRTGoalRow = ((RTGoalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GoalName,
                        GoalYear,
                        CostToday,
                        FVofCostToday,
                        CurrentInvestment,
                        ROIEarnedOnCurrInvest,
                        MonthlySavingsRequired,
                        YearlySavingsRequired,
                        LumpsumInvestmentRequired,
                        FutureValueOnCurrentInvest,
                        GapValues,
                        InflationPercentage,
                        ExpectedROI};
                rowRTGoalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRTGoalRow);
                return rowRTGoalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RTGoalDataTable cln = ((RTGoalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RTGoalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGoalName = base.Columns["GoalName"];
                this.columnGoalYear = base.Columns["GoalYear"];
                this.columnCostToday = base.Columns["CostToday"];
                this.columnFVofCostToday = base.Columns["FVofCostToday"];
                this.columnCurrentInvestment = base.Columns["CurrentInvestment"];
                this.columnROIEarnedOnCurrInvest = base.Columns["ROIEarnedOnCurrInvest"];
                this.columnMonthlySavingsRequired = base.Columns["MonthlySavingsRequired"];
                this.columnYearlySavingsRequired = base.Columns["YearlySavingsRequired"];
                this.columnLumpsumInvestmentRequired = base.Columns["LumpsumInvestmentRequired"];
                this.columnFutureValueOnCurrentInvest = base.Columns["FutureValueOnCurrentInvest"];
                this.columnGapValues = base.Columns["GapValues"];
                this.columnInflationPercentage = base.Columns["InflationPercentage"];
                this.columnExpectedROI = base.Columns["ExpectedROI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGoalName = new global::System.Data.DataColumn("GoalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalName);
                this.columnGoalYear = new global::System.Data.DataColumn("GoalYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalYear);
                this.columnCostToday = new global::System.Data.DataColumn("CostToday", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToday);
                this.columnFVofCostToday = new global::System.Data.DataColumn("FVofCostToday", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFVofCostToday);
                this.columnCurrentInvestment = new global::System.Data.DataColumn("CurrentInvestment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentInvestment);
                this.columnROIEarnedOnCurrInvest = new global::System.Data.DataColumn("ROIEarnedOnCurrInvest", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROIEarnedOnCurrInvest);
                this.columnMonthlySavingsRequired = new global::System.Data.DataColumn("MonthlySavingsRequired", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthlySavingsRequired);
                this.columnYearlySavingsRequired = new global::System.Data.DataColumn("YearlySavingsRequired", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearlySavingsRequired);
                this.columnLumpsumInvestmentRequired = new global::System.Data.DataColumn("LumpsumInvestmentRequired", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLumpsumInvestmentRequired);
                this.columnFutureValueOnCurrentInvest = new global::System.Data.DataColumn("FutureValueOnCurrentInvest", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFutureValueOnCurrentInvest);
                this.columnGapValues = new global::System.Data.DataColumn("GapValues", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGapValues);
                this.columnInflationPercentage = new global::System.Data.DataColumn("InflationPercentage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflationPercentage);
                this.columnExpectedROI = new global::System.Data.DataColumn("ExpectedROI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedROI);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTGoalRow NewRTGoalRow() {
                return ((RTGoalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RTGoalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RTGoalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RTGoalRowChanged != null)) {
                    this.RTGoalRowChanged(this, new RTGoalRowChangeEvent(((RTGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RTGoalRowChanging != null)) {
                    this.RTGoalRowChanging(this, new RTGoalRowChangeEvent(((RTGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RTGoalRowDeleted != null)) {
                    this.RTGoalRowDeleted(this, new RTGoalRowChangeEvent(((RTGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RTGoalRowDeleting != null)) {
                    this.RTGoalRowDeleting(this, new RTGoalRowChangeEvent(((RTGoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRTGoalRow(RTGoalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RTGoalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IncomeDataTable : global::System.Data.TypedTableBase<IncomeRow> {
            
            private global::System.Data.DataColumn columnIncomeCategory;
            
            private global::System.Data.DataColumn columnIncomeAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeDataTable() {
                this.TableName = "Income";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncomeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IncomeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeCategoryColumn {
                get {
                    return this.columnIncomeCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeAmountColumn {
                get {
                    return this.columnIncomeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeRow this[int index] {
                get {
                    return ((IncomeRow)(this.Rows[index]));
                }
            }
            
            public event IncomeRowChangeEventHandler IncomeRowChanging;
            
            public event IncomeRowChangeEventHandler IncomeRowChanged;
            
            public event IncomeRowChangeEventHandler IncomeRowDeleting;
            
            public event IncomeRowChangeEventHandler IncomeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIncomeRow(IncomeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeRow AddIncomeRow(string IncomeCategory, decimal IncomeAmount) {
                IncomeRow rowIncomeRow = ((IncomeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IncomeCategory,
                        IncomeAmount};
                rowIncomeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIncomeRow);
                return rowIncomeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IncomeDataTable cln = ((IncomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IncomeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncomeCategory = base.Columns["IncomeCategory"];
                this.columnIncomeAmount = base.Columns["IncomeAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncomeCategory = new global::System.Data.DataColumn("IncomeCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeCategory);
                this.columnIncomeAmount = new global::System.Data.DataColumn("IncomeAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeRow NewIncomeRow() {
                return ((IncomeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IncomeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IncomeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IncomeRowChanged != null)) {
                    this.IncomeRowChanged(this, new IncomeRowChangeEvent(((IncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IncomeRowChanging != null)) {
                    this.IncomeRowChanging(this, new IncomeRowChangeEvent(((IncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IncomeRowDeleted != null)) {
                    this.IncomeRowDeleted(this, new IncomeRowChangeEvent(((IncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IncomeRowDeleting != null)) {
                    this.IncomeRowDeleting(this, new IncomeRowChangeEvent(((IncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIncomeRow(IncomeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IncomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExpenseDataTable : global::System.Data.TypedTableBase<ExpenseRow> {
            
            private global::System.Data.DataColumn columnExpenseCategory;
            
            private global::System.Data.DataColumn columnExpenseAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpenseDataTable() {
                this.TableName = "Expense";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExpenseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExpenseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpenseCategoryColumn {
                get {
                    return this.columnExpenseCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpenseAmountColumn {
                get {
                    return this.columnExpenseAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpenseRow this[int index] {
                get {
                    return ((ExpenseRow)(this.Rows[index]));
                }
            }
            
            public event ExpenseRowChangeEventHandler ExpenseRowChanging;
            
            public event ExpenseRowChangeEventHandler ExpenseRowChanged;
            
            public event ExpenseRowChangeEventHandler ExpenseRowDeleting;
            
            public event ExpenseRowChangeEventHandler ExpenseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExpenseRow(ExpenseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpenseRow AddExpenseRow(string ExpenseCategory, decimal ExpenseAmount) {
                ExpenseRow rowExpenseRow = ((ExpenseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExpenseCategory,
                        ExpenseAmount};
                rowExpenseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExpenseRow);
                return rowExpenseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExpenseDataTable cln = ((ExpenseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExpenseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExpenseCategory = base.Columns["ExpenseCategory"];
                this.columnExpenseAmount = base.Columns["ExpenseAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExpenseCategory = new global::System.Data.DataColumn("ExpenseCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpenseCategory);
                this.columnExpenseAmount = new global::System.Data.DataColumn("ExpenseAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpenseAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpenseRow NewExpenseRow() {
                return ((ExpenseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExpenseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExpenseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExpenseRowChanged != null)) {
                    this.ExpenseRowChanged(this, new ExpenseRowChangeEvent(((ExpenseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExpenseRowChanging != null)) {
                    this.ExpenseRowChanging(this, new ExpenseRowChangeEvent(((ExpenseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExpenseRowDeleted != null)) {
                    this.ExpenseRowDeleted(this, new ExpenseRowChangeEvent(((ExpenseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExpenseRowDeleting != null)) {
                    this.ExpenseRowDeleting(this, new ExpenseRowChangeEvent(((ExpenseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExpenseRow(ExpenseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExpenseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CashFlowsDataTable : global::System.Data.TypedTableBase<CashFlowsRow> {
            
            private global::System.Data.DataColumn columnCashCategory;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashFlowsDataTable() {
                this.TableName = "CashFlows";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CashFlowsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CashFlowsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashCategoryColumn {
                get {
                    return this.columnCashCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashFlowsRow this[int index] {
                get {
                    return ((CashFlowsRow)(this.Rows[index]));
                }
            }
            
            public event CashFlowsRowChangeEventHandler CashFlowsRowChanging;
            
            public event CashFlowsRowChangeEventHandler CashFlowsRowChanged;
            
            public event CashFlowsRowChangeEventHandler CashFlowsRowDeleting;
            
            public event CashFlowsRowChangeEventHandler CashFlowsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCashFlowsRow(CashFlowsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashFlowsRow AddCashFlowsRow(string CashCategory, decimal Amount) {
                CashFlowsRow rowCashFlowsRow = ((CashFlowsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CashCategory,
                        Amount};
                rowCashFlowsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCashFlowsRow);
                return rowCashFlowsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CashFlowsDataTable cln = ((CashFlowsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CashFlowsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCashCategory = base.Columns["CashCategory"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCashCategory = new global::System.Data.DataColumn("CashCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashCategory);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashFlowsRow NewCashFlowsRow() {
                return ((CashFlowsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CashFlowsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CashFlowsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CashFlowsRowChanged != null)) {
                    this.CashFlowsRowChanged(this, new CashFlowsRowChangeEvent(((CashFlowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CashFlowsRowChanging != null)) {
                    this.CashFlowsRowChanging(this, new CashFlowsRowChangeEvent(((CashFlowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CashFlowsRowDeleted != null)) {
                    this.CashFlowsRowDeleted(this, new CashFlowsRowChangeEvent(((CashFlowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CashFlowsRowDeleting != null)) {
                    this.CashFlowsRowDeleting(this, new CashFlowsRowChangeEvent(((CashFlowsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCashFlowsRow(CashFlowsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CashFlowsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NetWorthDataTable : global::System.Data.TypedTableBase<NetWorthRow> {
            
            private global::System.Data.DataColumn columnAssetGroupName;
            
            private global::System.Data.DataColumn columnAssetValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetWorthDataTable() {
                this.TableName = "NetWorth";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NetWorthDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NetWorthDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetGroupNameColumn {
                get {
                    return this.columnAssetGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetValuesColumn {
                get {
                    return this.columnAssetValues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetWorthRow this[int index] {
                get {
                    return ((NetWorthRow)(this.Rows[index]));
                }
            }
            
            public event NetWorthRowChangeEventHandler NetWorthRowChanging;
            
            public event NetWorthRowChangeEventHandler NetWorthRowChanged;
            
            public event NetWorthRowChangeEventHandler NetWorthRowDeleting;
            
            public event NetWorthRowChangeEventHandler NetWorthRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNetWorthRow(NetWorthRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetWorthRow AddNetWorthRow(string AssetGroupName, decimal AssetValues) {
                NetWorthRow rowNetWorthRow = ((NetWorthRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetGroupName,
                        AssetValues};
                rowNetWorthRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNetWorthRow);
                return rowNetWorthRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NetWorthDataTable cln = ((NetWorthDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NetWorthDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetGroupName = base.Columns["AssetGroupName"];
                this.columnAssetValues = base.Columns["AssetValues"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetGroupName = new global::System.Data.DataColumn("AssetGroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetGroupName);
                this.columnAssetValues = new global::System.Data.DataColumn("AssetValues", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetValues);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetWorthRow NewNetWorthRow() {
                return ((NetWorthRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NetWorthRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NetWorthRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NetWorthRowChanged != null)) {
                    this.NetWorthRowChanged(this, new NetWorthRowChangeEvent(((NetWorthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NetWorthRowChanging != null)) {
                    this.NetWorthRowChanging(this, new NetWorthRowChangeEvent(((NetWorthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NetWorthRowDeleted != null)) {
                    this.NetWorthRowDeleted(this, new NetWorthRowChangeEvent(((NetWorthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NetWorthRowDeleting != null)) {
                    this.NetWorthRowDeleting(this, new NetWorthRowChangeEvent(((NetWorthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNetWorthRow(NetWorthRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NetWorthDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LiabilitiesDataTable : global::System.Data.TypedTableBase<LiabilitiesRow> {
            
            private global::System.Data.DataColumn columnLoanType;
            
            private global::System.Data.DataColumn columnLoanValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiabilitiesDataTable() {
                this.TableName = "Liabilities";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LiabilitiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LiabilitiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanTypeColumn {
                get {
                    return this.columnLoanType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanValuesColumn {
                get {
                    return this.columnLoanValues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiabilitiesRow this[int index] {
                get {
                    return ((LiabilitiesRow)(this.Rows[index]));
                }
            }
            
            public event LiabilitiesRowChangeEventHandler LiabilitiesRowChanging;
            
            public event LiabilitiesRowChangeEventHandler LiabilitiesRowChanged;
            
            public event LiabilitiesRowChangeEventHandler LiabilitiesRowDeleting;
            
            public event LiabilitiesRowChangeEventHandler LiabilitiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLiabilitiesRow(LiabilitiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiabilitiesRow AddLiabilitiesRow(string LoanType, decimal LoanValues) {
                LiabilitiesRow rowLiabilitiesRow = ((LiabilitiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LoanType,
                        LoanValues};
                rowLiabilitiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLiabilitiesRow);
                return rowLiabilitiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LiabilitiesDataTable cln = ((LiabilitiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LiabilitiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoanType = base.Columns["LoanType"];
                this.columnLoanValues = base.Columns["LoanValues"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoanType = new global::System.Data.DataColumn("LoanType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanType);
                this.columnLoanValues = new global::System.Data.DataColumn("LoanValues", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanValues);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiabilitiesRow NewLiabilitiesRow() {
                return ((LiabilitiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LiabilitiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LiabilitiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LiabilitiesRowChanged != null)) {
                    this.LiabilitiesRowChanged(this, new LiabilitiesRowChangeEvent(((LiabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LiabilitiesRowChanging != null)) {
                    this.LiabilitiesRowChanging(this, new LiabilitiesRowChangeEvent(((LiabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LiabilitiesRowDeleted != null)) {
                    this.LiabilitiesRowDeleted(this, new LiabilitiesRowChangeEvent(((LiabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LiabilitiesRowDeleting != null)) {
                    this.LiabilitiesRowDeleting(this, new LiabilitiesRowChangeEvent(((LiabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLiabilitiesRow(LiabilitiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LiabilitiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetAllocationDataTable : global::System.Data.TypedTableBase<AssetAllocationRow> {
            
            private global::System.Data.DataColumn columnClass;
            
            private global::System.Data.DataColumn columnRecommendedPercentage;
            
            private global::System.Data.DataColumn columnCurrentPercentage;
            
            private global::System.Data.DataColumn columnActionNeeded;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetAllocationDataTable() {
                this.TableName = "AssetAllocation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssetAllocationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AssetAllocationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecommendedPercentageColumn {
                get {
                    return this.columnRecommendedPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentPercentageColumn {
                get {
                    return this.columnCurrentPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActionNeededColumn {
                get {
                    return this.columnActionNeeded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetAllocationRow this[int index] {
                get {
                    return ((AssetAllocationRow)(this.Rows[index]));
                }
            }
            
            public event AssetAllocationRowChangeEventHandler AssetAllocationRowChanging;
            
            public event AssetAllocationRowChangeEventHandler AssetAllocationRowChanged;
            
            public event AssetAllocationRowChangeEventHandler AssetAllocationRowDeleting;
            
            public event AssetAllocationRowChangeEventHandler AssetAllocationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAssetAllocationRow(AssetAllocationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetAllocationRow AddAssetAllocationRow(string Class, decimal RecommendedPercentage, decimal CurrentPercentage, decimal ActionNeeded) {
                AssetAllocationRow rowAssetAllocationRow = ((AssetAllocationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Class,
                        RecommendedPercentage,
                        CurrentPercentage,
                        ActionNeeded};
                rowAssetAllocationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetAllocationRow);
                return rowAssetAllocationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AssetAllocationDataTable cln = ((AssetAllocationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetAllocationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClass = base.Columns["Class"];
                this.columnRecommendedPercentage = base.Columns["RecommendedPercentage"];
                this.columnCurrentPercentage = base.Columns["CurrentPercentage"];
                this.columnActionNeeded = base.Columns["ActionNeeded"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClass = new global::System.Data.DataColumn("Class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnRecommendedPercentage = new global::System.Data.DataColumn("RecommendedPercentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecommendedPercentage);
                this.columnCurrentPercentage = new global::System.Data.DataColumn("CurrentPercentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentPercentage);
                this.columnActionNeeded = new global::System.Data.DataColumn("ActionNeeded", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionNeeded);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetAllocationRow NewAssetAllocationRow() {
                return ((AssetAllocationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetAllocationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AssetAllocationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetAllocationRowChanged != null)) {
                    this.AssetAllocationRowChanged(this, new AssetAllocationRowChangeEvent(((AssetAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetAllocationRowChanging != null)) {
                    this.AssetAllocationRowChanging(this, new AssetAllocationRowChangeEvent(((AssetAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetAllocationRowDeleted != null)) {
                    this.AssetAllocationRowDeleted(this, new AssetAllocationRowChangeEvent(((AssetAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetAllocationRowDeleting != null)) {
                    this.AssetAllocationRowDeleting(this, new AssetAllocationRowChangeEvent(((AssetAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAssetAllocationRow(AssetAllocationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetAllocationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InsuranceDataTable : global::System.Data.TypedTableBase<InsuranceRow> {
            
            private global::System.Data.DataColumn columnInsuranceCategoryName;
            
            private global::System.Data.DataColumn columnInsuranceValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceDataTable() {
                this.TableName = "Insurance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsuranceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InsuranceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCategoryNameColumn {
                get {
                    return this.columnInsuranceCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceValuesColumn {
                get {
                    return this.columnInsuranceValues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceRow this[int index] {
                get {
                    return ((InsuranceRow)(this.Rows[index]));
                }
            }
            
            public event InsuranceRowChangeEventHandler InsuranceRowChanging;
            
            public event InsuranceRowChangeEventHandler InsuranceRowChanged;
            
            public event InsuranceRowChangeEventHandler InsuranceRowDeleting;
            
            public event InsuranceRowChangeEventHandler InsuranceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInsuranceRow(InsuranceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceRow AddInsuranceRow(string InsuranceCategoryName, decimal InsuranceValues) {
                InsuranceRow rowInsuranceRow = ((InsuranceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InsuranceCategoryName,
                        InsuranceValues};
                rowInsuranceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInsuranceRow);
                return rowInsuranceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InsuranceDataTable cln = ((InsuranceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InsuranceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInsuranceCategoryName = base.Columns["InsuranceCategoryName"];
                this.columnInsuranceValues = base.Columns["InsuranceValues"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInsuranceCategoryName = new global::System.Data.DataColumn("InsuranceCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCategoryName);
                this.columnInsuranceValues = new global::System.Data.DataColumn("InsuranceValues", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceValues);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceRow NewInsuranceRow() {
                return ((InsuranceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InsuranceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InsuranceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InsuranceRowChanged != null)) {
                    this.InsuranceRowChanged(this, new InsuranceRowChangeEvent(((InsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InsuranceRowChanging != null)) {
                    this.InsuranceRowChanging(this, new InsuranceRowChangeEvent(((InsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InsuranceRowDeleted != null)) {
                    this.InsuranceRowDeleted(this, new InsuranceRowChangeEvent(((InsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InsuranceRowDeleting != null)) {
                    this.InsuranceRowDeleting(this, new InsuranceRowChangeEvent(((InsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInsuranceRow(InsuranceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InsuranceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GEInsuranceDataTable : global::System.Data.TypedTableBase<GEInsuranceRow> {
            
            private global::System.Data.DataColumn columnGEAssetCategory;
            
            private global::System.Data.DataColumn columnGEAssetValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEInsuranceDataTable() {
                this.TableName = "GEInsurance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEInsuranceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GEInsuranceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GEAssetCategoryColumn {
                get {
                    return this.columnGEAssetCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GEAssetValuesColumn {
                get {
                    return this.columnGEAssetValues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEInsuranceRow this[int index] {
                get {
                    return ((GEInsuranceRow)(this.Rows[index]));
                }
            }
            
            public event GEInsuranceRowChangeEventHandler GEInsuranceRowChanging;
            
            public event GEInsuranceRowChangeEventHandler GEInsuranceRowChanged;
            
            public event GEInsuranceRowChangeEventHandler GEInsuranceRowDeleting;
            
            public event GEInsuranceRowChangeEventHandler GEInsuranceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGEInsuranceRow(GEInsuranceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEInsuranceRow AddGEInsuranceRow(string GEAssetCategory, decimal GEAssetValues) {
                GEInsuranceRow rowGEInsuranceRow = ((GEInsuranceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GEAssetCategory,
                        GEAssetValues};
                rowGEInsuranceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGEInsuranceRow);
                return rowGEInsuranceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GEInsuranceDataTable cln = ((GEInsuranceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GEInsuranceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGEAssetCategory = base.Columns["GEAssetCategory"];
                this.columnGEAssetValues = base.Columns["GEAssetValues"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGEAssetCategory = new global::System.Data.DataColumn("GEAssetCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEAssetCategory);
                this.columnGEAssetValues = new global::System.Data.DataColumn("GEAssetValues", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEAssetValues);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEInsuranceRow NewGEInsuranceRow() {
                return ((GEInsuranceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GEInsuranceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GEInsuranceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEInsuranceRowChanged != null)) {
                    this.GEInsuranceRowChanged(this, new GEInsuranceRowChangeEvent(((GEInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEInsuranceRowChanging != null)) {
                    this.GEInsuranceRowChanging(this, new GEInsuranceRowChangeEvent(((GEInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEInsuranceRowDeleted != null)) {
                    this.GEInsuranceRowDeleted(this, new GEInsuranceRowChangeEvent(((GEInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEInsuranceRowDeleting != null)) {
                    this.GEInsuranceRowDeleting(this, new GEInsuranceRowChangeEvent(((GEInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGEInsuranceRow(GEInsuranceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GEInsuranceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HLVAnalysisDataTable : global::System.Data.TypedTableBase<HLVAnalysisRow> {
            
            private global::System.Data.DataColumn columnHLV_Type;
            
            private global::System.Data.DataColumn columnHLV_Values;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVAnalysisDataTable() {
                this.TableName = "HLVAnalysis";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HLVAnalysisDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HLVAnalysisDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLV_TypeColumn {
                get {
                    return this.columnHLV_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLV_ValuesColumn {
                get {
                    return this.columnHLV_Values;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVAnalysisRow this[int index] {
                get {
                    return ((HLVAnalysisRow)(this.Rows[index]));
                }
            }
            
            public event HLVAnalysisRowChangeEventHandler HLVAnalysisRowChanging;
            
            public event HLVAnalysisRowChangeEventHandler HLVAnalysisRowChanged;
            
            public event HLVAnalysisRowChangeEventHandler HLVAnalysisRowDeleting;
            
            public event HLVAnalysisRowChangeEventHandler HLVAnalysisRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHLVAnalysisRow(HLVAnalysisRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVAnalysisRow AddHLVAnalysisRow(string HLV_Type, decimal HLV_Values) {
                HLVAnalysisRow rowHLVAnalysisRow = ((HLVAnalysisRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HLV_Type,
                        HLV_Values};
                rowHLVAnalysisRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHLVAnalysisRow);
                return rowHLVAnalysisRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HLVAnalysisDataTable cln = ((HLVAnalysisDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HLVAnalysisDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHLV_Type = base.Columns["HLV_Type"];
                this.columnHLV_Values = base.Columns["HLV_Values"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHLV_Type = new global::System.Data.DataColumn("HLV_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLV_Type);
                this.columnHLV_Values = new global::System.Data.DataColumn("HLV_Values", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLV_Values);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVAnalysisRow NewHLVAnalysisRow() {
                return ((HLVAnalysisRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HLVAnalysisRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HLVAnalysisRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HLVAnalysisRowChanged != null)) {
                    this.HLVAnalysisRowChanged(this, new HLVAnalysisRowChangeEvent(((HLVAnalysisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HLVAnalysisRowChanging != null)) {
                    this.HLVAnalysisRowChanging(this, new HLVAnalysisRowChangeEvent(((HLVAnalysisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HLVAnalysisRowDeleted != null)) {
                    this.HLVAnalysisRowDeleted(this, new HLVAnalysisRowChangeEvent(((HLVAnalysisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HLVAnalysisRowDeleting != null)) {
                    this.HLVAnalysisRowDeleting(this, new HLVAnalysisRowChangeEvent(((HLVAnalysisRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHLVAnalysisRow(HLVAnalysisRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HLVAnalysisDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HLVBasedIncomeDataTable : global::System.Data.TypedTableBase<HLVBasedIncomeRow> {
            
            private global::System.Data.DataColumn columnHLVIncomeType;
            
            private global::System.Data.DataColumn columnHLVIncomeValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVBasedIncomeDataTable() {
                this.TableName = "HLVBasedIncome";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HLVBasedIncomeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HLVBasedIncomeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLVIncomeTypeColumn {
                get {
                    return this.columnHLVIncomeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLVIncomeValueColumn {
                get {
                    return this.columnHLVIncomeValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVBasedIncomeRow this[int index] {
                get {
                    return ((HLVBasedIncomeRow)(this.Rows[index]));
                }
            }
            
            public event HLVBasedIncomeRowChangeEventHandler HLVBasedIncomeRowChanging;
            
            public event HLVBasedIncomeRowChangeEventHandler HLVBasedIncomeRowChanged;
            
            public event HLVBasedIncomeRowChangeEventHandler HLVBasedIncomeRowDeleting;
            
            public event HLVBasedIncomeRowChangeEventHandler HLVBasedIncomeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHLVBasedIncomeRow(HLVBasedIncomeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVBasedIncomeRow AddHLVBasedIncomeRow(string HLVIncomeType, decimal HLVIncomeValue) {
                HLVBasedIncomeRow rowHLVBasedIncomeRow = ((HLVBasedIncomeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HLVIncomeType,
                        HLVIncomeValue};
                rowHLVBasedIncomeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHLVBasedIncomeRow);
                return rowHLVBasedIncomeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HLVBasedIncomeDataTable cln = ((HLVBasedIncomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HLVBasedIncomeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHLVIncomeType = base.Columns["HLVIncomeType"];
                this.columnHLVIncomeValue = base.Columns["HLVIncomeValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHLVIncomeType = new global::System.Data.DataColumn("HLVIncomeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLVIncomeType);
                this.columnHLVIncomeValue = new global::System.Data.DataColumn("HLVIncomeValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLVIncomeValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVBasedIncomeRow NewHLVBasedIncomeRow() {
                return ((HLVBasedIncomeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HLVBasedIncomeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HLVBasedIncomeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HLVBasedIncomeRowChanged != null)) {
                    this.HLVBasedIncomeRowChanged(this, new HLVBasedIncomeRowChangeEvent(((HLVBasedIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HLVBasedIncomeRowChanging != null)) {
                    this.HLVBasedIncomeRowChanging(this, new HLVBasedIncomeRowChangeEvent(((HLVBasedIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HLVBasedIncomeRowDeleted != null)) {
                    this.HLVBasedIncomeRowDeleted(this, new HLVBasedIncomeRowChangeEvent(((HLVBasedIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HLVBasedIncomeRowDeleting != null)) {
                    this.HLVBasedIncomeRowDeleting(this, new HLVBasedIncomeRowChangeEvent(((HLVBasedIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHLVBasedIncomeRow(HLVBasedIncomeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HLVBasedIncomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ObservationDataTable : global::System.Data.TypedTableBase<ObservationRow> {
            
            private global::System.Data.DataColumn columnObjType;
            
            private global::System.Data.DataColumn columnObjSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObservationDataTable() {
                this.TableName = "Observation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObservationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ObservationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjTypeColumn {
                get {
                    return this.columnObjType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjSummaryColumn {
                get {
                    return this.columnObjSummary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObservationRow this[int index] {
                get {
                    return ((ObservationRow)(this.Rows[index]));
                }
            }
            
            public event ObservationRowChangeEventHandler ObservationRowChanging;
            
            public event ObservationRowChangeEventHandler ObservationRowChanged;
            
            public event ObservationRowChangeEventHandler ObservationRowDeleting;
            
            public event ObservationRowChangeEventHandler ObservationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddObservationRow(ObservationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObservationRow AddObservationRow(string ObjType, string ObjSummary) {
                ObservationRow rowObservationRow = ((ObservationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjType,
                        ObjSummary};
                rowObservationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowObservationRow);
                return rowObservationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ObservationDataTable cln = ((ObservationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ObservationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjType = base.Columns["ObjType"];
                this.columnObjSummary = base.Columns["ObjSummary"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjType = new global::System.Data.DataColumn("ObjType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjType);
                this.columnObjSummary = new global::System.Data.DataColumn("ObjSummary", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjSummary);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObservationRow NewObservationRow() {
                return ((ObservationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ObservationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ObservationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ObservationRowChanged != null)) {
                    this.ObservationRowChanged(this, new ObservationRowChangeEvent(((ObservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ObservationRowChanging != null)) {
                    this.ObservationRowChanging(this, new ObservationRowChangeEvent(((ObservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ObservationRowDeleted != null)) {
                    this.ObservationRowDeleted(this, new ObservationRowChangeEvent(((ObservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ObservationRowDeleting != null)) {
                    this.ObservationRowDeleting(this, new ObservationRowChangeEvent(((ObservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveObservationRow(ObservationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ObservationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FinancialHealthDataTable : global::System.Data.TypedTableBase<FinancialHealthRow> {
            
            private global::System.Data.DataColumn columnRatio;
            
            private global::System.Data.DataColumn columnvalue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialHealthDataTable() {
                this.TableName = "FinancialHealth";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FinancialHealthDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FinancialHealthDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatioColumn {
                get {
                    return this.columnRatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialHealthRow this[int index] {
                get {
                    return ((FinancialHealthRow)(this.Rows[index]));
                }
            }
            
            public event FinancialHealthRowChangeEventHandler FinancialHealthRowChanging;
            
            public event FinancialHealthRowChangeEventHandler FinancialHealthRowChanged;
            
            public event FinancialHealthRowChangeEventHandler FinancialHealthRowDeleting;
            
            public event FinancialHealthRowChangeEventHandler FinancialHealthRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFinancialHealthRow(FinancialHealthRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialHealthRow AddFinancialHealthRow(string Ratio, decimal value) {
                FinancialHealthRow rowFinancialHealthRow = ((FinancialHealthRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Ratio,
                        value};
                rowFinancialHealthRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFinancialHealthRow);
                return rowFinancialHealthRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FinancialHealthDataTable cln = ((FinancialHealthDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FinancialHealthDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRatio = base.Columns["Ratio"];
                this.columnvalue = base.Columns["value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRatio = new global::System.Data.DataColumn("Ratio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatio);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialHealthRow NewFinancialHealthRow() {
                return ((FinancialHealthRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FinancialHealthRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FinancialHealthRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FinancialHealthRowChanged != null)) {
                    this.FinancialHealthRowChanged(this, new FinancialHealthRowChangeEvent(((FinancialHealthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FinancialHealthRowChanging != null)) {
                    this.FinancialHealthRowChanging(this, new FinancialHealthRowChangeEvent(((FinancialHealthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FinancialHealthRowDeleted != null)) {
                    this.FinancialHealthRowDeleted(this, new FinancialHealthRowChangeEvent(((FinancialHealthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FinancialHealthRowDeleting != null)) {
                    this.FinancialHealthRowDeleting(this, new FinancialHealthRowChangeEvent(((FinancialHealthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFinancialHealthRow(FinancialHealthRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FPSectionalReportDS ds = new FPSectionalReportDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FinancialHealthDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImageSectionRow : global::System.Data.DataRow {
            
            private ImageSectionDataTable tableImageSection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImageSectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImageSection = ((ImageSectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] SectionImage {
                get {
                    try {
                        return ((byte[])(this[this.tableImageSection.SectionImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionImage\' in table \'ImageSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImageSection.SectionImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionImageNull() {
                return this.IsNull(this.tableImageSection.SectionImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionImageNull() {
                this[this.tableImageSection.SectionImageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerFamilyDetailsRow : global::System.Data.DataRow {
            
            private CustomerFamilyDetailsDataTable tableCustomerFamilyDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerFamilyDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerFamilyDetails = ((CustomerFamilyDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RelationShipCode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerFamilyDetails.RelationShipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelationShipCode\' in table \'CustomerFamilyDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCustomerFamilyDetails.RelationShipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCustomerFamilyDetails.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'CustomerFamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerFamilyDetails.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCustomerFamilyDetails.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'CustomerFamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerFamilyDetails.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationShipCodeNull() {
                return this.IsNull(this.tableCustomerFamilyDetails.RelationShipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationShipCodeNull() {
                this[this.tableCustomerFamilyDetails.RelationShipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCustomerFamilyDetails.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCustomerFamilyDetails.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableCustomerFamilyDetails.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableCustomerFamilyDetails.DOBColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WerpAssumptionsRow : global::System.Data.DataRow {
            
            private WerpAssumptionsDataTable tableWerpAssumptions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WerpAssumptionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWerpAssumptions = ((WerpAssumptionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssumptionName {
                get {
                    try {
                        return ((string)(this[this.tableWerpAssumptions.AssumptionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssumptionName\' in table \'WerpAssumptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWerpAssumptions.AssumptionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssumptionValue {
                get {
                    try {
                        return ((string)(this[this.tableWerpAssumptions.AssumptionValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssumptionValue\' in table \'WerpAssumptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWerpAssumptions.AssumptionValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssumptionNameNull() {
                return this.IsNull(this.tableWerpAssumptions.AssumptionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssumptionNameNull() {
                this[this.tableWerpAssumptions.AssumptionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssumptionValueNull() {
                return this.IsNull(this.tableWerpAssumptions.AssumptionValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssumptionValueNull() {
                this[this.tableWerpAssumptions.AssumptionValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherGoalRow : global::System.Data.DataRow {
            
            private OtherGoalDataTable tableOtherGoal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherGoalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherGoal = ((OtherGoalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoalName {
                get {
                    try {
                        return ((string)(this[this.tableOtherGoal.GoalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalName\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.GoalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChildName {
                get {
                    try {
                        return ((string)(this[this.tableOtherGoal.ChildNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildName\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.ChildNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToday {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherGoal.CostTodayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToday\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.CostTodayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoalYear {
                get {
                    try {
                        return ((int)(this[this.tableOtherGoal.GoalYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalYear\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.GoalYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GoalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherGoal.GoalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalAmount\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.GoalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MonthlySavingsRequired {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherGoal.MonthlySavingsRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonthlySavingsRequired\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.MonthlySavingsRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YearlySavingsRequired {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherGoal.YearlySavingsRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearlySavingsRequired\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.YearlySavingsRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InflationPercentage {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherGoal.InflationPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflationPercentage\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.InflationPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedROI {
                get {
                    try {
                        return ((string)(this[this.tableOtherGoal.ExpectedROIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpectedROI\' in table \'OtherGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherGoal.ExpectedROIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalNameNull() {
                return this.IsNull(this.tableOtherGoal.GoalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalNameNull() {
                this[this.tableOtherGoal.GoalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildNameNull() {
                return this.IsNull(this.tableOtherGoal.ChildNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildNameNull() {
                this[this.tableOtherGoal.ChildNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostTodayNull() {
                return this.IsNull(this.tableOtherGoal.CostTodayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostTodayNull() {
                this[this.tableOtherGoal.CostTodayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalYearNull() {
                return this.IsNull(this.tableOtherGoal.GoalYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalYearNull() {
                this[this.tableOtherGoal.GoalYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalAmountNull() {
                return this.IsNull(this.tableOtherGoal.GoalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalAmountNull() {
                this[this.tableOtherGoal.GoalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthlySavingsRequiredNull() {
                return this.IsNull(this.tableOtherGoal.MonthlySavingsRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthlySavingsRequiredNull() {
                this[this.tableOtherGoal.MonthlySavingsRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearlySavingsRequiredNull() {
                return this.IsNull(this.tableOtherGoal.YearlySavingsRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearlySavingsRequiredNull() {
                this[this.tableOtherGoal.YearlySavingsRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflationPercentageNull() {
                return this.IsNull(this.tableOtherGoal.InflationPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflationPercentageNull() {
                this[this.tableOtherGoal.InflationPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedROINull() {
                return this.IsNull(this.tableOtherGoal.ExpectedROIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedROINull() {
                this[this.tableOtherGoal.ExpectedROIColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RTGoalRow : global::System.Data.DataRow {
            
            private RTGoalDataTable tableRTGoal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RTGoalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRTGoal = ((RTGoalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoalName {
                get {
                    try {
                        return ((string)(this[this.tableRTGoal.GoalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalName\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.GoalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoalYear {
                get {
                    try {
                        return ((int)(this[this.tableRTGoal.GoalYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalYear\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.GoalYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToday {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.CostTodayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToday\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.CostTodayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FVofCostToday {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.FVofCostTodayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FVofCostToday\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.FVofCostTodayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentInvestment {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.CurrentInvestmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentInvestment\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.CurrentInvestmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ROIEarnedOnCurrInvest {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.ROIEarnedOnCurrInvestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROIEarnedOnCurrInvest\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.ROIEarnedOnCurrInvestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MonthlySavingsRequired {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.MonthlySavingsRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonthlySavingsRequired\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.MonthlySavingsRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YearlySavingsRequired {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.YearlySavingsRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearlySavingsRequired\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.YearlySavingsRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LumpsumInvestmentRequired {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.LumpsumInvestmentRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LumpsumInvestmentRequired\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.LumpsumInvestmentRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FutureValueOnCurrentInvest {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.FutureValueOnCurrentInvestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FutureValueOnCurrentInvest\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.FutureValueOnCurrentInvestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GapValues {
                get {
                    try {
                        return ((decimal)(this[this.tableRTGoal.GapValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GapValues\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.GapValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InflationPercentage {
                get {
                    try {
                        return ((string)(this[this.tableRTGoal.InflationPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflationPercentage\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.InflationPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedROI {
                get {
                    try {
                        return ((string)(this[this.tableRTGoal.ExpectedROIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpectedROI\' in table \'RTGoal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTGoal.ExpectedROIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalNameNull() {
                return this.IsNull(this.tableRTGoal.GoalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalNameNull() {
                this[this.tableRTGoal.GoalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalYearNull() {
                return this.IsNull(this.tableRTGoal.GoalYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalYearNull() {
                this[this.tableRTGoal.GoalYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostTodayNull() {
                return this.IsNull(this.tableRTGoal.CostTodayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostTodayNull() {
                this[this.tableRTGoal.CostTodayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFVofCostTodayNull() {
                return this.IsNull(this.tableRTGoal.FVofCostTodayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFVofCostTodayNull() {
                this[this.tableRTGoal.FVofCostTodayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentInvestmentNull() {
                return this.IsNull(this.tableRTGoal.CurrentInvestmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentInvestmentNull() {
                this[this.tableRTGoal.CurrentInvestmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROIEarnedOnCurrInvestNull() {
                return this.IsNull(this.tableRTGoal.ROIEarnedOnCurrInvestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROIEarnedOnCurrInvestNull() {
                this[this.tableRTGoal.ROIEarnedOnCurrInvestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthlySavingsRequiredNull() {
                return this.IsNull(this.tableRTGoal.MonthlySavingsRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthlySavingsRequiredNull() {
                this[this.tableRTGoal.MonthlySavingsRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearlySavingsRequiredNull() {
                return this.IsNull(this.tableRTGoal.YearlySavingsRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearlySavingsRequiredNull() {
                this[this.tableRTGoal.YearlySavingsRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLumpsumInvestmentRequiredNull() {
                return this.IsNull(this.tableRTGoal.LumpsumInvestmentRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLumpsumInvestmentRequiredNull() {
                this[this.tableRTGoal.LumpsumInvestmentRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFutureValueOnCurrentInvestNull() {
                return this.IsNull(this.tableRTGoal.FutureValueOnCurrentInvestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFutureValueOnCurrentInvestNull() {
                this[this.tableRTGoal.FutureValueOnCurrentInvestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGapValuesNull() {
                return this.IsNull(this.tableRTGoal.GapValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGapValuesNull() {
                this[this.tableRTGoal.GapValuesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflationPercentageNull() {
                return this.IsNull(this.tableRTGoal.InflationPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflationPercentageNull() {
                this[this.tableRTGoal.InflationPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedROINull() {
                return this.IsNull(this.tableRTGoal.ExpectedROIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedROINull() {
                this[this.tableRTGoal.ExpectedROIColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IncomeRow : global::System.Data.DataRow {
            
            private IncomeDataTable tableIncome;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncomeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIncome = ((IncomeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomeCategory {
                get {
                    try {
                        return ((string)(this[this.tableIncome.IncomeCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeCategory\' in table \'Income\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncome.IncomeCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IncomeAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableIncome.IncomeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeAmount\' in table \'Income\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncome.IncomeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeCategoryNull() {
                return this.IsNull(this.tableIncome.IncomeCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeCategoryNull() {
                this[this.tableIncome.IncomeCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeAmountNull() {
                return this.IsNull(this.tableIncome.IncomeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeAmountNull() {
                this[this.tableIncome.IncomeAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExpenseRow : global::System.Data.DataRow {
            
            private ExpenseDataTable tableExpense;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExpenseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExpense = ((ExpenseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpenseCategory {
                get {
                    try {
                        return ((string)(this[this.tableExpense.ExpenseCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpenseCategory\' in table \'Expense\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpense.ExpenseCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExpenseAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableExpense.ExpenseAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpenseAmount\' in table \'Expense\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpense.ExpenseAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpenseCategoryNull() {
                return this.IsNull(this.tableExpense.ExpenseCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpenseCategoryNull() {
                this[this.tableExpense.ExpenseCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpenseAmountNull() {
                return this.IsNull(this.tableExpense.ExpenseAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpenseAmountNull() {
                this[this.tableExpense.ExpenseAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CashFlowsRow : global::System.Data.DataRow {
            
            private CashFlowsDataTable tableCashFlows;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CashFlowsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCashFlows = ((CashFlowsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CashCategory {
                get {
                    try {
                        return ((string)(this[this.tableCashFlows.CashCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashCategory\' in table \'CashFlows\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCashFlows.CashCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableCashFlows.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'CashFlows\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCashFlows.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashCategoryNull() {
                return this.IsNull(this.tableCashFlows.CashCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashCategoryNull() {
                this[this.tableCashFlows.CashCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableCashFlows.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableCashFlows.AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NetWorthRow : global::System.Data.DataRow {
            
            private NetWorthDataTable tableNetWorth;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NetWorthRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNetWorth = ((NetWorthDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetGroupName {
                get {
                    try {
                        return ((string)(this[this.tableNetWorth.AssetGroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetGroupName\' in table \'NetWorth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetWorth.AssetGroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssetValues {
                get {
                    try {
                        return ((decimal)(this[this.tableNetWorth.AssetValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetValues\' in table \'NetWorth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetWorth.AssetValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetGroupNameNull() {
                return this.IsNull(this.tableNetWorth.AssetGroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetGroupNameNull() {
                this[this.tableNetWorth.AssetGroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetValuesNull() {
                return this.IsNull(this.tableNetWorth.AssetValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetValuesNull() {
                this[this.tableNetWorth.AssetValuesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LiabilitiesRow : global::System.Data.DataRow {
            
            private LiabilitiesDataTable tableLiabilities;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LiabilitiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLiabilities = ((LiabilitiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanType {
                get {
                    try {
                        return ((string)(this[this.tableLiabilities.LoanTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanType\' in table \'Liabilities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiabilities.LoanTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LoanValues {
                get {
                    try {
                        return ((decimal)(this[this.tableLiabilities.LoanValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanValues\' in table \'Liabilities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiabilities.LoanValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanTypeNull() {
                return this.IsNull(this.tableLiabilities.LoanTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanTypeNull() {
                this[this.tableLiabilities.LoanTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanValuesNull() {
                return this.IsNull(this.tableLiabilities.LoanValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanValuesNull() {
                this[this.tableLiabilities.LoanValuesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AssetAllocationRow : global::System.Data.DataRow {
            
            private AssetAllocationDataTable tableAssetAllocation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssetAllocationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetAllocation = ((AssetAllocationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableAssetAllocation.ClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Class\' in table \'AssetAllocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetAllocation.ClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RecommendedPercentage {
                get {
                    try {
                        return ((decimal)(this[this.tableAssetAllocation.RecommendedPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecommendedPercentage\' in table \'AssetAllocation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAssetAllocation.RecommendedPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentPercentage {
                get {
                    try {
                        return ((decimal)(this[this.tableAssetAllocation.CurrentPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentPercentage\' in table \'AssetAllocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetAllocation.CurrentPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ActionNeeded {
                get {
                    try {
                        return ((decimal)(this[this.tableAssetAllocation.ActionNeededColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActionNeeded\' in table \'AssetAllocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetAllocation.ActionNeededColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNull() {
                return this.IsNull(this.tableAssetAllocation.ClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNull() {
                this[this.tableAssetAllocation.ClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecommendedPercentageNull() {
                return this.IsNull(this.tableAssetAllocation.RecommendedPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecommendedPercentageNull() {
                this[this.tableAssetAllocation.RecommendedPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentPercentageNull() {
                return this.IsNull(this.tableAssetAllocation.CurrentPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentPercentageNull() {
                this[this.tableAssetAllocation.CurrentPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActionNeededNull() {
                return this.IsNull(this.tableAssetAllocation.ActionNeededColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActionNeededNull() {
                this[this.tableAssetAllocation.ActionNeededColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InsuranceRow : global::System.Data.DataRow {
            
            private InsuranceDataTable tableInsurance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsuranceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInsurance = ((InsuranceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableInsurance.InsuranceCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceCategoryName\' in table \'Insurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurance.InsuranceCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InsuranceValues {
                get {
                    try {
                        return ((decimal)(this[this.tableInsurance.InsuranceValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceValues\' in table \'Insurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurance.InsuranceValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceCategoryNameNull() {
                return this.IsNull(this.tableInsurance.InsuranceCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceCategoryNameNull() {
                this[this.tableInsurance.InsuranceCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceValuesNull() {
                return this.IsNull(this.tableInsurance.InsuranceValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceValuesNull() {
                this[this.tableInsurance.InsuranceValuesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GEInsuranceRow : global::System.Data.DataRow {
            
            private GEInsuranceDataTable tableGEInsurance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEInsuranceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEInsurance = ((GEInsuranceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GEAssetCategory {
                get {
                    try {
                        return ((string)(this[this.tableGEInsurance.GEAssetCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEAssetCategory\' in table \'GEInsurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEInsurance.GEAssetCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GEAssetValues {
                get {
                    try {
                        return ((decimal)(this[this.tableGEInsurance.GEAssetValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEAssetValues\' in table \'GEInsurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEInsurance.GEAssetValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGEAssetCategoryNull() {
                return this.IsNull(this.tableGEInsurance.GEAssetCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGEAssetCategoryNull() {
                this[this.tableGEInsurance.GEAssetCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGEAssetValuesNull() {
                return this.IsNull(this.tableGEInsurance.GEAssetValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGEAssetValuesNull() {
                this[this.tableGEInsurance.GEAssetValuesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HLVAnalysisRow : global::System.Data.DataRow {
            
            private HLVAnalysisDataTable tableHLVAnalysis;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HLVAnalysisRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHLVAnalysis = ((HLVAnalysisDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HLV_Type {
                get {
                    try {
                        return ((string)(this[this.tableHLVAnalysis.HLV_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLV_Type\' in table \'HLVAnalysis\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHLVAnalysis.HLV_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HLV_Values {
                get {
                    try {
                        return ((decimal)(this[this.tableHLVAnalysis.HLV_ValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLV_Values\' in table \'HLVAnalysis\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHLVAnalysis.HLV_ValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLV_TypeNull() {
                return this.IsNull(this.tableHLVAnalysis.HLV_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLV_TypeNull() {
                this[this.tableHLVAnalysis.HLV_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLV_ValuesNull() {
                return this.IsNull(this.tableHLVAnalysis.HLV_ValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLV_ValuesNull() {
                this[this.tableHLVAnalysis.HLV_ValuesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HLVBasedIncomeRow : global::System.Data.DataRow {
            
            private HLVBasedIncomeDataTable tableHLVBasedIncome;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HLVBasedIncomeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHLVBasedIncome = ((HLVBasedIncomeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HLVIncomeType {
                get {
                    try {
                        return ((string)(this[this.tableHLVBasedIncome.HLVIncomeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLVIncomeType\' in table \'HLVBasedIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHLVBasedIncome.HLVIncomeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HLVIncomeValue {
                get {
                    try {
                        return ((decimal)(this[this.tableHLVBasedIncome.HLVIncomeValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLVIncomeValue\' in table \'HLVBasedIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHLVBasedIncome.HLVIncomeValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLVIncomeTypeNull() {
                return this.IsNull(this.tableHLVBasedIncome.HLVIncomeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLVIncomeTypeNull() {
                this[this.tableHLVBasedIncome.HLVIncomeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLVIncomeValueNull() {
                return this.IsNull(this.tableHLVBasedIncome.HLVIncomeValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLVIncomeValueNull() {
                this[this.tableHLVBasedIncome.HLVIncomeValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ObservationRow : global::System.Data.DataRow {
            
            private ObservationDataTable tableObservation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObservationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableObservation = ((ObservationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjType {
                get {
                    try {
                        return ((string)(this[this.tableObservation.ObjTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjType\' in table \'Observation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableObservation.ObjTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjSummary {
                get {
                    try {
                        return ((string)(this[this.tableObservation.ObjSummaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjSummary\' in table \'Observation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableObservation.ObjSummaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjTypeNull() {
                return this.IsNull(this.tableObservation.ObjTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjTypeNull() {
                this[this.tableObservation.ObjTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjSummaryNull() {
                return this.IsNull(this.tableObservation.ObjSummaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjSummaryNull() {
                this[this.tableObservation.ObjSummaryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FinancialHealthRow : global::System.Data.DataRow {
            
            private FinancialHealthDataTable tableFinancialHealth;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FinancialHealthRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFinancialHealth = ((FinancialHealthDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ratio {
                get {
                    try {
                        return ((string)(this[this.tableFinancialHealth.RatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ratio\' in table \'FinancialHealth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFinancialHealth.RatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal value {
                get {
                    try {
                        return ((decimal)(this[this.tableFinancialHealth.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'value\' in table \'FinancialHealth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFinancialHealth.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatioNull() {
                return this.IsNull(this.tableFinancialHealth.RatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatioNull() {
                this[this.tableFinancialHealth.RatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tableFinancialHealth.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tableFinancialHealth.valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImageSectionRowChangeEvent : global::System.EventArgs {
            
            private ImageSectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageSectionRowChangeEvent(ImageSectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageSectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerFamilyDetailsRowChangeEvent : global::System.EventArgs {
            
            private CustomerFamilyDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerFamilyDetailsRowChangeEvent(CustomerFamilyDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerFamilyDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WerpAssumptionsRowChangeEvent : global::System.EventArgs {
            
            private WerpAssumptionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WerpAssumptionsRowChangeEvent(WerpAssumptionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WerpAssumptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherGoalRowChangeEvent : global::System.EventArgs {
            
            private OtherGoalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherGoalRowChangeEvent(OtherGoalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherGoalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RTGoalRowChangeEvent : global::System.EventArgs {
            
            private RTGoalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTGoalRowChangeEvent(RTGoalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTGoalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IncomeRowChangeEvent : global::System.EventArgs {
            
            private IncomeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeRowChangeEvent(IncomeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExpenseRowChangeEvent : global::System.EventArgs {
            
            private ExpenseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpenseRowChangeEvent(ExpenseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpenseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CashFlowsRowChangeEvent : global::System.EventArgs {
            
            private CashFlowsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashFlowsRowChangeEvent(CashFlowsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashFlowsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NetWorthRowChangeEvent : global::System.EventArgs {
            
            private NetWorthRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetWorthRowChangeEvent(NetWorthRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetWorthRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LiabilitiesRowChangeEvent : global::System.EventArgs {
            
            private LiabilitiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiabilitiesRowChangeEvent(LiabilitiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiabilitiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AssetAllocationRowChangeEvent : global::System.EventArgs {
            
            private AssetAllocationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetAllocationRowChangeEvent(AssetAllocationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetAllocationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InsuranceRowChangeEvent : global::System.EventArgs {
            
            private InsuranceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceRowChangeEvent(InsuranceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GEInsuranceRowChangeEvent : global::System.EventArgs {
            
            private GEInsuranceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEInsuranceRowChangeEvent(GEInsuranceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEInsuranceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HLVAnalysisRowChangeEvent : global::System.EventArgs {
            
            private HLVAnalysisRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVAnalysisRowChangeEvent(HLVAnalysisRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVAnalysisRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HLVBasedIncomeRowChangeEvent : global::System.EventArgs {
            
            private HLVBasedIncomeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVBasedIncomeRowChangeEvent(HLVBasedIncomeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HLVBasedIncomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ObservationRowChangeEvent : global::System.EventArgs {
            
            private ObservationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObservationRowChangeEvent(ObservationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObservationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FinancialHealthRowChangeEvent : global::System.EventArgs {
            
            private FinancialHealthRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialHealthRowChangeEvent(FinancialHealthRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialHealthRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591