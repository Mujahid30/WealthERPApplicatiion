//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MFRealizedDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MFRealizedDS : global::System.Data.DataSet {
        
        private MFComprehensiveDataTable tableMFComprehensive;
        
        private MFRealizedDataTable tableMFRealized;
        
        private SchemeComprehensiveDataTable tableSchemeComprehensive;
        
        private ToptenHoldingsDataTable tableToptenHoldings;
        
        private TopTenSectorsDataTable tableTopTenSectors;
        
        private PortfolioXIRRDataTable tablePortfolioXIRR;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MFRealizedDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MFRealizedDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MFComprehensive"] != null)) {
                    base.Tables.Add(new MFComprehensiveDataTable(ds.Tables["MFComprehensive"]));
                }
                if ((ds.Tables["MFRealized"] != null)) {
                    base.Tables.Add(new MFRealizedDataTable(ds.Tables["MFRealized"]));
                }
                if ((ds.Tables["SchemeComprehensive"] != null)) {
                    base.Tables.Add(new SchemeComprehensiveDataTable(ds.Tables["SchemeComprehensive"]));
                }
                if ((ds.Tables["ToptenHoldings"] != null)) {
                    base.Tables.Add(new ToptenHoldingsDataTable(ds.Tables["ToptenHoldings"]));
                }
                if ((ds.Tables["TopTenSectors"] != null)) {
                    base.Tables.Add(new TopTenSectorsDataTable(ds.Tables["TopTenSectors"]));
                }
                if ((ds.Tables["PortfolioXIRR"] != null)) {
                    base.Tables.Add(new PortfolioXIRRDataTable(ds.Tables["PortfolioXIRR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFComprehensiveDataTable MFComprehensive {
            get {
                return this.tableMFComprehensive;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFRealizedDataTable MFRealized {
            get {
                return this.tableMFRealized;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemeComprehensiveDataTable SchemeComprehensive {
            get {
                return this.tableSchemeComprehensive;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ToptenHoldingsDataTable ToptenHoldings {
            get {
                return this.tableToptenHoldings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TopTenSectorsDataTable TopTenSectors {
            get {
                return this.tableTopTenSectors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortfolioXIRRDataTable PortfolioXIRR {
            get {
                return this.tablePortfolioXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MFRealizedDS cln = ((MFRealizedDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MFComprehensive"] != null)) {
                    base.Tables.Add(new MFComprehensiveDataTable(ds.Tables["MFComprehensive"]));
                }
                if ((ds.Tables["MFRealized"] != null)) {
                    base.Tables.Add(new MFRealizedDataTable(ds.Tables["MFRealized"]));
                }
                if ((ds.Tables["SchemeComprehensive"] != null)) {
                    base.Tables.Add(new SchemeComprehensiveDataTable(ds.Tables["SchemeComprehensive"]));
                }
                if ((ds.Tables["ToptenHoldings"] != null)) {
                    base.Tables.Add(new ToptenHoldingsDataTable(ds.Tables["ToptenHoldings"]));
                }
                if ((ds.Tables["TopTenSectors"] != null)) {
                    base.Tables.Add(new TopTenSectorsDataTable(ds.Tables["TopTenSectors"]));
                }
                if ((ds.Tables["PortfolioXIRR"] != null)) {
                    base.Tables.Add(new PortfolioXIRRDataTable(ds.Tables["PortfolioXIRR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMFComprehensive = ((MFComprehensiveDataTable)(base.Tables["MFComprehensive"]));
            if ((initTable == true)) {
                if ((this.tableMFComprehensive != null)) {
                    this.tableMFComprehensive.InitVars();
                }
            }
            this.tableMFRealized = ((MFRealizedDataTable)(base.Tables["MFRealized"]));
            if ((initTable == true)) {
                if ((this.tableMFRealized != null)) {
                    this.tableMFRealized.InitVars();
                }
            }
            this.tableSchemeComprehensive = ((SchemeComprehensiveDataTable)(base.Tables["SchemeComprehensive"]));
            if ((initTable == true)) {
                if ((this.tableSchemeComprehensive != null)) {
                    this.tableSchemeComprehensive.InitVars();
                }
            }
            this.tableToptenHoldings = ((ToptenHoldingsDataTable)(base.Tables["ToptenHoldings"]));
            if ((initTable == true)) {
                if ((this.tableToptenHoldings != null)) {
                    this.tableToptenHoldings.InitVars();
                }
            }
            this.tableTopTenSectors = ((TopTenSectorsDataTable)(base.Tables["TopTenSectors"]));
            if ((initTable == true)) {
                if ((this.tableTopTenSectors != null)) {
                    this.tableTopTenSectors.InitVars();
                }
            }
            this.tablePortfolioXIRR = ((PortfolioXIRRDataTable)(base.Tables["PortfolioXIRR"]));
            if ((initTable == true)) {
                if ((this.tablePortfolioXIRR != null)) {
                    this.tablePortfolioXIRR.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MFRealizedDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MFRealizedDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMFComprehensive = new MFComprehensiveDataTable();
            base.Tables.Add(this.tableMFComprehensive);
            this.tableMFRealized = new MFRealizedDataTable();
            base.Tables.Add(this.tableMFRealized);
            this.tableSchemeComprehensive = new SchemeComprehensiveDataTable();
            base.Tables.Add(this.tableSchemeComprehensive);
            this.tableToptenHoldings = new ToptenHoldingsDataTable();
            base.Tables.Add(this.tableToptenHoldings);
            this.tableTopTenSectors = new TopTenSectorsDataTable();
            base.Tables.Add(this.tableTopTenSectors);
            this.tablePortfolioXIRR = new PortfolioXIRRDataTable();
            base.Tables.Add(this.tablePortfolioXIRR);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFComprehensive() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFRealized() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchemeComprehensive() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeToptenHoldings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTopTenSectors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortfolioXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MFRealizedDS ds = new MFRealizedDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MFComprehensiveRowChangeEventHandler(object sender, MFComprehensiveRowChangeEvent e);
        
        public delegate void MFRealizedRowChangeEventHandler(object sender, MFRealizedRowChangeEvent e);
        
        public delegate void SchemeComprehensiveRowChangeEventHandler(object sender, SchemeComprehensiveRowChangeEvent e);
        
        public delegate void ToptenHoldingsRowChangeEventHandler(object sender, ToptenHoldingsRowChangeEvent e);
        
        public delegate void TopTenSectorsRowChangeEventHandler(object sender, TopTenSectorsRowChangeEvent e);
        
        public delegate void PortfolioXIRRRowChangeEventHandler(object sender, PortfolioXIRRRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFComprehensiveDataTable : global::System.Data.TypedTableBase<MFComprehensiveRow> {
            
            private global::System.Data.DataColumn columnPASP_SchemePlanCode;
            
            private global::System.Data.DataColumn columnScheme;
            
            private global::System.Data.DataColumn columnFolio;
            
            private global::System.Data.DataColumn columnCP_PortfolioId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnC_CustomerId;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnNAV;
            
            private global::System.Data.DataColumn columnCurrentValue;
            
            private global::System.Data.DataColumn columnInvestedCost;
            
            private global::System.Data.DataColumn columnRedeemedAmount;
            
            private global::System.Data.DataColumn columnPL;
            
            private global::System.Data.DataColumn columnAbsReturn;
            
            private global::System.Data.DataColumn columnTotalXIRR;
            
            private global::System.Data.DataColumn columnDVR;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryCode;
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveDataTable() {
                this.TableName = "MFComprehensive";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFComprehensiveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFComprehensiveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PASP_SchemePlanCodeColumn {
                get {
                    return this.columnPASP_SchemePlanCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeColumn {
                get {
                    return this.columnScheme;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioColumn {
                get {
                    return this.columnFolio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CP_PortfolioIdColumn {
                get {
                    return this.columnCP_PortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_CustomerIdColumn {
                get {
                    return this.columnC_CustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAVColumn {
                get {
                    return this.columnNAV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentValueColumn {
                get {
                    return this.columnCurrentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestedCostColumn {
                get {
                    return this.columnInvestedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RedeemedAmountColumn {
                get {
                    return this.columnRedeemedAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLColumn {
                get {
                    return this.columnPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsReturnColumn {
                get {
                    return this.columnAbsReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalXIRRColumn {
                get {
                    return this.columnTotalXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVRColumn {
                get {
                    return this.columnDVR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryCodeColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow this[int index] {
                get {
                    return ((MFComprehensiveRow)(this.Rows[index]));
                }
            }
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowChanging;
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowChanged;
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowDeleting;
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFComprehensiveRow(MFComprehensiveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow AddMFComprehensiveRow(
                        string PASP_SchemePlanCode, 
                        string Scheme, 
                        string Folio, 
                        string CP_PortfolioId, 
                        string PortfolioName, 
                        string C_CustomerId, 
                        string CustomerName, 
                        long Units, 
                        long NAV, 
                        long CurrentValue, 
                        long InvestedCost, 
                        long RedeemedAmount, 
                        long PL, 
                        long AbsReturn, 
                        long TotalXIRR, 
                        long DVR, 
                        long DVP, 
                        string PAIC_AssetInstrumentCategoryCode, 
                        string Category) {
                MFComprehensiveRow rowMFComprehensiveRow = ((MFComprehensiveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PASP_SchemePlanCode,
                        Scheme,
                        Folio,
                        CP_PortfolioId,
                        PortfolioName,
                        C_CustomerId,
                        CustomerName,
                        Units,
                        NAV,
                        CurrentValue,
                        InvestedCost,
                        RedeemedAmount,
                        PL,
                        AbsReturn,
                        TotalXIRR,
                        DVR,
                        DVP,
                        PAIC_AssetInstrumentCategoryCode,
                        Category};
                rowMFComprehensiveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFComprehensiveRow);
                return rowMFComprehensiveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFComprehensiveDataTable cln = ((MFComprehensiveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFComprehensiveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPASP_SchemePlanCode = base.Columns["PASP_SchemePlanCode"];
                this.columnScheme = base.Columns["Scheme"];
                this.columnFolio = base.Columns["Folio"];
                this.columnCP_PortfolioId = base.Columns["CP_PortfolioId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnC_CustomerId = base.Columns["C_CustomerId"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnUnits = base.Columns["Units"];
                this.columnNAV = base.Columns["NAV"];
                this.columnCurrentValue = base.Columns["CurrentValue"];
                this.columnInvestedCost = base.Columns["InvestedCost"];
                this.columnRedeemedAmount = base.Columns["RedeemedAmount"];
                this.columnPL = base.Columns["PL"];
                this.columnAbsReturn = base.Columns["AbsReturn"];
                this.columnTotalXIRR = base.Columns["TotalXIRR"];
                this.columnDVR = base.Columns["DVR"];
                this.columnDVP = base.Columns["DVP"];
                this.columnPAIC_AssetInstrumentCategoryCode = base.Columns["PAIC_AssetInstrumentCategoryCode"];
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPASP_SchemePlanCode = new global::System.Data.DataColumn("PASP_SchemePlanCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASP_SchemePlanCode);
                this.columnScheme = new global::System.Data.DataColumn("Scheme", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheme);
                this.columnFolio = new global::System.Data.DataColumn("Folio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolio);
                this.columnCP_PortfolioId = new global::System.Data.DataColumn("CP_PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_PortfolioId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnC_CustomerId = new global::System.Data.DataColumn("C_CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_CustomerId);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnNAV = new global::System.Data.DataColumn("NAV", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAV);
                this.columnCurrentValue = new global::System.Data.DataColumn("CurrentValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentValue);
                this.columnInvestedCost = new global::System.Data.DataColumn("InvestedCost", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestedCost);
                this.columnRedeemedAmount = new global::System.Data.DataColumn("RedeemedAmount", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRedeemedAmount);
                this.columnPL = new global::System.Data.DataColumn("PL", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPL);
                this.columnAbsReturn = new global::System.Data.DataColumn("AbsReturn", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsReturn);
                this.columnTotalXIRR = new global::System.Data.DataColumn("TotalXIRR", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalXIRR);
                this.columnDVR = new global::System.Data.DataColumn("DVR", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVR);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnPAIC_AssetInstrumentCategoryCode = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryCode);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow NewMFComprehensiveRow() {
                return ((MFComprehensiveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFComprehensiveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFComprehensiveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFComprehensiveRowChanged != null)) {
                    this.MFComprehensiveRowChanged(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFComprehensiveRowChanging != null)) {
                    this.MFComprehensiveRowChanging(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFComprehensiveRowDeleted != null)) {
                    this.MFComprehensiveRowDeleted(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFComprehensiveRowDeleting != null)) {
                    this.MFComprehensiveRowDeleting(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFComprehensiveRow(MFComprehensiveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFComprehensiveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFRealizedDataTable : global::System.Data.TypedTableBase<MFRealizedRow> {
            
            private global::System.Data.DataColumn columnPASP_SchemePlanCode;
            
            private global::System.Data.DataColumn columnScheme;
            
            private global::System.Data.DataColumn columnFolio;
            
            private global::System.Data.DataColumn columnCP_PortfolioId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnC_CustomerId;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnInvestedCost;
            
            private global::System.Data.DataColumn columnRedeemedAmount;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnPL;
            
            private global::System.Data.DataColumn columnAbsReturn;
            
            private global::System.Data.DataColumn columnXIRR;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryCode;
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFRealizedDataTable() {
                this.TableName = "MFRealized";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFRealizedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFRealizedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PASP_SchemePlanCodeColumn {
                get {
                    return this.columnPASP_SchemePlanCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeColumn {
                get {
                    return this.columnScheme;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioColumn {
                get {
                    return this.columnFolio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CP_PortfolioIdColumn {
                get {
                    return this.columnCP_PortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_CustomerIdColumn {
                get {
                    return this.columnC_CustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestedCostColumn {
                get {
                    return this.columnInvestedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RedeemedAmountColumn {
                get {
                    return this.columnRedeemedAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLColumn {
                get {
                    return this.columnPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsReturnColumn {
                get {
                    return this.columnAbsReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryCodeColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFRealizedRow this[int index] {
                get {
                    return ((MFRealizedRow)(this.Rows[index]));
                }
            }
            
            public event MFRealizedRowChangeEventHandler MFRealizedRowChanging;
            
            public event MFRealizedRowChangeEventHandler MFRealizedRowChanged;
            
            public event MFRealizedRowChangeEventHandler MFRealizedRowDeleting;
            
            public event MFRealizedRowChangeEventHandler MFRealizedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFRealizedRow(MFRealizedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFRealizedRow AddMFRealizedRow(string PASP_SchemePlanCode, string Scheme, string Folio, string CP_PortfolioId, string PortfolioName, string C_CustomerId, string CustomerName, long InvestedCost, long RedeemedAmount, long DVP, long PL, long AbsReturn, long XIRR, string PAIC_AssetInstrumentCategoryCode, string Category) {
                MFRealizedRow rowMFRealizedRow = ((MFRealizedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PASP_SchemePlanCode,
                        Scheme,
                        Folio,
                        CP_PortfolioId,
                        PortfolioName,
                        C_CustomerId,
                        CustomerName,
                        InvestedCost,
                        RedeemedAmount,
                        DVP,
                        PL,
                        AbsReturn,
                        XIRR,
                        PAIC_AssetInstrumentCategoryCode,
                        Category};
                rowMFRealizedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFRealizedRow);
                return rowMFRealizedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFRealizedDataTable cln = ((MFRealizedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFRealizedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPASP_SchemePlanCode = base.Columns["PASP_SchemePlanCode"];
                this.columnScheme = base.Columns["Scheme"];
                this.columnFolio = base.Columns["Folio"];
                this.columnCP_PortfolioId = base.Columns["CP_PortfolioId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnC_CustomerId = base.Columns["C_CustomerId"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnInvestedCost = base.Columns["InvestedCost"];
                this.columnRedeemedAmount = base.Columns["RedeemedAmount"];
                this.columnDVP = base.Columns["DVP"];
                this.columnPL = base.Columns["PL"];
                this.columnAbsReturn = base.Columns["AbsReturn"];
                this.columnXIRR = base.Columns["XIRR"];
                this.columnPAIC_AssetInstrumentCategoryCode = base.Columns["PAIC_AssetInstrumentCategoryCode"];
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPASP_SchemePlanCode = new global::System.Data.DataColumn("PASP_SchemePlanCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASP_SchemePlanCode);
                this.columnScheme = new global::System.Data.DataColumn("Scheme", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheme);
                this.columnFolio = new global::System.Data.DataColumn("Folio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolio);
                this.columnCP_PortfolioId = new global::System.Data.DataColumn("CP_PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_PortfolioId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnC_CustomerId = new global::System.Data.DataColumn("C_CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_CustomerId);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnInvestedCost = new global::System.Data.DataColumn("InvestedCost", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestedCost);
                this.columnRedeemedAmount = new global::System.Data.DataColumn("RedeemedAmount", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRedeemedAmount);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnPL = new global::System.Data.DataColumn("PL", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPL);
                this.columnAbsReturn = new global::System.Data.DataColumn("AbsReturn", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsReturn);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
                this.columnPAIC_AssetInstrumentCategoryCode = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryCode);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFRealizedRow NewMFRealizedRow() {
                return ((MFRealizedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFRealizedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFRealizedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFRealizedRowChanged != null)) {
                    this.MFRealizedRowChanged(this, new MFRealizedRowChangeEvent(((MFRealizedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFRealizedRowChanging != null)) {
                    this.MFRealizedRowChanging(this, new MFRealizedRowChangeEvent(((MFRealizedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFRealizedRowDeleted != null)) {
                    this.MFRealizedRowDeleted(this, new MFRealizedRowChangeEvent(((MFRealizedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFRealizedRowDeleting != null)) {
                    this.MFRealizedRowDeleting(this, new MFRealizedRowChangeEvent(((MFRealizedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFRealizedRow(MFRealizedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFRealizedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemeComprehensiveDataTable : global::System.Data.TypedTableBase<SchemeComprehensiveRow> {
            
            private global::System.Data.DataColumn columnSchemeCode;
            
            private global::System.Data.DataColumn columnSchemeName;
            
            private global::System.Data.DataColumn columnCurrentValue;
            
            private global::System.Data.DataColumn columnOneMonthReturn;
            
            private global::System.Data.DataColumn columnSixMonthReturn;
            
            private global::System.Data.DataColumn columnOneYearReturn;
            
            private global::System.Data.DataColumn columnThreeYearReturn;
            
            private global::System.Data.DataColumn columnFiveYearReturn;
            
            private global::System.Data.DataColumn columnInceptionReturn;
            
            private global::System.Data.DataColumn columnPE;
            
            private global::System.Data.DataColumn columnPB;
            
            private global::System.Data.DataColumn columnSharpe;
            
            private global::System.Data.DataColumn columnSd;
            
            private global::System.Data.DataColumn columnTop5Holding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeComprehensiveDataTable() {
                this.TableName = "SchemeComprehensive";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemeComprehensiveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemeComprehensiveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeCodeColumn {
                get {
                    return this.columnSchemeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeNameColumn {
                get {
                    return this.columnSchemeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentValueColumn {
                get {
                    return this.columnCurrentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OneMonthReturnColumn {
                get {
                    return this.columnOneMonthReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SixMonthReturnColumn {
                get {
                    return this.columnSixMonthReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OneYearReturnColumn {
                get {
                    return this.columnOneYearReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThreeYearReturnColumn {
                get {
                    return this.columnThreeYearReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FiveYearReturnColumn {
                get {
                    return this.columnFiveYearReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InceptionReturnColumn {
                get {
                    return this.columnInceptionReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEColumn {
                get {
                    return this.columnPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PBColumn {
                get {
                    return this.columnPB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SharpeColumn {
                get {
                    return this.columnSharpe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SdColumn {
                get {
                    return this.columnSd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Top5HoldingColumn {
                get {
                    return this.columnTop5Holding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeComprehensiveRow this[int index] {
                get {
                    return ((SchemeComprehensiveRow)(this.Rows[index]));
                }
            }
            
            public event SchemeComprehensiveRowChangeEventHandler SchemeComprehensiveRowChanging;
            
            public event SchemeComprehensiveRowChangeEventHandler SchemeComprehensiveRowChanged;
            
            public event SchemeComprehensiveRowChangeEventHandler SchemeComprehensiveRowDeleting;
            
            public event SchemeComprehensiveRowChangeEventHandler SchemeComprehensiveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemeComprehensiveRow(SchemeComprehensiveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeComprehensiveRow AddSchemeComprehensiveRow(short SchemeCode, string SchemeName, double CurrentValue, double OneMonthReturn, double SixMonthReturn, double OneYearReturn, double ThreeYearReturn, double FiveYearReturn, double InceptionReturn, double PE, double PB, double Sharpe, double Sd, double Top5Holding) {
                SchemeComprehensiveRow rowSchemeComprehensiveRow = ((SchemeComprehensiveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SchemeCode,
                        SchemeName,
                        CurrentValue,
                        OneMonthReturn,
                        SixMonthReturn,
                        OneYearReturn,
                        ThreeYearReturn,
                        FiveYearReturn,
                        InceptionReturn,
                        PE,
                        PB,
                        Sharpe,
                        Sd,
                        Top5Holding};
                rowSchemeComprehensiveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSchemeComprehensiveRow);
                return rowSchemeComprehensiveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SchemeComprehensiveDataTable cln = ((SchemeComprehensiveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SchemeComprehensiveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemeCode = base.Columns["SchemeCode"];
                this.columnSchemeName = base.Columns["SchemeName"];
                this.columnCurrentValue = base.Columns["CurrentValue"];
                this.columnOneMonthReturn = base.Columns["OneMonthReturn"];
                this.columnSixMonthReturn = base.Columns["SixMonthReturn"];
                this.columnOneYearReturn = base.Columns["OneYearReturn"];
                this.columnThreeYearReturn = base.Columns["ThreeYearReturn"];
                this.columnFiveYearReturn = base.Columns["FiveYearReturn"];
                this.columnInceptionReturn = base.Columns["InceptionReturn"];
                this.columnPE = base.Columns["PE"];
                this.columnPB = base.Columns["PB"];
                this.columnSharpe = base.Columns["Sharpe"];
                this.columnSd = base.Columns["Sd"];
                this.columnTop5Holding = base.Columns["Top5Holding"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemeCode = new global::System.Data.DataColumn("SchemeCode", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemeCode);
                this.columnSchemeName = new global::System.Data.DataColumn("SchemeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemeName);
                this.columnCurrentValue = new global::System.Data.DataColumn("CurrentValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentValue);
                this.columnOneMonthReturn = new global::System.Data.DataColumn("OneMonthReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOneMonthReturn);
                this.columnSixMonthReturn = new global::System.Data.DataColumn("SixMonthReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSixMonthReturn);
                this.columnOneYearReturn = new global::System.Data.DataColumn("OneYearReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOneYearReturn);
                this.columnThreeYearReturn = new global::System.Data.DataColumn("ThreeYearReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThreeYearReturn);
                this.columnFiveYearReturn = new global::System.Data.DataColumn("FiveYearReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFiveYearReturn);
                this.columnInceptionReturn = new global::System.Data.DataColumn("InceptionReturn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInceptionReturn);
                this.columnPE = new global::System.Data.DataColumn("PE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPE);
                this.columnPB = new global::System.Data.DataColumn("PB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPB);
                this.columnSharpe = new global::System.Data.DataColumn("Sharpe", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSharpe);
                this.columnSd = new global::System.Data.DataColumn("Sd", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSd);
                this.columnTop5Holding = new global::System.Data.DataColumn("Top5Holding", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTop5Holding);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeComprehensiveRow NewSchemeComprehensiveRow() {
                return ((SchemeComprehensiveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SchemeComprehensiveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SchemeComprehensiveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemeComprehensiveRowChanged != null)) {
                    this.SchemeComprehensiveRowChanged(this, new SchemeComprehensiveRowChangeEvent(((SchemeComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemeComprehensiveRowChanging != null)) {
                    this.SchemeComprehensiveRowChanging(this, new SchemeComprehensiveRowChangeEvent(((SchemeComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemeComprehensiveRowDeleted != null)) {
                    this.SchemeComprehensiveRowDeleted(this, new SchemeComprehensiveRowChangeEvent(((SchemeComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemeComprehensiveRowDeleting != null)) {
                    this.SchemeComprehensiveRowDeleting(this, new SchemeComprehensiveRowChangeEvent(((SchemeComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemeComprehensiveRow(SchemeComprehensiveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemeComprehensiveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ToptenHoldingsDataTable : global::System.Data.TypedTableBase<ToptenHoldingsRow> {
            
            private global::System.Data.DataColumn columnInstrument;
            
            private global::System.Data.DataColumn columnInsType;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnPercentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsDataTable() {
                this.TableName = "ToptenHoldings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToptenHoldingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ToptenHoldingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentColumn {
                get {
                    return this.columnInstrument;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsTypeColumn {
                get {
                    return this.columnInsType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow this[int index] {
                get {
                    return ((ToptenHoldingsRow)(this.Rows[index]));
                }
            }
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowChanging;
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowChanged;
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowDeleting;
            
            public event ToptenHoldingsRowChangeEventHandler ToptenHoldingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddToptenHoldingsRow(ToptenHoldingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow AddToptenHoldingsRow(string Instrument, string InsType, double Amount, double Percentage) {
                ToptenHoldingsRow rowToptenHoldingsRow = ((ToptenHoldingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Instrument,
                        InsType,
                        Amount,
                        Percentage};
                rowToptenHoldingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowToptenHoldingsRow);
                return rowToptenHoldingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ToptenHoldingsDataTable cln = ((ToptenHoldingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ToptenHoldingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInstrument = base.Columns["Instrument"];
                this.columnInsType = base.Columns["InsType"];
                this.columnAmount = base.Columns["Amount"];
                this.columnPercentage = base.Columns["Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInstrument = new global::System.Data.DataColumn("Instrument", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrument);
                this.columnInsType = new global::System.Data.DataColumn("InsType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsType);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow NewToptenHoldingsRow() {
                return ((ToptenHoldingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ToptenHoldingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ToptenHoldingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ToptenHoldingsRowChanged != null)) {
                    this.ToptenHoldingsRowChanged(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ToptenHoldingsRowChanging != null)) {
                    this.ToptenHoldingsRowChanging(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ToptenHoldingsRowDeleted != null)) {
                    this.ToptenHoldingsRowDeleted(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ToptenHoldingsRowDeleting != null)) {
                    this.ToptenHoldingsRowDeleting(this, new ToptenHoldingsRowChangeEvent(((ToptenHoldingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveToptenHoldingsRow(ToptenHoldingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ToptenHoldingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TopTenSectorsDataTable : global::System.Data.TypedTableBase<TopTenSectorsRow> {
            
            private global::System.Data.DataColumn columnSectorCode;
            
            private global::System.Data.DataColumn columnSector;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnPercentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsDataTable() {
                this.TableName = "TopTenSectors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TopTenSectorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TopTenSectorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorCodeColumn {
                get {
                    return this.columnSectorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectorColumn {
                get {
                    return this.columnSector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow this[int index] {
                get {
                    return ((TopTenSectorsRow)(this.Rows[index]));
                }
            }
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowChanging;
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowChanged;
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowDeleting;
            
            public event TopTenSectorsRowChangeEventHandler TopTenSectorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTopTenSectorsRow(TopTenSectorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow AddTopTenSectorsRow(string SectorCode, string Sector, double Amount, double Percentage) {
                TopTenSectorsRow rowTopTenSectorsRow = ((TopTenSectorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectorCode,
                        Sector,
                        Amount,
                        Percentage};
                rowTopTenSectorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTopTenSectorsRow);
                return rowTopTenSectorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TopTenSectorsDataTable cln = ((TopTenSectorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TopTenSectorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectorCode = base.Columns["SectorCode"];
                this.columnSector = base.Columns["Sector"];
                this.columnAmount = base.Columns["Amount"];
                this.columnPercentage = base.Columns["Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectorCode = new global::System.Data.DataColumn("SectorCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectorCode);
                this.columnSector = new global::System.Data.DataColumn("Sector", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSector);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow NewTopTenSectorsRow() {
                return ((TopTenSectorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TopTenSectorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TopTenSectorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TopTenSectorsRowChanged != null)) {
                    this.TopTenSectorsRowChanged(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TopTenSectorsRowChanging != null)) {
                    this.TopTenSectorsRowChanging(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TopTenSectorsRowDeleted != null)) {
                    this.TopTenSectorsRowDeleted(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TopTenSectorsRowDeleting != null)) {
                    this.TopTenSectorsRowDeleting(this, new TopTenSectorsRowChangeEvent(((TopTenSectorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTopTenSectorsRow(TopTenSectorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TopTenSectorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortfolioXIRRDataTable : global::System.Data.TypedTableBase<PortfolioXIRRRow> {
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnXIRR;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRDataTable() {
                this.TableName = "PortfolioXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortfolioXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow this[int index] {
                get {
                    return ((PortfolioXIRRRow)(this.Rows[index]));
                }
            }
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowChanging;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowChanged;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowDeleting;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortfolioXIRRRow(PortfolioXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow AddPortfolioXIRRRow(int CustomerId, string CustomerName, int PortfolioId, decimal XIRR, string PortfolioName) {
                PortfolioXIRRRow rowPortfolioXIRRRow = ((PortfolioXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerId,
                        CustomerName,
                        PortfolioId,
                        XIRR,
                        PortfolioName};
                rowPortfolioXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortfolioXIRRRow);
                return rowPortfolioXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortfolioXIRRDataTable cln = ((PortfolioXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortfolioXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnXIRR = base.Columns["XIRR"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow NewPortfolioXIRRRow() {
                return ((PortfolioXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortfolioXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortfolioXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortfolioXIRRRowChanged != null)) {
                    this.PortfolioXIRRRowChanged(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortfolioXIRRRowChanging != null)) {
                    this.PortfolioXIRRRowChanging(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortfolioXIRRRowDeleted != null)) {
                    this.PortfolioXIRRRowDeleted(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortfolioXIRRRowDeleting != null)) {
                    this.PortfolioXIRRRowDeleting(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortfolioXIRRRow(PortfolioXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortfolioXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFComprehensiveRow : global::System.Data.DataRow {
            
            private MFComprehensiveDataTable tableMFComprehensive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFComprehensiveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFComprehensive = ((MFComprehensiveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASP_SchemePlanCode {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.PASP_SchemePlanCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PASP_SchemePlanCode\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PASP_SchemePlanCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scheme {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.SchemeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scheme\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.SchemeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Folio {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.FolioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Folio\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.FolioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.CP_PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CP_PortfolioId\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CP_PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.C_CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_CustomerId\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.C_CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Units {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long NAV {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.NAVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAV\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.NAVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CurrentValue {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.CurrentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentValue\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CurrentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InvestedCost {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.InvestedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvestedCost\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.InvestedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RedeemedAmount {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.RedeemedAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RedeemedAmount\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.RedeemedAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PL {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.PLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PL\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AbsReturn {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.AbsReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AbsReturn\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.AbsReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TotalXIRR {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.TotalXIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalXIRR\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.TotalXIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DVR {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.DVRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVR\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.DVRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DVP {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryCode {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryCode\' in table \'MFComprehensive" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPASP_SchemePlanCodeNull() {
                return this.IsNull(this.tableMFComprehensive.PASP_SchemePlanCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPASP_SchemePlanCodeNull() {
                this[this.tableMFComprehensive.PASP_SchemePlanCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeNull() {
                return this.IsNull(this.tableMFComprehensive.SchemeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeNull() {
                this[this.tableMFComprehensive.SchemeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNull() {
                return this.IsNull(this.tableMFComprehensive.FolioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNull() {
                this[this.tableMFComprehensive.FolioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCP_PortfolioIdNull() {
                return this.IsNull(this.tableMFComprehensive.CP_PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCP_PortfolioIdNull() {
                this[this.tableMFComprehensive.CP_PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFComprehensive.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFComprehensive.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_CustomerIdNull() {
                return this.IsNull(this.tableMFComprehensive.C_CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_CustomerIdNull() {
                this[this.tableMFComprehensive.C_CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFComprehensive.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFComprehensive.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableMFComprehensive.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableMFComprehensive.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAVNull() {
                return this.IsNull(this.tableMFComprehensive.NAVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAVNull() {
                this[this.tableMFComprehensive.NAVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentValueNull() {
                return this.IsNull(this.tableMFComprehensive.CurrentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentValueNull() {
                this[this.tableMFComprehensive.CurrentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvestedCostNull() {
                return this.IsNull(this.tableMFComprehensive.InvestedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvestedCostNull() {
                this[this.tableMFComprehensive.InvestedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRedeemedAmountNull() {
                return this.IsNull(this.tableMFComprehensive.RedeemedAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRedeemedAmountNull() {
                this[this.tableMFComprehensive.RedeemedAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLNull() {
                return this.IsNull(this.tableMFComprehensive.PLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLNull() {
                this[this.tableMFComprehensive.PLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsReturnNull() {
                return this.IsNull(this.tableMFComprehensive.AbsReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsReturnNull() {
                this[this.tableMFComprehensive.AbsReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalXIRRNull() {
                return this.IsNull(this.tableMFComprehensive.TotalXIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalXIRRNull() {
                this[this.tableMFComprehensive.TotalXIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVRNull() {
                return this.IsNull(this.tableMFComprehensive.DVRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVRNull() {
                this[this.tableMFComprehensive.DVRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableMFComprehensive.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableMFComprehensive.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryCodeNull() {
                return this.IsNull(this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryCodeNull() {
                this[this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableMFComprehensive.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableMFComprehensive.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFRealizedRow : global::System.Data.DataRow {
            
            private MFRealizedDataTable tableMFRealized;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFRealizedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFRealized = ((MFRealizedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASP_SchemePlanCode {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.PASP_SchemePlanCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PASP_SchemePlanCode\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.PASP_SchemePlanCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scheme {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.SchemeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scheme\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.SchemeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Folio {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.FolioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Folio\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.FolioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.CP_PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CP_PortfolioId\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.CP_PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.C_CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_CustomerId\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.C_CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InvestedCost {
                get {
                    try {
                        return ((long)(this[this.tableMFRealized.InvestedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvestedCost\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.InvestedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RedeemedAmount {
                get {
                    try {
                        return ((long)(this[this.tableMFRealized.RedeemedAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RedeemedAmount\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.RedeemedAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DVP {
                get {
                    try {
                        return ((long)(this[this.tableMFRealized.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PL {
                get {
                    try {
                        return ((long)(this[this.tableMFRealized.PLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PL\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.PLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AbsReturn {
                get {
                    try {
                        return ((long)(this[this.tableMFRealized.AbsReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AbsReturn\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.AbsReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long XIRR {
                get {
                    try {
                        return ((long)(this[this.tableMFRealized.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryCode {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.PAIC_AssetInstrumentCategoryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryCode\' in table \'MFRealized\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.PAIC_AssetInstrumentCategoryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableMFRealized.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'MFRealized\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFRealized.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPASP_SchemePlanCodeNull() {
                return this.IsNull(this.tableMFRealized.PASP_SchemePlanCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPASP_SchemePlanCodeNull() {
                this[this.tableMFRealized.PASP_SchemePlanCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeNull() {
                return this.IsNull(this.tableMFRealized.SchemeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeNull() {
                this[this.tableMFRealized.SchemeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNull() {
                return this.IsNull(this.tableMFRealized.FolioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNull() {
                this[this.tableMFRealized.FolioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCP_PortfolioIdNull() {
                return this.IsNull(this.tableMFRealized.CP_PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCP_PortfolioIdNull() {
                this[this.tableMFRealized.CP_PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFRealized.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFRealized.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_CustomerIdNull() {
                return this.IsNull(this.tableMFRealized.C_CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_CustomerIdNull() {
                this[this.tableMFRealized.C_CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFRealized.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFRealized.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvestedCostNull() {
                return this.IsNull(this.tableMFRealized.InvestedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvestedCostNull() {
                this[this.tableMFRealized.InvestedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRedeemedAmountNull() {
                return this.IsNull(this.tableMFRealized.RedeemedAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRedeemedAmountNull() {
                this[this.tableMFRealized.RedeemedAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableMFRealized.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableMFRealized.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLNull() {
                return this.IsNull(this.tableMFRealized.PLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLNull() {
                this[this.tableMFRealized.PLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsReturnNull() {
                return this.IsNull(this.tableMFRealized.AbsReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsReturnNull() {
                this[this.tableMFRealized.AbsReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tableMFRealized.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tableMFRealized.XIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryCodeNull() {
                return this.IsNull(this.tableMFRealized.PAIC_AssetInstrumentCategoryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryCodeNull() {
                this[this.tableMFRealized.PAIC_AssetInstrumentCategoryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableMFRealized.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableMFRealized.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemeComprehensiveRow : global::System.Data.DataRow {
            
            private SchemeComprehensiveDataTable tableSchemeComprehensive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemeComprehensiveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchemeComprehensive = ((SchemeComprehensiveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SchemeCode {
                get {
                    try {
                        return ((short)(this[this.tableSchemeComprehensive.SchemeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchemeCode\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.SchemeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchemeName {
                get {
                    try {
                        return ((string)(this[this.tableSchemeComprehensive.SchemeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchemeName\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.SchemeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentValue {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.CurrentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentValue\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.CurrentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OneMonthReturn {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.OneMonthReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OneMonthReturn\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.OneMonthReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SixMonthReturn {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.SixMonthReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SixMonthReturn\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.SixMonthReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OneYearReturn {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.OneYearReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OneYearReturn\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.OneYearReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ThreeYearReturn {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.ThreeYearReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThreeYearReturn\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.ThreeYearReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FiveYearReturn {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.FiveYearReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FiveYearReturn\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.FiveYearReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InceptionReturn {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.InceptionReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InceptionReturn\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.InceptionReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PE {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.PEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PE\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.PEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PB {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.PBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PB\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.PBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sharpe {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.SharpeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sharpe\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.SharpeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sd {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.SdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sd\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.SdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Top5Holding {
                get {
                    try {
                        return ((double)(this[this.tableSchemeComprehensive.Top5HoldingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Top5Holding\' in table \'SchemeComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchemeComprehensive.Top5HoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeCodeNull() {
                return this.IsNull(this.tableSchemeComprehensive.SchemeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeCodeNull() {
                this[this.tableSchemeComprehensive.SchemeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeNameNull() {
                return this.IsNull(this.tableSchemeComprehensive.SchemeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeNameNull() {
                this[this.tableSchemeComprehensive.SchemeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentValueNull() {
                return this.IsNull(this.tableSchemeComprehensive.CurrentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentValueNull() {
                this[this.tableSchemeComprehensive.CurrentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneMonthReturnNull() {
                return this.IsNull(this.tableSchemeComprehensive.OneMonthReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOneMonthReturnNull() {
                this[this.tableSchemeComprehensive.OneMonthReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSixMonthReturnNull() {
                return this.IsNull(this.tableSchemeComprehensive.SixMonthReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSixMonthReturnNull() {
                this[this.tableSchemeComprehensive.SixMonthReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneYearReturnNull() {
                return this.IsNull(this.tableSchemeComprehensive.OneYearReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOneYearReturnNull() {
                this[this.tableSchemeComprehensive.OneYearReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThreeYearReturnNull() {
                return this.IsNull(this.tableSchemeComprehensive.ThreeYearReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThreeYearReturnNull() {
                this[this.tableSchemeComprehensive.ThreeYearReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiveYearReturnNull() {
                return this.IsNull(this.tableSchemeComprehensive.FiveYearReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiveYearReturnNull() {
                this[this.tableSchemeComprehensive.FiveYearReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInceptionReturnNull() {
                return this.IsNull(this.tableSchemeComprehensive.InceptionReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInceptionReturnNull() {
                this[this.tableSchemeComprehensive.InceptionReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPENull() {
                return this.IsNull(this.tableSchemeComprehensive.PEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPENull() {
                this[this.tableSchemeComprehensive.PEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPBNull() {
                return this.IsNull(this.tableSchemeComprehensive.PBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPBNull() {
                this[this.tableSchemeComprehensive.PBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSharpeNull() {
                return this.IsNull(this.tableSchemeComprehensive.SharpeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSharpeNull() {
                this[this.tableSchemeComprehensive.SharpeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSdNull() {
                return this.IsNull(this.tableSchemeComprehensive.SdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSdNull() {
                this[this.tableSchemeComprehensive.SdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTop5HoldingNull() {
                return this.IsNull(this.tableSchemeComprehensive.Top5HoldingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTop5HoldingNull() {
                this[this.tableSchemeComprehensive.Top5HoldingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ToptenHoldingsRow : global::System.Data.DataRow {
            
            private ToptenHoldingsDataTable tableToptenHoldings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ToptenHoldingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableToptenHoldings = ((ToptenHoldingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instrument {
                get {
                    try {
                        return ((string)(this[this.tableToptenHoldings.InstrumentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instrument\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.InstrumentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsType {
                get {
                    try {
                        return ((string)(this[this.tableToptenHoldings.InsTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsType\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.InsTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount {
                get {
                    try {
                        return ((double)(this[this.tableToptenHoldings.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Percentage {
                get {
                    try {
                        return ((double)(this[this.tableToptenHoldings.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'ToptenHoldings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToptenHoldings.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentNull() {
                return this.IsNull(this.tableToptenHoldings.InstrumentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentNull() {
                this[this.tableToptenHoldings.InstrumentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsTypeNull() {
                return this.IsNull(this.tableToptenHoldings.InsTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsTypeNull() {
                this[this.tableToptenHoldings.InsTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableToptenHoldings.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableToptenHoldings.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableToptenHoldings.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableToptenHoldings.PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TopTenSectorsRow : global::System.Data.DataRow {
            
            private TopTenSectorsDataTable tableTopTenSectors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TopTenSectorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTopTenSectors = ((TopTenSectorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectorCode {
                get {
                    try {
                        return ((string)(this[this.tableTopTenSectors.SectorCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectorCode\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.SectorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sector {
                get {
                    try {
                        return ((string)(this[this.tableTopTenSectors.SectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sector\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.SectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount {
                get {
                    try {
                        return ((double)(this[this.tableTopTenSectors.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Percentage {
                get {
                    try {
                        return ((double)(this[this.tableTopTenSectors.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'TopTenSectors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTopTenSectors.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorCodeNull() {
                return this.IsNull(this.tableTopTenSectors.SectorCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorCodeNull() {
                this[this.tableTopTenSectors.SectorCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorNull() {
                return this.IsNull(this.tableTopTenSectors.SectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorNull() {
                this[this.tableTopTenSectors.SectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableTopTenSectors.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableTopTenSectors.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableTopTenSectors.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableTopTenSectors.PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortfolioXIRRRow : global::System.Data.DataRow {
            
            private PortfolioXIRRDataTable tablePortfolioXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortfolioXIRR = ((PortfolioXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerId {
                get {
                    try {
                        return ((int)(this[this.tablePortfolioXIRR.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    try {
                        return ((int)(this[this.tablePortfolioXIRR.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal XIRR {
                get {
                    try {
                        return ((decimal)(this[this.tablePortfolioXIRR.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tablePortfolioXIRR.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tablePortfolioXIRR.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tablePortfolioXIRR.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tablePortfolioXIRR.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tablePortfolioXIRR.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tablePortfolioXIRR.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tablePortfolioXIRR.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tablePortfolioXIRR.XIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tablePortfolioXIRR.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tablePortfolioXIRR.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFComprehensiveRowChangeEvent : global::System.EventArgs {
            
            private MFComprehensiveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRowChangeEvent(MFComprehensiveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFRealizedRowChangeEvent : global::System.EventArgs {
            
            private MFRealizedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFRealizedRowChangeEvent(MFRealizedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFRealizedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemeComprehensiveRowChangeEvent : global::System.EventArgs {
            
            private SchemeComprehensiveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeComprehensiveRowChangeEvent(SchemeComprehensiveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeComprehensiveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ToptenHoldingsRowChangeEvent : global::System.EventArgs {
            
            private ToptenHoldingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRowChangeEvent(ToptenHoldingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ToptenHoldingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TopTenSectorsRowChangeEvent : global::System.EventArgs {
            
            private TopTenSectorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRowChangeEvent(TopTenSectorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopTenSectorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortfolioXIRRRowChangeEvent : global::System.EventArgs {
            
            private PortfolioXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRowChangeEvent(PortfolioXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591