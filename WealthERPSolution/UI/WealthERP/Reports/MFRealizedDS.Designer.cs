//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MFRealizedDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MFRealizedDS : global::System.Data.DataSet {
        
        private MFComprehensiveDataTable tableMFComprehensive;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MFRealizedDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MFRealizedDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MFComprehensive"] != null)) {
                    base.Tables.Add(new MFComprehensiveDataTable(ds.Tables["MFComprehensive"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFComprehensiveDataTable MFComprehensive {
            get {
                return this.tableMFComprehensive;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MFRealizedDS cln = ((MFRealizedDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MFComprehensive"] != null)) {
                    base.Tables.Add(new MFComprehensiveDataTable(ds.Tables["MFComprehensive"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMFComprehensive = ((MFComprehensiveDataTable)(base.Tables["MFComprehensive"]));
            if ((initTable == true)) {
                if ((this.tableMFComprehensive != null)) {
                    this.tableMFComprehensive.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MFRealizedDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MFRealizedDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMFComprehensive = new MFComprehensiveDataTable();
            base.Tables.Add(this.tableMFComprehensive);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFComprehensive() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MFRealizedDS ds = new MFRealizedDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MFComprehensiveRowChangeEventHandler(object sender, MFComprehensiveRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFComprehensiveDataTable : global::System.Data.TypedTableBase<MFComprehensiveRow> {
            
            private global::System.Data.DataColumn columnPASP_SchemePlanCode;
            
            private global::System.Data.DataColumn columnScheme;
            
            private global::System.Data.DataColumn columnFolio;
            
            private global::System.Data.DataColumn columnCP_PortfolioId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnC_CustomerId;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnNAV;
            
            private global::System.Data.DataColumn columnCurrentValue;
            
            private global::System.Data.DataColumn columnInvestedCost;
            
            private global::System.Data.DataColumn columnRedeemedAmount;
            
            private global::System.Data.DataColumn columnPL;
            
            private global::System.Data.DataColumn columnAbsReturn;
            
            private global::System.Data.DataColumn columnTotalXIRR;
            
            private global::System.Data.DataColumn columnDVR;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryCode;
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveDataTable() {
                this.TableName = "MFComprehensive";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFComprehensiveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFComprehensiveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PASP_SchemePlanCodeColumn {
                get {
                    return this.columnPASP_SchemePlanCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeColumn {
                get {
                    return this.columnScheme;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioColumn {
                get {
                    return this.columnFolio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CP_PortfolioIdColumn {
                get {
                    return this.columnCP_PortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_CustomerIdColumn {
                get {
                    return this.columnC_CustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAVColumn {
                get {
                    return this.columnNAV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentValueColumn {
                get {
                    return this.columnCurrentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestedCostColumn {
                get {
                    return this.columnInvestedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RedeemedAmountColumn {
                get {
                    return this.columnRedeemedAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLColumn {
                get {
                    return this.columnPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsReturnColumn {
                get {
                    return this.columnAbsReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalXIRRColumn {
                get {
                    return this.columnTotalXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVRColumn {
                get {
                    return this.columnDVR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryCodeColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow this[int index] {
                get {
                    return ((MFComprehensiveRow)(this.Rows[index]));
                }
            }
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowChanging;
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowChanged;
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowDeleting;
            
            public event MFComprehensiveRowChangeEventHandler MFComprehensiveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFComprehensiveRow(MFComprehensiveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow AddMFComprehensiveRow(
                        string PASP_SchemePlanCode, 
                        string Scheme, 
                        string Folio, 
                        string CP_PortfolioId, 
                        string PortfolioName, 
                        string C_CustomerId, 
                        string CustomerName, 
                        long Units, 
                        long NAV, 
                        long CurrentValue, 
                        long InvestedCost, 
                        long RedeemedAmount, 
                        long PL, 
                        long AbsReturn, 
                        long TotalXIRR, 
                        long DVR, 
                        long DVP, 
                        string PAIC_AssetInstrumentCategoryCode, 
                        string Category) {
                MFComprehensiveRow rowMFComprehensiveRow = ((MFComprehensiveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PASP_SchemePlanCode,
                        Scheme,
                        Folio,
                        CP_PortfolioId,
                        PortfolioName,
                        C_CustomerId,
                        CustomerName,
                        Units,
                        NAV,
                        CurrentValue,
                        InvestedCost,
                        RedeemedAmount,
                        PL,
                        AbsReturn,
                        TotalXIRR,
                        DVR,
                        DVP,
                        PAIC_AssetInstrumentCategoryCode,
                        Category};
                rowMFComprehensiveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFComprehensiveRow);
                return rowMFComprehensiveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFComprehensiveDataTable cln = ((MFComprehensiveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFComprehensiveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPASP_SchemePlanCode = base.Columns["PASP_SchemePlanCode"];
                this.columnScheme = base.Columns["Scheme"];
                this.columnFolio = base.Columns["Folio"];
                this.columnCP_PortfolioId = base.Columns["CP_PortfolioId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnC_CustomerId = base.Columns["C_CustomerId"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnUnits = base.Columns["Units"];
                this.columnNAV = base.Columns["NAV"];
                this.columnCurrentValue = base.Columns["CurrentValue"];
                this.columnInvestedCost = base.Columns["InvestedCost"];
                this.columnRedeemedAmount = base.Columns["RedeemedAmount"];
                this.columnPL = base.Columns["PL"];
                this.columnAbsReturn = base.Columns["AbsReturn"];
                this.columnTotalXIRR = base.Columns["TotalXIRR"];
                this.columnDVR = base.Columns["DVR"];
                this.columnDVP = base.Columns["DVP"];
                this.columnPAIC_AssetInstrumentCategoryCode = base.Columns["PAIC_AssetInstrumentCategoryCode"];
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPASP_SchemePlanCode = new global::System.Data.DataColumn("PASP_SchemePlanCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASP_SchemePlanCode);
                this.columnScheme = new global::System.Data.DataColumn("Scheme", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheme);
                this.columnFolio = new global::System.Data.DataColumn("Folio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolio);
                this.columnCP_PortfolioId = new global::System.Data.DataColumn("CP_PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_PortfolioId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnC_CustomerId = new global::System.Data.DataColumn("C_CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_CustomerId);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnNAV = new global::System.Data.DataColumn("NAV", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAV);
                this.columnCurrentValue = new global::System.Data.DataColumn("CurrentValue", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentValue);
                this.columnInvestedCost = new global::System.Data.DataColumn("InvestedCost", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestedCost);
                this.columnRedeemedAmount = new global::System.Data.DataColumn("RedeemedAmount", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRedeemedAmount);
                this.columnPL = new global::System.Data.DataColumn("PL", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPL);
                this.columnAbsReturn = new global::System.Data.DataColumn("AbsReturn", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsReturn);
                this.columnTotalXIRR = new global::System.Data.DataColumn("TotalXIRR", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalXIRR);
                this.columnDVR = new global::System.Data.DataColumn("DVR", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVR);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnPAIC_AssetInstrumentCategoryCode = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryCode);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow NewMFComprehensiveRow() {
                return ((MFComprehensiveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFComprehensiveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFComprehensiveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFComprehensiveRowChanged != null)) {
                    this.MFComprehensiveRowChanged(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFComprehensiveRowChanging != null)) {
                    this.MFComprehensiveRowChanging(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFComprehensiveRowDeleted != null)) {
                    this.MFComprehensiveRowDeleted(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFComprehensiveRowDeleting != null)) {
                    this.MFComprehensiveRowDeleting(this, new MFComprehensiveRowChangeEvent(((MFComprehensiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFComprehensiveRow(MFComprehensiveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFRealizedDS ds = new MFRealizedDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFComprehensiveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFComprehensiveRow : global::System.Data.DataRow {
            
            private MFComprehensiveDataTable tableMFComprehensive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFComprehensiveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFComprehensive = ((MFComprehensiveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASP_SchemePlanCode {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.PASP_SchemePlanCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PASP_SchemePlanCode\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PASP_SchemePlanCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scheme {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.SchemeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scheme\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.SchemeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Folio {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.FolioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Folio\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.FolioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.CP_PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CP_PortfolioId\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CP_PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.C_CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_CustomerId\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.C_CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Units {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long NAV {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.NAVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAV\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.NAVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CurrentValue {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.CurrentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentValue\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CurrentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InvestedCost {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.InvestedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvestedCost\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.InvestedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RedeemedAmount {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.RedeemedAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RedeemedAmount\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.RedeemedAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PL {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.PLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PL\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AbsReturn {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.AbsReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AbsReturn\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.AbsReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TotalXIRR {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.TotalXIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalXIRR\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.TotalXIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DVR {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.DVRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVR\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.DVRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DVP {
                get {
                    try {
                        return ((long)(this[this.tableMFComprehensive.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryCode {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryCode\' in table \'MFComprehensive" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableMFComprehensive.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'MFComprehensive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFComprehensive.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPASP_SchemePlanCodeNull() {
                return this.IsNull(this.tableMFComprehensive.PASP_SchemePlanCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPASP_SchemePlanCodeNull() {
                this[this.tableMFComprehensive.PASP_SchemePlanCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeNull() {
                return this.IsNull(this.tableMFComprehensive.SchemeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeNull() {
                this[this.tableMFComprehensive.SchemeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNull() {
                return this.IsNull(this.tableMFComprehensive.FolioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNull() {
                this[this.tableMFComprehensive.FolioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCP_PortfolioIdNull() {
                return this.IsNull(this.tableMFComprehensive.CP_PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCP_PortfolioIdNull() {
                this[this.tableMFComprehensive.CP_PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFComprehensive.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFComprehensive.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_CustomerIdNull() {
                return this.IsNull(this.tableMFComprehensive.C_CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_CustomerIdNull() {
                this[this.tableMFComprehensive.C_CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFComprehensive.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFComprehensive.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableMFComprehensive.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableMFComprehensive.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAVNull() {
                return this.IsNull(this.tableMFComprehensive.NAVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAVNull() {
                this[this.tableMFComprehensive.NAVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentValueNull() {
                return this.IsNull(this.tableMFComprehensive.CurrentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentValueNull() {
                this[this.tableMFComprehensive.CurrentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvestedCostNull() {
                return this.IsNull(this.tableMFComprehensive.InvestedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvestedCostNull() {
                this[this.tableMFComprehensive.InvestedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRedeemedAmountNull() {
                return this.IsNull(this.tableMFComprehensive.RedeemedAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRedeemedAmountNull() {
                this[this.tableMFComprehensive.RedeemedAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLNull() {
                return this.IsNull(this.tableMFComprehensive.PLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLNull() {
                this[this.tableMFComprehensive.PLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsReturnNull() {
                return this.IsNull(this.tableMFComprehensive.AbsReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsReturnNull() {
                this[this.tableMFComprehensive.AbsReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalXIRRNull() {
                return this.IsNull(this.tableMFComprehensive.TotalXIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalXIRRNull() {
                this[this.tableMFComprehensive.TotalXIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVRNull() {
                return this.IsNull(this.tableMFComprehensive.DVRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVRNull() {
                this[this.tableMFComprehensive.DVRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableMFComprehensive.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableMFComprehensive.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryCodeNull() {
                return this.IsNull(this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryCodeNull() {
                this[this.tableMFComprehensive.PAIC_AssetInstrumentCategoryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableMFComprehensive.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableMFComprehensive.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFComprehensiveRowChangeEvent : global::System.EventArgs {
            
            private MFComprehensiveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRowChangeEvent(MFComprehensiveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFComprehensiveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591