//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProductBrokerageApplicationWise")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProductBrokerageApplicationWise : global::System.Data.DataSet {
        
        private SPROC_GetProductBrokerageApplicationWiseDataTable tableSPROC_GetProductBrokerageApplicationWise;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductBrokerageApplicationWise() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProductBrokerageApplicationWise(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SPROC_GetProductBrokerageApplicationWise"] != null)) {
                    base.Tables.Add(new SPROC_GetProductBrokerageApplicationWiseDataTable(ds.Tables["SPROC_GetProductBrokerageApplicationWise"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPROC_GetProductBrokerageApplicationWiseDataTable SPROC_GetProductBrokerageApplicationWise {
            get {
                return this.tableSPROC_GetProductBrokerageApplicationWise;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProductBrokerageApplicationWise cln = ((ProductBrokerageApplicationWise)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SPROC_GetProductBrokerageApplicationWise"] != null)) {
                    base.Tables.Add(new SPROC_GetProductBrokerageApplicationWiseDataTable(ds.Tables["SPROC_GetProductBrokerageApplicationWise"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSPROC_GetProductBrokerageApplicationWise = ((SPROC_GetProductBrokerageApplicationWiseDataTable)(base.Tables["SPROC_GetProductBrokerageApplicationWise"]));
            if ((initTable == true)) {
                if ((this.tableSPROC_GetProductBrokerageApplicationWise != null)) {
                    this.tableSPROC_GetProductBrokerageApplicationWise.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProductBrokerageApplicationWise";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProductBrokerageApplicationWise.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSPROC_GetProductBrokerageApplicationWise = new SPROC_GetProductBrokerageApplicationWiseDataTable();
            base.Tables.Add(this.tableSPROC_GetProductBrokerageApplicationWise);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPROC_GetProductBrokerageApplicationWise() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProductBrokerageApplicationWise ds = new ProductBrokerageApplicationWise();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SPROC_GetProductBrokerageApplicationWiseRowChangeEventHandler(object sender, SPROC_GetProductBrokerageApplicationWiseRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPROC_GetProductBrokerageApplicationWiseDataTable : global::System.Data.TypedTableBase<SPROC_GetProductBrokerageApplicationWiseRow> {
            
            private global::System.Data.DataColumn columnCO_ApplicationNumber;
            
            private global::System.Data.DataColumn columnAAC_AgentCode;
            
            private global::System.Data.DataColumn columnAA_ContactPersonName;
            
            private global::System.Data.DataColumn columnAIM_IssueName;
            
            private global::System.Data.DataColumn columnWCD_TransactionAsOnDate;
            
            private global::System.Data.DataColumn columnWCD_AllotedQty;
            
            private global::System.Data.DataColumn columnWCD_Holdings;
            
            private global::System.Data.DataColumn columnWCD_Act_Rec_BrokerageDate;
            
            private global::System.Data.DataColumn columnWCD_Act_Rec_Brokerage;
            
            private global::System.Data.DataColumn columnWCD_ACSR_ServiceTaxValue;
            
            private global::System.Data.DataColumn columnWCD_ACSR_ReducedValue;
            
            private global::System.Data.DataColumn columnWCD_Act_Pay_Brokerage;
            
            private global::System.Data.DataColumn columnWCD_Act_Pay_BrokerageDate;
            
            private global::System.Data.DataColumn columnAB_BranchName;
            
            private global::System.Data.DataColumn columnAB_City;
            
            private global::System.Data.DataColumn columnBank;
            
            private global::System.Data.DataColumn columnECS;
            
            private global::System.Data.DataColumn columnBanck_Account;
            
            private global::System.Data.DataColumn columnBank_branch;
            
            private global::System.Data.DataColumn columnPAN;
            
            private global::System.Data.DataColumn columnWCD_CustomerName;
            
            private global::System.Data.DataColumn columnC_CustCode;
            
            private global::System.Data.DataColumn columnAR_FirstName;
            
            private global::System.Data.DataColumn columnAR_EUIN;
            
            private global::System.Data.DataColumn columnBrokerageType;
            
            private global::System.Data.DataColumn columnECS_MICR;
            
            private global::System.Data.DataColumn columnBank1;
            
            private global::System.Data.DataColumn columnBankAddress;
            
            private global::System.Data.DataColumn columnECS1;
            
            private global::System.Data.DataColumn columnBanck_Account1;
            
            private global::System.Data.DataColumn columnBank_branch1;
            
            private global::System.Data.DataColumn columnPAN1;
            
            private global::System.Data.DataColumn columnWMTT_TransactionClassificationName;
            
            private global::System.Data.DataColumn columnWCD_CommissionType;
            
            private global::System.Data.DataColumn columnECS_AcctType;
            
            private global::System.Data.DataColumn columnECS_NEFT;
            
            private global::System.Data.DataColumn columnECS_MICR1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPROC_GetProductBrokerageApplicationWiseDataTable() {
                this.TableName = "SPROC_GetProductBrokerageApplicationWise";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPROC_GetProductBrokerageApplicationWiseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPROC_GetProductBrokerageApplicationWiseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CO_ApplicationNumberColumn {
                get {
                    return this.columnCO_ApplicationNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AAC_AgentCodeColumn {
                get {
                    return this.columnAAC_AgentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AA_ContactPersonNameColumn {
                get {
                    return this.columnAA_ContactPersonName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AIM_IssueNameColumn {
                get {
                    return this.columnAIM_IssueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_TransactionAsOnDateColumn {
                get {
                    return this.columnWCD_TransactionAsOnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_AllotedQtyColumn {
                get {
                    return this.columnWCD_AllotedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_HoldingsColumn {
                get {
                    return this.columnWCD_Holdings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_Act_Rec_BrokerageDateColumn {
                get {
                    return this.columnWCD_Act_Rec_BrokerageDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_Act_Rec_BrokerageColumn {
                get {
                    return this.columnWCD_Act_Rec_Brokerage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_ACSR_ServiceTaxValueColumn {
                get {
                    return this.columnWCD_ACSR_ServiceTaxValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_ACSR_ReducedValueColumn {
                get {
                    return this.columnWCD_ACSR_ReducedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_Act_Pay_BrokerageColumn {
                get {
                    return this.columnWCD_Act_Pay_Brokerage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_Act_Pay_BrokerageDateColumn {
                get {
                    return this.columnWCD_Act_Pay_BrokerageDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AB_BranchNameColumn {
                get {
                    return this.columnAB_BranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AB_CityColumn {
                get {
                    return this.columnAB_City;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankColumn {
                get {
                    return this.columnBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECSColumn {
                get {
                    return this.columnECS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Banck_AccountColumn {
                get {
                    return this.columnBanck_Account;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Bank_branchColumn {
                get {
                    return this.columnBank_branch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PANColumn {
                get {
                    return this.columnPAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_CustomerNameColumn {
                get {
                    return this.columnWCD_CustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_CustCodeColumn {
                get {
                    return this.columnC_CustCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AR_FirstNameColumn {
                get {
                    return this.columnAR_FirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AR_EUINColumn {
                get {
                    return this.columnAR_EUIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BrokerageTypeColumn {
                get {
                    return this.columnBrokerageType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECS_MICRColumn {
                get {
                    return this.columnECS_MICR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Bank1Column {
                get {
                    return this.columnBank1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankAddressColumn {
                get {
                    return this.columnBankAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECS1Column {
                get {
                    return this.columnECS1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Banck_Account1Column {
                get {
                    return this.columnBanck_Account1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Bank_branch1Column {
                get {
                    return this.columnBank_branch1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAN1Column {
                get {
                    return this.columnPAN1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WMTT_TransactionClassificationNameColumn {
                get {
                    return this.columnWMTT_TransactionClassificationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCD_CommissionTypeColumn {
                get {
                    return this.columnWCD_CommissionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECS_AcctTypeColumn {
                get {
                    return this.columnECS_AcctType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECS_NEFTColumn {
                get {
                    return this.columnECS_NEFT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECS_MICR1Column {
                get {
                    return this.columnECS_MICR1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPROC_GetProductBrokerageApplicationWiseRow this[int index] {
                get {
                    return ((SPROC_GetProductBrokerageApplicationWiseRow)(this.Rows[index]));
                }
            }
            
            public event SPROC_GetProductBrokerageApplicationWiseRowChangeEventHandler SPROC_GetProductBrokerageApplicationWiseRowChanging;
            
            public event SPROC_GetProductBrokerageApplicationWiseRowChangeEventHandler SPROC_GetProductBrokerageApplicationWiseRowChanged;
            
            public event SPROC_GetProductBrokerageApplicationWiseRowChangeEventHandler SPROC_GetProductBrokerageApplicationWiseRowDeleting;
            
            public event SPROC_GetProductBrokerageApplicationWiseRowChangeEventHandler SPROC_GetProductBrokerageApplicationWiseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPROC_GetProductBrokerageApplicationWiseRow(SPROC_GetProductBrokerageApplicationWiseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPROC_GetProductBrokerageApplicationWiseRow AddSPROC_GetProductBrokerageApplicationWiseRow(
                        string CO_ApplicationNumber, 
                        string AAC_AgentCode, 
                        string AA_ContactPersonName, 
                        string AIM_IssueName, 
                        System.DateTime WCD_TransactionAsOnDate, 
                        decimal WCD_AllotedQty, 
                        decimal WCD_Holdings, 
                        System.DateTime WCD_Act_Rec_BrokerageDate, 
                        decimal WCD_Act_Rec_Brokerage, 
                        decimal WCD_ACSR_ServiceTaxValue, 
                        decimal WCD_ACSR_ReducedValue, 
                        decimal WCD_Act_Pay_Brokerage, 
                        System.DateTime WCD_Act_Pay_BrokerageDate, 
                        string AB_BranchName, 
                        string AB_City, 
                        int Bank, 
                        int ECS, 
                        int Banck_Account, 
                        int Bank_branch, 
                        int PAN, 
                        string WCD_CustomerName, 
                        string C_CustCode, 
                        string AR_FirstName, 
                        string AR_EUIN, 
                        string BrokerageType, 
                        int ECS_MICR, 
                        string Bank1, 
                        string BankAddress, 
                        string ECS1, 
                        string Banck_Account1, 
                        string Bank_branch1, 
                        string PAN1, 
                        string WMTT_TransactionClassificationName, 
                        string WCD_CommissionType, 
                        int ECS_AcctType, 
                        int ECS_NEFT, 
                        int ECS_MICR1) {
                SPROC_GetProductBrokerageApplicationWiseRow rowSPROC_GetProductBrokerageApplicationWiseRow = ((SPROC_GetProductBrokerageApplicationWiseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CO_ApplicationNumber,
                        AAC_AgentCode,
                        AA_ContactPersonName,
                        AIM_IssueName,
                        WCD_TransactionAsOnDate,
                        WCD_AllotedQty,
                        WCD_Holdings,
                        WCD_Act_Rec_BrokerageDate,
                        WCD_Act_Rec_Brokerage,
                        WCD_ACSR_ServiceTaxValue,
                        WCD_ACSR_ReducedValue,
                        WCD_Act_Pay_Brokerage,
                        WCD_Act_Pay_BrokerageDate,
                        AB_BranchName,
                        AB_City,
                        Bank,
                        ECS,
                        Banck_Account,
                        Bank_branch,
                        PAN,
                        WCD_CustomerName,
                        C_CustCode,
                        AR_FirstName,
                        AR_EUIN,
                        BrokerageType,
                        ECS_MICR,
                        Bank1,
                        BankAddress,
                        ECS1,
                        Banck_Account1,
                        Bank_branch1,
                        PAN1,
                        WMTT_TransactionClassificationName,
                        WCD_CommissionType,
                        ECS_AcctType,
                        ECS_NEFT,
                        ECS_MICR1};
                rowSPROC_GetProductBrokerageApplicationWiseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSPROC_GetProductBrokerageApplicationWiseRow);
                return rowSPROC_GetProductBrokerageApplicationWiseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SPROC_GetProductBrokerageApplicationWiseDataTable cln = ((SPROC_GetProductBrokerageApplicationWiseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SPROC_GetProductBrokerageApplicationWiseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCO_ApplicationNumber = base.Columns["CO_ApplicationNumber"];
                this.columnAAC_AgentCode = base.Columns["AAC_AgentCode"];
                this.columnAA_ContactPersonName = base.Columns["AA_ContactPersonName"];
                this.columnAIM_IssueName = base.Columns["AIM_IssueName"];
                this.columnWCD_TransactionAsOnDate = base.Columns["WCD_TransactionAsOnDate"];
                this.columnWCD_AllotedQty = base.Columns["WCD_AllotedQty"];
                this.columnWCD_Holdings = base.Columns["WCD_Holdings"];
                this.columnWCD_Act_Rec_BrokerageDate = base.Columns["WCD_Act_Rec_BrokerageDate"];
                this.columnWCD_Act_Rec_Brokerage = base.Columns["WCD_Act_Rec_Brokerage"];
                this.columnWCD_ACSR_ServiceTaxValue = base.Columns["WCD_ACSR_ServiceTaxValue"];
                this.columnWCD_ACSR_ReducedValue = base.Columns["WCD_ACSR_ReducedValue"];
                this.columnWCD_Act_Pay_Brokerage = base.Columns["WCD_Act_Pay_Brokerage"];
                this.columnWCD_Act_Pay_BrokerageDate = base.Columns["WCD_Act_Pay_BrokerageDate"];
                this.columnAB_BranchName = base.Columns["AB_BranchName"];
                this.columnAB_City = base.Columns["AB_City"];
                this.columnBank = base.Columns["Bank"];
                this.columnECS = base.Columns["ECS"];
                this.columnBanck_Account = base.Columns["Banck Account"];
                this.columnBank_branch = base.Columns["Bank branch"];
                this.columnPAN = base.Columns["PAN"];
                this.columnWCD_CustomerName = base.Columns["WCD_CustomerName"];
                this.columnC_CustCode = base.Columns["C_CustCode"];
                this.columnAR_FirstName = base.Columns["AR_FirstName"];
                this.columnAR_EUIN = base.Columns["AR_EUIN"];
                this.columnBrokerageType = base.Columns["BrokerageType"];
                this.columnECS_MICR = base.Columns["ECS_MICR"];
                this.columnBank1 = base.Columns["Bank1"];
                this.columnBankAddress = base.Columns["BankAddress"];
                this.columnECS1 = base.Columns["ECS1"];
                this.columnBanck_Account1 = base.Columns["Banck Account1"];
                this.columnBank_branch1 = base.Columns["Bank branch1"];
                this.columnPAN1 = base.Columns["PAN1"];
                this.columnWMTT_TransactionClassificationName = base.Columns["WMTT_TransactionClassificationName"];
                this.columnWCD_CommissionType = base.Columns["WCD_CommissionType"];
                this.columnECS_AcctType = base.Columns["ECS_AcctType"];
                this.columnECS_NEFT = base.Columns["ECS_NEFT"];
                this.columnECS_MICR1 = base.Columns["ECS_MICR1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCO_ApplicationNumber = new global::System.Data.DataColumn("CO_ApplicationNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCO_ApplicationNumber);
                this.columnAAC_AgentCode = new global::System.Data.DataColumn("AAC_AgentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAAC_AgentCode);
                this.columnAA_ContactPersonName = new global::System.Data.DataColumn("AA_ContactPersonName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAA_ContactPersonName);
                this.columnAIM_IssueName = new global::System.Data.DataColumn("AIM_IssueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAIM_IssueName);
                this.columnWCD_TransactionAsOnDate = new global::System.Data.DataColumn("WCD_TransactionAsOnDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_TransactionAsOnDate);
                this.columnWCD_AllotedQty = new global::System.Data.DataColumn("WCD_AllotedQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_AllotedQty);
                this.columnWCD_Holdings = new global::System.Data.DataColumn("WCD_Holdings", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_Holdings);
                this.columnWCD_Act_Rec_BrokerageDate = new global::System.Data.DataColumn("WCD_Act_Rec_BrokerageDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_Act_Rec_BrokerageDate);
                this.columnWCD_Act_Rec_Brokerage = new global::System.Data.DataColumn("WCD_Act_Rec_Brokerage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_Act_Rec_Brokerage);
                this.columnWCD_ACSR_ServiceTaxValue = new global::System.Data.DataColumn("WCD_ACSR_ServiceTaxValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_ACSR_ServiceTaxValue);
                this.columnWCD_ACSR_ReducedValue = new global::System.Data.DataColumn("WCD_ACSR_ReducedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_ACSR_ReducedValue);
                this.columnWCD_Act_Pay_Brokerage = new global::System.Data.DataColumn("WCD_Act_Pay_Brokerage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_Act_Pay_Brokerage);
                this.columnWCD_Act_Pay_BrokerageDate = new global::System.Data.DataColumn("WCD_Act_Pay_BrokerageDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_Act_Pay_BrokerageDate);
                this.columnAB_BranchName = new global::System.Data.DataColumn("AB_BranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_BranchName);
                this.columnAB_City = new global::System.Data.DataColumn("AB_City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_City);
                this.columnBank = new global::System.Data.DataColumn("Bank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank);
                this.columnECS = new global::System.Data.DataColumn("ECS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECS);
                this.columnBanck_Account = new global::System.Data.DataColumn("Banck Account", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBanck_Account);
                this.columnBank_branch = new global::System.Data.DataColumn("Bank branch", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank_branch);
                this.columnPAN = new global::System.Data.DataColumn("PAN", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAN);
                this.columnWCD_CustomerName = new global::System.Data.DataColumn("WCD_CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_CustomerName);
                this.columnC_CustCode = new global::System.Data.DataColumn("C_CustCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_CustCode);
                this.columnAR_FirstName = new global::System.Data.DataColumn("AR_FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAR_FirstName);
                this.columnAR_EUIN = new global::System.Data.DataColumn("AR_EUIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAR_EUIN);
                this.columnBrokerageType = new global::System.Data.DataColumn("BrokerageType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBrokerageType);
                this.columnECS_MICR = new global::System.Data.DataColumn("ECS_MICR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECS_MICR);
                this.columnBank1 = new global::System.Data.DataColumn("Bank1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank1);
                this.columnBankAddress = new global::System.Data.DataColumn("BankAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankAddress);
                this.columnECS1 = new global::System.Data.DataColumn("ECS1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECS1);
                this.columnBanck_Account1 = new global::System.Data.DataColumn("Banck Account1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBanck_Account1);
                this.columnBank_branch1 = new global::System.Data.DataColumn("Bank branch1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank_branch1);
                this.columnPAN1 = new global::System.Data.DataColumn("PAN1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAN1);
                this.columnWMTT_TransactionClassificationName = new global::System.Data.DataColumn("WMTT_TransactionClassificationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWMTT_TransactionClassificationName);
                this.columnWCD_CommissionType = new global::System.Data.DataColumn("WCD_CommissionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCD_CommissionType);
                this.columnECS_AcctType = new global::System.Data.DataColumn("ECS_AcctType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECS_AcctType);
                this.columnECS_NEFT = new global::System.Data.DataColumn("ECS_NEFT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECS_NEFT);
                this.columnECS_MICR1 = new global::System.Data.DataColumn("ECS_MICR1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECS_MICR1);
                this.columnCO_ApplicationNumber.MaxLength = 250;
                this.columnAAC_AgentCode.MaxLength = 250;
                this.columnAA_ContactPersonName.MaxLength = 250;
                this.columnAIM_IssueName.MaxLength = 150;
                this.columnAB_BranchName.MaxLength = 2147483647;
                this.columnAB_City.MaxLength = 25;
                this.columnBank.ReadOnly = true;
                this.columnECS.ReadOnly = true;
                this.columnBanck_Account.ReadOnly = true;
                this.columnBank_branch.ReadOnly = true;
                this.columnPAN.ReadOnly = true;
                this.columnWCD_CustomerName.MaxLength = 250;
                this.columnC_CustCode.MaxLength = 20;
                this.columnAR_FirstName.MaxLength = 50;
                this.columnAR_EUIN.MaxLength = 100;
                this.columnBrokerageType.ReadOnly = true;
                this.columnBrokerageType.MaxLength = 9;
                this.columnECS_MICR.ReadOnly = true;
                this.columnBank1.Caption = "Bank";
                this.columnBank1.MaxLength = 50;
                this.columnBankAddress.ReadOnly = true;
                this.columnBankAddress.MaxLength = 225;
                this.columnECS1.Caption = "ECS";
                this.columnECS1.MaxLength = 11;
                this.columnBanck_Account1.Caption = "Banck Account";
                this.columnBanck_Account1.MaxLength = 50;
                this.columnBank_branch1.Caption = "Bank branch";
                this.columnBank_branch1.MaxLength = 50;
                this.columnPAN1.Caption = "PAN";
                this.columnPAN1.MaxLength = 10;
                this.columnWMTT_TransactionClassificationName.MaxLength = 250;
                this.columnWCD_CommissionType.MaxLength = 250;
                this.columnECS_AcctType.ReadOnly = true;
                this.columnECS_NEFT.ReadOnly = true;
                this.columnECS_MICR1.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPROC_GetProductBrokerageApplicationWiseRow NewSPROC_GetProductBrokerageApplicationWiseRow() {
                return ((SPROC_GetProductBrokerageApplicationWiseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SPROC_GetProductBrokerageApplicationWiseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SPROC_GetProductBrokerageApplicationWiseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPROC_GetProductBrokerageApplicationWiseRowChanged != null)) {
                    this.SPROC_GetProductBrokerageApplicationWiseRowChanged(this, new SPROC_GetProductBrokerageApplicationWiseRowChangeEvent(((SPROC_GetProductBrokerageApplicationWiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPROC_GetProductBrokerageApplicationWiseRowChanging != null)) {
                    this.SPROC_GetProductBrokerageApplicationWiseRowChanging(this, new SPROC_GetProductBrokerageApplicationWiseRowChangeEvent(((SPROC_GetProductBrokerageApplicationWiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPROC_GetProductBrokerageApplicationWiseRowDeleted != null)) {
                    this.SPROC_GetProductBrokerageApplicationWiseRowDeleted(this, new SPROC_GetProductBrokerageApplicationWiseRowChangeEvent(((SPROC_GetProductBrokerageApplicationWiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPROC_GetProductBrokerageApplicationWiseRowDeleting != null)) {
                    this.SPROC_GetProductBrokerageApplicationWiseRowDeleting(this, new SPROC_GetProductBrokerageApplicationWiseRowChangeEvent(((SPROC_GetProductBrokerageApplicationWiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPROC_GetProductBrokerageApplicationWiseRow(SPROC_GetProductBrokerageApplicationWiseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProductBrokerageApplicationWise ds = new ProductBrokerageApplicationWise();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPROC_GetProductBrokerageApplicationWiseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPROC_GetProductBrokerageApplicationWiseRow : global::System.Data.DataRow {
            
            private SPROC_GetProductBrokerageApplicationWiseDataTable tableSPROC_GetProductBrokerageApplicationWise;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPROC_GetProductBrokerageApplicationWiseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPROC_GetProductBrokerageApplicationWise = ((SPROC_GetProductBrokerageApplicationWiseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CO_ApplicationNumber {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.CO_ApplicationNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CO_ApplicationNumber\' in table \'SPROC_GetProductBrokerageAp" +
                                "plicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.CO_ApplicationNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AAC_AgentCode {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AAC_AgentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AAC_AgentCode\' in table \'SPROC_GetProductBrokerageApplicati" +
                                "onWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AAC_AgentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AA_ContactPersonName {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AA_ContactPersonNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AA_ContactPersonName\' in table \'SPROC_GetProductBrokerageAp" +
                                "plicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AA_ContactPersonNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AIM_IssueName {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AIM_IssueNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AIM_IssueName\' in table \'SPROC_GetProductBrokerageApplicati" +
                                "onWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AIM_IssueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WCD_TransactionAsOnDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_TransactionAsOnDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_TransactionAsOnDate\' in table \'SPROC_GetProductBrokerag" +
                                "eApplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_TransactionAsOnDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WCD_AllotedQty {
                get {
                    try {
                        return ((decimal)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_AllotedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_AllotedQty\' in table \'SPROC_GetProductBrokerageApplicat" +
                                "ionWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_AllotedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WCD_Holdings {
                get {
                    try {
                        return ((decimal)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_HoldingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_Holdings\' in table \'SPROC_GetProductBrokerageApplicatio" +
                                "nWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_HoldingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WCD_Act_Rec_BrokerageDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_Act_Rec_BrokerageDate\' in table \'SPROC_GetProductBroker" +
                                "ageApplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WCD_Act_Rec_Brokerage {
                get {
                    try {
                        return ((decimal)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_Act_Rec_Brokerage\' in table \'SPROC_GetProductBrokerageA" +
                                "pplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WCD_ACSR_ServiceTaxValue {
                get {
                    try {
                        return ((decimal)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ServiceTaxValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_ACSR_ServiceTaxValue\' in table \'SPROC_GetProductBrokera" +
                                "geApplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ServiceTaxValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WCD_ACSR_ReducedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ReducedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_ACSR_ReducedValue\' in table \'SPROC_GetProductBrokerageA" +
                                "pplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ReducedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WCD_Act_Pay_Brokerage {
                get {
                    try {
                        return ((decimal)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_Act_Pay_Brokerage\' in table \'SPROC_GetProductBrokerageA" +
                                "pplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WCD_Act_Pay_BrokerageDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_Act_Pay_BrokerageDate\' in table \'SPROC_GetProductBroker" +
                                "ageApplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_BranchName {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AB_BranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AB_BranchName\' in table \'SPROC_GetProductBrokerageApplicati" +
                                "onWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AB_BranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_City {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AB_CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AB_City\' in table \'SPROC_GetProductBrokerageApplicationWise" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AB_CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Bank {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.BankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank\' in table \'SPROC_GetProductBrokerageApplicationWise\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.BankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ECS {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.ECSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECS\' in table \'SPROC_GetProductBrokerageApplicationWise\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.ECSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Banck_Account {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.Banck_AccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Banck Account\' in table \'SPROC_GetProductBrokerageApplicati" +
                                "onWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.Banck_AccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Bank_branch {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank branch\' in table \'SPROC_GetProductBrokerageApplication" +
                                "Wise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PAN {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.PANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAN\' in table \'SPROC_GetProductBrokerageApplicationWise\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.PANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WCD_CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_CustomerName\' in table \'SPROC_GetProductBrokerageApplic" +
                                "ationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_CustCode {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.C_CustCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_CustCode\' in table \'SPROC_GetProductBrokerageApplicationW" +
                                "ise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.C_CustCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AR_FirstName {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AR_FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AR_FirstName\' in table \'SPROC_GetProductBrokerageApplicatio" +
                                "nWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AR_FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AR_EUIN {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.AR_EUINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AR_EUIN\' in table \'SPROC_GetProductBrokerageApplicationWise" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.AR_EUINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BrokerageType {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.BrokerageTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BrokerageType\' in table \'SPROC_GetProductBrokerageApplicati" +
                                "onWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.BrokerageTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ECS_MICR {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECS_MICR\' in table \'SPROC_GetProductBrokerageApplicationWis" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bank1 {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank1\' in table \'SPROC_GetProductBrokerageApplicationWise\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankAddress {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.BankAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankAddress\' in table \'SPROC_GetProductBrokerageApplication" +
                                "Wise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.BankAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ECS1 {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECS1\' in table \'SPROC_GetProductBrokerageApplicationWise\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Banck_Account1 {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.Banck_Account1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Banck Account1\' in table \'SPROC_GetProductBrokerageApplicat" +
                                "ionWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.Banck_Account1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bank_branch1 {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branch1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank branch1\' in table \'SPROC_GetProductBrokerageApplicatio" +
                                "nWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branch1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAN1 {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.PAN1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAN1\' in table \'SPROC_GetProductBrokerageApplicationWise\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.PAN1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WMTT_TransactionClassificationName {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WMTT_TransactionClassificationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WMTT_TransactionClassificationName\' in table \'SPROC_GetProd" +
                                "uctBrokerageApplicationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WMTT_TransactionClassificationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WCD_CommissionType {
                get {
                    try {
                        return ((string)(this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CommissionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCD_CommissionType\' in table \'SPROC_GetProductBrokerageAppl" +
                                "icationWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CommissionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ECS_AcctType {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_AcctTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECS_AcctType\' in table \'SPROC_GetProductBrokerageApplicatio" +
                                "nWise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_AcctTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ECS_NEFT {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_NEFTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECS_NEFT\' in table \'SPROC_GetProductBrokerageApplicationWis" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_NEFTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ECS_MICR1 {
                get {
                    try {
                        return ((int)(this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICR1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECS_MICR1\' in table \'SPROC_GetProductBrokerageApplicationWi" +
                                "se\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICR1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCO_ApplicationNumberNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.CO_ApplicationNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCO_ApplicationNumberNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.CO_ApplicationNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAAC_AgentCodeNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AAC_AgentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAAC_AgentCodeNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AAC_AgentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAA_ContactPersonNameNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AA_ContactPersonNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAA_ContactPersonNameNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AA_ContactPersonNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAIM_IssueNameNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AIM_IssueNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAIM_IssueNameNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AIM_IssueNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_TransactionAsOnDateNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_TransactionAsOnDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_TransactionAsOnDateNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_TransactionAsOnDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_AllotedQtyNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_AllotedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_AllotedQtyNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_AllotedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_HoldingsNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_HoldingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_HoldingsNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_HoldingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_Act_Rec_BrokerageDateNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_Act_Rec_BrokerageDateNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_Act_Rec_BrokerageNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_Act_Rec_BrokerageNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Rec_BrokerageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_ACSR_ServiceTaxValueNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ServiceTaxValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_ACSR_ServiceTaxValueNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ServiceTaxValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_ACSR_ReducedValueNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ReducedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_ACSR_ReducedValueNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_ACSR_ReducedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_Act_Pay_BrokerageNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_Act_Pay_BrokerageNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_Act_Pay_BrokerageDateNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_Act_Pay_BrokerageDateNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_Act_Pay_BrokerageDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_BranchNameNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AB_BranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_BranchNameNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AB_BranchNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_CityNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AB_CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_CityNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AB_CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.BankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.BankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECSNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.ECSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECSNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.ECSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBanck_AccountNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.Banck_AccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBanck_AccountNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.Banck_AccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBank_branchNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBank_branchNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPANNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.PANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPANNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.PANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_CustomerNameNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_CustomerNameNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_CustCodeNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.C_CustCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_CustCodeNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.C_CustCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAR_FirstNameNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AR_FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAR_FirstNameNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AR_FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAR_EUINNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.AR_EUINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAR_EUINNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.AR_EUINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBrokerageTypeNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.BrokerageTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBrokerageTypeNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.BrokerageTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECS_MICRNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECS_MICRNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBank1Null() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.Bank1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBank1Null() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankAddressNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.BankAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankAddressNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.BankAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECS1Null() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.ECS1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECS1Null() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBanck_Account1Null() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.Banck_Account1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBanck_Account1Null() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.Banck_Account1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBank_branch1Null() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branch1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBank_branch1Null() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.Bank_branch1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAN1Null() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.PAN1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAN1Null() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.PAN1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWMTT_TransactionClassificationNameNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WMTT_TransactionClassificationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWMTT_TransactionClassificationNameNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WMTT_TransactionClassificationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCD_CommissionTypeNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CommissionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCD_CommissionTypeNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.WCD_CommissionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECS_AcctTypeNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.ECS_AcctTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECS_AcctTypeNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_AcctTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECS_NEFTNull() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.ECS_NEFTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECS_NEFTNull() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_NEFTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECS_MICR1Null() {
                return this.IsNull(this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICR1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECS_MICR1Null() {
                this[this.tableSPROC_GetProductBrokerageApplicationWise.ECS_MICR1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPROC_GetProductBrokerageApplicationWiseRowChangeEvent : global::System.EventArgs {
            
            private SPROC_GetProductBrokerageApplicationWiseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPROC_GetProductBrokerageApplicationWiseRowChangeEvent(SPROC_GetProductBrokerageApplicationWiseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPROC_GetProductBrokerageApplicationWiseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WealthERP.Reports.ProductBrokerageApplicationWiseTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPROC_GetProductBrokerageApplicationWiseTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPROC_GetProductBrokerageApplicationWiseTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPROC_GetProductBrokerageApplicationWise";
            tableMapping.ColumnMappings.Add("CO_ApplicationNumber", "CO_ApplicationNumber");
            tableMapping.ColumnMappings.Add("AAC_AgentCode", "AAC_AgentCode");
            tableMapping.ColumnMappings.Add("AA_ContactPersonName", "AA_ContactPersonName");
            tableMapping.ColumnMappings.Add("AIM_IssueName", "AIM_IssueName");
            tableMapping.ColumnMappings.Add("WCD_TransactionAsOnDate", "WCD_TransactionAsOnDate");
            tableMapping.ColumnMappings.Add("WCD_AllotedQty", "WCD_AllotedQty");
            tableMapping.ColumnMappings.Add("WCD_Holdings", "WCD_Holdings");
            tableMapping.ColumnMappings.Add("WCD_Act_Rec_BrokerageDate", "WCD_Act_Rec_BrokerageDate");
            tableMapping.ColumnMappings.Add("WCD_Act_Rec_Brokerage", "WCD_Act_Rec_Brokerage");
            tableMapping.ColumnMappings.Add("WCD_ACSR_ServiceTaxValue", "WCD_ACSR_ServiceTaxValue");
            tableMapping.ColumnMappings.Add("WCD_ACSR_ReducedValue", "WCD_ACSR_ReducedValue");
            tableMapping.ColumnMappings.Add("WCD_Act_Pay_Brokerage", "WCD_Act_Pay_Brokerage");
            tableMapping.ColumnMappings.Add("WCD_Act_Pay_BrokerageDate", "WCD_Act_Pay_BrokerageDate");
            tableMapping.ColumnMappings.Add("AB_BranchName", "AB_BranchName");
            tableMapping.ColumnMappings.Add("AB_City", "AB_City");
            tableMapping.ColumnMappings.Add("WCD_CustomerName", "WCD_CustomerName");
            tableMapping.ColumnMappings.Add("C_CustCode", "C_CustCode");
            tableMapping.ColumnMappings.Add("AR_FirstName", "AR_FirstName");
            tableMapping.ColumnMappings.Add("AR_EUIN", "AR_EUIN");
            tableMapping.ColumnMappings.Add("BrokerageType", "BrokerageType");
            tableMapping.ColumnMappings.Add("ECS_MICR", "ECS_MICR");
            tableMapping.ColumnMappings.Add("Bank", "Bank1");
            tableMapping.ColumnMappings.Add("BankAddress", "BankAddress");
            tableMapping.ColumnMappings.Add("ECS", "ECS1");
            tableMapping.ColumnMappings.Add("Banck Account", "Banck Account1");
            tableMapping.ColumnMappings.Add("Bank branch", "Bank branch1");
            tableMapping.ColumnMappings.Add("PAN", "PAN1");
            tableMapping.ColumnMappings.Add("WMTT_TransactionClassificationName", "WMTT_TransactionClassificationName");
            tableMapping.ColumnMappings.Add("WCD_CommissionType", "WCD_CommissionType");
            tableMapping.ColumnMappings.Add("ECS_AcctType", "ECS_AcctType");
            tableMapping.ColumnMappings.Add("ECS_NEFT", "ECS_NEFT");
            tableMapping.ColumnMappings.Add("ECS_MICR1", "ECS_MICR1");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["wealtherp"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPROC_GetProductBrokerageApplicationWise";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Product", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProductCategory", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IssueId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsReceivable", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Channel", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@commissionType", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AmcCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdviserId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProductBrokerageApplicationWise.SPROC_GetProductBrokerageApplicationWiseDataTable dataTable, string Product, string ProductCategory, global::System.Nullable<int> IssueId, global::System.Nullable<bool> IsReceivable, global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate, global::System.Nullable<bool> Channel, string commissionType, global::System.Nullable<int> AmcCode, global::System.Nullable<int> AdviserId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Product == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Product));
            }
            if ((ProductCategory == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ProductCategory));
            }
            if ((IssueId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(IssueId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsReceivable.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((bool)(IsReceivable.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Channel.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((bool)(Channel.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((commissionType == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(commissionType));
            }
            if ((AmcCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(AmcCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((AdviserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(AdviserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProductBrokerageApplicationWise.SPROC_GetProductBrokerageApplicationWiseDataTable GetData(string Product, string ProductCategory, global::System.Nullable<int> IssueId, global::System.Nullable<bool> IsReceivable, global::System.Nullable<global::System.DateTime> FromDate, global::System.Nullable<global::System.DateTime> ToDate, global::System.Nullable<bool> Channel, string commissionType, global::System.Nullable<int> AmcCode, global::System.Nullable<int> AdviserId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Product == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Product));
            }
            if ((ProductCategory == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ProductCategory));
            }
            if ((IssueId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(IssueId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsReceivable.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((bool)(IsReceivable.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((FromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.DateTime)(FromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(ToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Channel.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((bool)(Channel.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((commissionType == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(commissionType));
            }
            if ((AmcCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(AmcCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((AdviserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(AdviserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            ProductBrokerageApplicationWise.SPROC_GetProductBrokerageApplicationWiseDataTable dataTable = new ProductBrokerageApplicationWise.SPROC_GetProductBrokerageApplicationWiseDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ProductBrokerageApplicationWise dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ProductBrokerageApplicationWise dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ProductBrokerageApplicationWise dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ProductBrokerageApplicationWise dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591