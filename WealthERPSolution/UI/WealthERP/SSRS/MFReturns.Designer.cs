//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.SSRS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MFReturns")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MFReturns : global::System.Data.DataSet {
        
        private MFReturnDataTable tableMFReturn;
        
        private PortfolioXIRRDataTable tablePortfolioXIRR;
        
        private MFCapitalGainDataTable tableMFCapitalGain;
        
        private MFTraxnDataTable tableMFTraxn;
        
        private ReportHeaderDataTable tableReportHeader;
        
        private MFClosingBalanceDataTable tableMFClosingBalance;
        
        private MFHoldingXIRRDataTable tableMFHoldingXIRR;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MFReturns() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MFReturns(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MFReturn"] != null)) {
                    base.Tables.Add(new MFReturnDataTable(ds.Tables["MFReturn"]));
                }
                if ((ds.Tables["PortfolioXIRR"] != null)) {
                    base.Tables.Add(new PortfolioXIRRDataTable(ds.Tables["PortfolioXIRR"]));
                }
                if ((ds.Tables["MFCapitalGain"] != null)) {
                    base.Tables.Add(new MFCapitalGainDataTable(ds.Tables["MFCapitalGain"]));
                }
                if ((ds.Tables["MFTraxn"] != null)) {
                    base.Tables.Add(new MFTraxnDataTable(ds.Tables["MFTraxn"]));
                }
                if ((ds.Tables["ReportHeader"] != null)) {
                    base.Tables.Add(new ReportHeaderDataTable(ds.Tables["ReportHeader"]));
                }
                if ((ds.Tables["MFClosingBalance"] != null)) {
                    base.Tables.Add(new MFClosingBalanceDataTable(ds.Tables["MFClosingBalance"]));
                }
                if ((ds.Tables["MFHoldingXIRR"] != null)) {
                    base.Tables.Add(new MFHoldingXIRRDataTable(ds.Tables["MFHoldingXIRR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFReturnDataTable MFReturn {
            get {
                return this.tableMFReturn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortfolioXIRRDataTable PortfolioXIRR {
            get {
                return this.tablePortfolioXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFCapitalGainDataTable MFCapitalGain {
            get {
                return this.tableMFCapitalGain;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFTraxnDataTable MFTraxn {
            get {
                return this.tableMFTraxn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReportHeaderDataTable ReportHeader {
            get {
                return this.tableReportHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFClosingBalanceDataTable MFClosingBalance {
            get {
                return this.tableMFClosingBalance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MFHoldingXIRRDataTable MFHoldingXIRR {
            get {
                return this.tableMFHoldingXIRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MFReturns cln = ((MFReturns)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MFReturn"] != null)) {
                    base.Tables.Add(new MFReturnDataTable(ds.Tables["MFReturn"]));
                }
                if ((ds.Tables["PortfolioXIRR"] != null)) {
                    base.Tables.Add(new PortfolioXIRRDataTable(ds.Tables["PortfolioXIRR"]));
                }
                if ((ds.Tables["MFCapitalGain"] != null)) {
                    base.Tables.Add(new MFCapitalGainDataTable(ds.Tables["MFCapitalGain"]));
                }
                if ((ds.Tables["MFTraxn"] != null)) {
                    base.Tables.Add(new MFTraxnDataTable(ds.Tables["MFTraxn"]));
                }
                if ((ds.Tables["ReportHeader"] != null)) {
                    base.Tables.Add(new ReportHeaderDataTable(ds.Tables["ReportHeader"]));
                }
                if ((ds.Tables["MFClosingBalance"] != null)) {
                    base.Tables.Add(new MFClosingBalanceDataTable(ds.Tables["MFClosingBalance"]));
                }
                if ((ds.Tables["MFHoldingXIRR"] != null)) {
                    base.Tables.Add(new MFHoldingXIRRDataTable(ds.Tables["MFHoldingXIRR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMFReturn = ((MFReturnDataTable)(base.Tables["MFReturn"]));
            if ((initTable == true)) {
                if ((this.tableMFReturn != null)) {
                    this.tableMFReturn.InitVars();
                }
            }
            this.tablePortfolioXIRR = ((PortfolioXIRRDataTable)(base.Tables["PortfolioXIRR"]));
            if ((initTable == true)) {
                if ((this.tablePortfolioXIRR != null)) {
                    this.tablePortfolioXIRR.InitVars();
                }
            }
            this.tableMFCapitalGain = ((MFCapitalGainDataTable)(base.Tables["MFCapitalGain"]));
            if ((initTable == true)) {
                if ((this.tableMFCapitalGain != null)) {
                    this.tableMFCapitalGain.InitVars();
                }
            }
            this.tableMFTraxn = ((MFTraxnDataTable)(base.Tables["MFTraxn"]));
            if ((initTable == true)) {
                if ((this.tableMFTraxn != null)) {
                    this.tableMFTraxn.InitVars();
                }
            }
            this.tableReportHeader = ((ReportHeaderDataTable)(base.Tables["ReportHeader"]));
            if ((initTable == true)) {
                if ((this.tableReportHeader != null)) {
                    this.tableReportHeader.InitVars();
                }
            }
            this.tableMFClosingBalance = ((MFClosingBalanceDataTable)(base.Tables["MFClosingBalance"]));
            if ((initTable == true)) {
                if ((this.tableMFClosingBalance != null)) {
                    this.tableMFClosingBalance.InitVars();
                }
            }
            this.tableMFHoldingXIRR = ((MFHoldingXIRRDataTable)(base.Tables["MFHoldingXIRR"]));
            if ((initTable == true)) {
                if ((this.tableMFHoldingXIRR != null)) {
                    this.tableMFHoldingXIRR.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MFReturns";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MFReturns.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMFReturn = new MFReturnDataTable();
            base.Tables.Add(this.tableMFReturn);
            this.tablePortfolioXIRR = new PortfolioXIRRDataTable();
            base.Tables.Add(this.tablePortfolioXIRR);
            this.tableMFCapitalGain = new MFCapitalGainDataTable();
            base.Tables.Add(this.tableMFCapitalGain);
            this.tableMFTraxn = new MFTraxnDataTable();
            base.Tables.Add(this.tableMFTraxn);
            this.tableReportHeader = new ReportHeaderDataTable();
            base.Tables.Add(this.tableReportHeader);
            this.tableMFClosingBalance = new MFClosingBalanceDataTable();
            base.Tables.Add(this.tableMFClosingBalance);
            this.tableMFHoldingXIRR = new MFHoldingXIRRDataTable();
            base.Tables.Add(this.tableMFHoldingXIRR);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFReturn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortfolioXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFCapitalGain() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFTraxn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReportHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFClosingBalance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMFHoldingXIRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MFReturns ds = new MFReturns();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MFReturnRowChangeEventHandler(object sender, MFReturnRowChangeEvent e);
        
        public delegate void PortfolioXIRRRowChangeEventHandler(object sender, PortfolioXIRRRowChangeEvent e);
        
        public delegate void MFCapitalGainRowChangeEventHandler(object sender, MFCapitalGainRowChangeEvent e);
        
        public delegate void MFTraxnRowChangeEventHandler(object sender, MFTraxnRowChangeEvent e);
        
        public delegate void ReportHeaderRowChangeEventHandler(object sender, ReportHeaderRowChangeEvent e);
        
        public delegate void MFClosingBalanceRowChangeEventHandler(object sender, MFClosingBalanceRowChangeEvent e);
        
        public delegate void MFHoldingXIRRRowChangeEventHandler(object sender, MFHoldingXIRRRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFReturnDataTable : global::System.Data.TypedTableBase<MFReturnRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnInvStartDate;
            
            private global::System.Data.DataColumn columnBalanceUnits;
            
            private global::System.Data.DataColumn columnPurchaseAmt;
            
            private global::System.Data.DataColumn columnRedeemedAmt;
            
            private global::System.Data.DataColumn columnAvgPrice;
            
            private global::System.Data.DataColumn columnInvestedCost;
            
            private global::System.Data.DataColumn columnCurrentNAV;
            
            private global::System.Data.DataColumn columnCurrentNAVDate;
            
            private global::System.Data.DataColumn columnCurrentValue;
            
            private global::System.Data.DataColumn columnDVR;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnPL;
            
            private global::System.Data.DataColumn columnABS;
            
            private global::System.Data.DataColumn columnXIRR;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryName;
            
            private global::System.Data.DataColumn columnAccountNum;
            
            private global::System.Data.DataColumn columnBankName;
            
            private global::System.Data.DataColumn columnDays;
            
            private global::System.Data.DataColumn columnMOH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFReturnDataTable() {
                this.TableName = "MFReturn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFReturnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFReturnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvStartDateColumn {
                get {
                    return this.columnInvStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceUnitsColumn {
                get {
                    return this.columnBalanceUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PurchaseAmtColumn {
                get {
                    return this.columnPurchaseAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RedeemedAmtColumn {
                get {
                    return this.columnRedeemedAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgPriceColumn {
                get {
                    return this.columnAvgPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvestedCostColumn {
                get {
                    return this.columnInvestedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentNAVColumn {
                get {
                    return this.columnCurrentNAV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentNAVDateColumn {
                get {
                    return this.columnCurrentNAVDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentValueColumn {
                get {
                    return this.columnCurrentValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVRColumn {
                get {
                    return this.columnDVR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLColumn {
                get {
                    return this.columnPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ABSColumn {
                get {
                    return this.columnABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryNameColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNumColumn {
                get {
                    return this.columnAccountNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DaysColumn {
                get {
                    return this.columnDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOHColumn {
                get {
                    return this.columnMOH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFReturnRow this[int index] {
                get {
                    return ((MFReturnRow)(this.Rows[index]));
                }
            }
            
            public event MFReturnRowChangeEventHandler MFReturnRowChanging;
            
            public event MFReturnRowChangeEventHandler MFReturnRowChanged;
            
            public event MFReturnRowChangeEventHandler MFReturnRowDeleting;
            
            public event MFReturnRowChangeEventHandler MFReturnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFReturnRow(MFReturnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFReturnRow AddMFReturnRow(
                        string CustomerName, 
                        string CustomerId, 
                        string PortfolioName, 
                        string PortfolioId, 
                        string ScripName, 
                        string FolioNum, 
                        string InvStartDate, 
                        decimal BalanceUnits, 
                        string PurchaseAmt, 
                        string RedeemedAmt, 
                        double AvgPrice, 
                        string InvestedCost, 
                        string CurrentNAV, 
                        string CurrentNAVDate, 
                        string CurrentValue, 
                        string DVR, 
                        string DVP, 
                        string PL, 
                        string ABS, 
                        string XIRR, 
                        string PAIC_AssetInstrumentCategoryName, 
                        string AccountNum, 
                        string BankName, 
                        string Days, 
                        string MOH) {
                MFReturnRow rowMFReturnRow = ((MFReturnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        InvStartDate,
                        BalanceUnits,
                        PurchaseAmt,
                        RedeemedAmt,
                        AvgPrice,
                        InvestedCost,
                        CurrentNAV,
                        CurrentNAVDate,
                        CurrentValue,
                        DVR,
                        DVP,
                        PL,
                        ABS,
                        XIRR,
                        PAIC_AssetInstrumentCategoryName,
                        AccountNum,
                        BankName,
                        Days,
                        MOH};
                rowMFReturnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFReturnRow);
                return rowMFReturnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFReturnDataTable cln = ((MFReturnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFReturnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnInvStartDate = base.Columns["InvStartDate"];
                this.columnBalanceUnits = base.Columns["BalanceUnits"];
                this.columnPurchaseAmt = base.Columns["PurchaseAmt"];
                this.columnRedeemedAmt = base.Columns["RedeemedAmt"];
                this.columnAvgPrice = base.Columns["AvgPrice"];
                this.columnInvestedCost = base.Columns["InvestedCost"];
                this.columnCurrentNAV = base.Columns["CurrentNAV"];
                this.columnCurrentNAVDate = base.Columns["CurrentNAVDate"];
                this.columnCurrentValue = base.Columns["CurrentValue"];
                this.columnDVR = base.Columns["DVR"];
                this.columnDVP = base.Columns["DVP"];
                this.columnPL = base.Columns["PL"];
                this.columnABS = base.Columns["ABS"];
                this.columnXIRR = base.Columns["XIRR"];
                this.columnPAIC_AssetInstrumentCategoryName = base.Columns["PAIC_AssetInstrumentCategoryName"];
                this.columnAccountNum = base.Columns["AccountNum"];
                this.columnBankName = base.Columns["BankName"];
                this.columnDays = base.Columns["Days"];
                this.columnMOH = base.Columns["MOH"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnInvStartDate = new global::System.Data.DataColumn("InvStartDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvStartDate);
                this.columnBalanceUnits = new global::System.Data.DataColumn("BalanceUnits", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceUnits);
                this.columnPurchaseAmt = new global::System.Data.DataColumn("PurchaseAmt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseAmt);
                this.columnRedeemedAmt = new global::System.Data.DataColumn("RedeemedAmt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRedeemedAmt);
                this.columnAvgPrice = new global::System.Data.DataColumn("AvgPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgPrice);
                this.columnInvestedCost = new global::System.Data.DataColumn("InvestedCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvestedCost);
                this.columnCurrentNAV = new global::System.Data.DataColumn("CurrentNAV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentNAV);
                this.columnCurrentNAVDate = new global::System.Data.DataColumn("CurrentNAVDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentNAVDate);
                this.columnCurrentValue = new global::System.Data.DataColumn("CurrentValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentValue);
                this.columnDVR = new global::System.Data.DataColumn("DVR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVR);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnPL = new global::System.Data.DataColumn("PL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPL);
                this.columnABS = new global::System.Data.DataColumn("ABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABS);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
                this.columnPAIC_AssetInstrumentCategoryName = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryName);
                this.columnAccountNum = new global::System.Data.DataColumn("AccountNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNum);
                this.columnBankName = new global::System.Data.DataColumn("BankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnDays = new global::System.Data.DataColumn("Days", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays);
                this.columnMOH = new global::System.Data.DataColumn("MOH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOH);
                this.columnAvgPrice.DefaultValue = ((double)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFReturnRow NewMFReturnRow() {
                return ((MFReturnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFReturnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFReturnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFReturnRowChanged != null)) {
                    this.MFReturnRowChanged(this, new MFReturnRowChangeEvent(((MFReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFReturnRowChanging != null)) {
                    this.MFReturnRowChanging(this, new MFReturnRowChangeEvent(((MFReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFReturnRowDeleted != null)) {
                    this.MFReturnRowDeleted(this, new MFReturnRowChangeEvent(((MFReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFReturnRowDeleting != null)) {
                    this.MFReturnRowDeleting(this, new MFReturnRowChangeEvent(((MFReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFReturnRow(MFReturnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFReturnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortfolioXIRRDataTable : global::System.Data.TypedTableBase<PortfolioXIRRRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnXIRR;
            
            private global::System.Data.DataColumn columnABS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRDataTable() {
                this.TableName = "PortfolioXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortfolioXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ABSColumn {
                get {
                    return this.columnABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow this[int index] {
                get {
                    return ((PortfolioXIRRRow)(this.Rows[index]));
                }
            }
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowChanging;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowChanged;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowDeleting;
            
            public event PortfolioXIRRRowChangeEventHandler PortfolioXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortfolioXIRRRow(PortfolioXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow AddPortfolioXIRRRow(string CustomerName, string PortfolioName, string XIRR, string ABS) {
                PortfolioXIRRRow rowPortfolioXIRRRow = ((PortfolioXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        PortfolioName,
                        XIRR,
                        ABS};
                rowPortfolioXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortfolioXIRRRow);
                return rowPortfolioXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortfolioXIRRDataTable cln = ((PortfolioXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortfolioXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnXIRR = base.Columns["XIRR"];
                this.columnABS = base.Columns["ABS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
                this.columnABS = new global::System.Data.DataColumn("ABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABS);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow NewPortfolioXIRRRow() {
                return ((PortfolioXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortfolioXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortfolioXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortfolioXIRRRowChanged != null)) {
                    this.PortfolioXIRRRowChanged(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortfolioXIRRRowChanging != null)) {
                    this.PortfolioXIRRRowChanging(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortfolioXIRRRowDeleted != null)) {
                    this.PortfolioXIRRRowDeleted(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortfolioXIRRRowDeleting != null)) {
                    this.PortfolioXIRRRowDeleting(this, new PortfolioXIRRRowChangeEvent(((PortfolioXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortfolioXIRRRow(PortfolioXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortfolioXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFCapitalGainDataTable : global::System.Data.TypedTableBase<MFCapitalGainRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnSellDate;
            
            private global::System.Data.DataColumn columnSellRate;
            
            private global::System.Data.DataColumn columnSellAmount;
            
            private global::System.Data.DataColumn columnBuyDate;
            
            private global::System.Data.DataColumn columnBuyRate;
            
            private global::System.Data.DataColumn columnBuyAmount;
            
            private global::System.Data.DataColumn columnDays;
            
            private global::System.Data.DataColumn columnLTCG;
            
            private global::System.Data.DataColumn columnSTCG;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFCapitalGainDataTable() {
                this.TableName = "MFCapitalGain";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFCapitalGainDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFCapitalGainDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellDateColumn {
                get {
                    return this.columnSellDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellRateColumn {
                get {
                    return this.columnSellRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellAmountColumn {
                get {
                    return this.columnSellAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyDateColumn {
                get {
                    return this.columnBuyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyRateColumn {
                get {
                    return this.columnBuyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyAmountColumn {
                get {
                    return this.columnBuyAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DaysColumn {
                get {
                    return this.columnDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LTCGColumn {
                get {
                    return this.columnLTCG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STCGColumn {
                get {
                    return this.columnSTCG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryNameColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFCapitalGainRow this[int index] {
                get {
                    return ((MFCapitalGainRow)(this.Rows[index]));
                }
            }
            
            public event MFCapitalGainRowChangeEventHandler MFCapitalGainRowChanging;
            
            public event MFCapitalGainRowChangeEventHandler MFCapitalGainRowChanged;
            
            public event MFCapitalGainRowChangeEventHandler MFCapitalGainRowDeleting;
            
            public event MFCapitalGainRowChangeEventHandler MFCapitalGainRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFCapitalGainRow(MFCapitalGainRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFCapitalGainRow AddMFCapitalGainRow(
                        string CustomerName, 
                        string CustomerId, 
                        string PortfolioName, 
                        string PortfolioId, 
                        string ScripName, 
                        string FolioNum, 
                        string Units, 
                        string SellDate, 
                        string SellRate, 
                        string SellAmount, 
                        string BuyDate, 
                        string BuyRate, 
                        string BuyAmount, 
                        string Days, 
                        string LTCG, 
                        string STCG, 
                        string PAIC_AssetInstrumentCategoryName) {
                MFCapitalGainRow rowMFCapitalGainRow = ((MFCapitalGainRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        Units,
                        SellDate,
                        SellRate,
                        SellAmount,
                        BuyDate,
                        BuyRate,
                        BuyAmount,
                        Days,
                        LTCG,
                        STCG,
                        PAIC_AssetInstrumentCategoryName};
                rowMFCapitalGainRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFCapitalGainRow);
                return rowMFCapitalGainRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFCapitalGainDataTable cln = ((MFCapitalGainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFCapitalGainDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnUnits = base.Columns["Units"];
                this.columnSellDate = base.Columns["SellDate"];
                this.columnSellRate = base.Columns["SellRate"];
                this.columnSellAmount = base.Columns["SellAmount"];
                this.columnBuyDate = base.Columns["BuyDate"];
                this.columnBuyRate = base.Columns["BuyRate"];
                this.columnBuyAmount = base.Columns["BuyAmount"];
                this.columnDays = base.Columns["Days"];
                this.columnLTCG = base.Columns["LTCG"];
                this.columnSTCG = base.Columns["STCG"];
                this.columnPAIC_AssetInstrumentCategoryName = base.Columns["PAIC_AssetInstrumentCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnSellDate = new global::System.Data.DataColumn("SellDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellDate);
                this.columnSellRate = new global::System.Data.DataColumn("SellRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellRate);
                this.columnSellAmount = new global::System.Data.DataColumn("SellAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellAmount);
                this.columnBuyDate = new global::System.Data.DataColumn("BuyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyDate);
                this.columnBuyRate = new global::System.Data.DataColumn("BuyRate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyRate);
                this.columnBuyAmount = new global::System.Data.DataColumn("BuyAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyAmount);
                this.columnDays = new global::System.Data.DataColumn("Days", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays);
                this.columnLTCG = new global::System.Data.DataColumn("LTCG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLTCG);
                this.columnSTCG = new global::System.Data.DataColumn("STCG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTCG);
                this.columnPAIC_AssetInstrumentCategoryName = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFCapitalGainRow NewMFCapitalGainRow() {
                return ((MFCapitalGainRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFCapitalGainRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFCapitalGainRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFCapitalGainRowChanged != null)) {
                    this.MFCapitalGainRowChanged(this, new MFCapitalGainRowChangeEvent(((MFCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFCapitalGainRowChanging != null)) {
                    this.MFCapitalGainRowChanging(this, new MFCapitalGainRowChangeEvent(((MFCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFCapitalGainRowDeleted != null)) {
                    this.MFCapitalGainRowDeleted(this, new MFCapitalGainRowChangeEvent(((MFCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFCapitalGainRowDeleting != null)) {
                    this.MFCapitalGainRowDeleting(this, new MFCapitalGainRowChangeEvent(((MFCapitalGainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFCapitalGainRow(MFCapitalGainRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFCapitalGainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFTraxnDataTable : global::System.Data.TypedTableBase<MFTraxnRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnCreditUnits;
            
            private global::System.Data.DataColumn columnCreditAmount;
            
            private global::System.Data.DataColumn columnDebitUnits;
            
            private global::System.Data.DataColumn columnDebitAmount;
            
            private global::System.Data.DataColumn columnDVP;
            
            private global::System.Data.DataColumn columnTranxnType;
            
            private global::System.Data.DataColumn columnPAIC_AssetInstrumentCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFTraxnDataTable() {
                this.TableName = "MFTraxn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFTraxnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFTraxnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditUnitsColumn {
                get {
                    return this.columnCreditUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditAmountColumn {
                get {
                    return this.columnCreditAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitUnitsColumn {
                get {
                    return this.columnDebitUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitAmountColumn {
                get {
                    return this.columnDebitAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVPColumn {
                get {
                    return this.columnDVP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TranxnTypeColumn {
                get {
                    return this.columnTranxnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAIC_AssetInstrumentCategoryNameColumn {
                get {
                    return this.columnPAIC_AssetInstrumentCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFTraxnRow this[int index] {
                get {
                    return ((MFTraxnRow)(this.Rows[index]));
                }
            }
            
            public event MFTraxnRowChangeEventHandler MFTraxnRowChanging;
            
            public event MFTraxnRowChangeEventHandler MFTraxnRowChanged;
            
            public event MFTraxnRowChangeEventHandler MFTraxnRowDeleting;
            
            public event MFTraxnRowChangeEventHandler MFTraxnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFTraxnRow(MFTraxnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFTraxnRow AddMFTraxnRow(string CustomerName, string CustomerId, string PortfolioName, string PortfolioId, string ScripName, string FolioNum, string TransactionDate, decimal Price, string CreditUnits, string CreditAmount, double DebitUnits, string DebitAmount, string DVP, string TranxnType, string PAIC_AssetInstrumentCategoryName) {
                MFTraxnRow rowMFTraxnRow = ((MFTraxnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        TransactionDate,
                        Price,
                        CreditUnits,
                        CreditAmount,
                        DebitUnits,
                        DebitAmount,
                        DVP,
                        TranxnType,
                        PAIC_AssetInstrumentCategoryName};
                rowMFTraxnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFTraxnRow);
                return rowMFTraxnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFTraxnDataTable cln = ((MFTraxnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFTraxnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
                this.columnPrice = base.Columns["Price"];
                this.columnCreditUnits = base.Columns["CreditUnits"];
                this.columnCreditAmount = base.Columns["CreditAmount"];
                this.columnDebitUnits = base.Columns["DebitUnits"];
                this.columnDebitAmount = base.Columns["DebitAmount"];
                this.columnDVP = base.Columns["DVP"];
                this.columnTranxnType = base.Columns["TranxnType"];
                this.columnPAIC_AssetInstrumentCategoryName = base.Columns["PAIC_AssetInstrumentCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnCreditUnits = new global::System.Data.DataColumn("CreditUnits", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditUnits);
                this.columnCreditAmount = new global::System.Data.DataColumn("CreditAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditAmount);
                this.columnDebitUnits = new global::System.Data.DataColumn("DebitUnits", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitUnits);
                this.columnDebitAmount = new global::System.Data.DataColumn("DebitAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitAmount);
                this.columnDVP = new global::System.Data.DataColumn("DVP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVP);
                this.columnTranxnType = new global::System.Data.DataColumn("TranxnType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTranxnType);
                this.columnPAIC_AssetInstrumentCategoryName = new global::System.Data.DataColumn("PAIC_AssetInstrumentCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAIC_AssetInstrumentCategoryName);
                this.columnTransactionDate.Caption = "InvStartDate";
                this.columnPrice.Caption = "BalanceUnits";
                this.columnCreditUnits.Caption = "PurchaseAmt";
                this.columnCreditAmount.Caption = "RedeemedAmt";
                this.columnDebitUnits.Caption = "AvgPrice";
                this.columnDebitUnits.DefaultValue = ((double)(0));
                this.columnDebitAmount.Caption = "InvestedCost";
                this.columnTranxnType.Caption = "CurrentNAV";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFTraxnRow NewMFTraxnRow() {
                return ((MFTraxnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFTraxnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFTraxnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFTraxnRowChanged != null)) {
                    this.MFTraxnRowChanged(this, new MFTraxnRowChangeEvent(((MFTraxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFTraxnRowChanging != null)) {
                    this.MFTraxnRowChanging(this, new MFTraxnRowChangeEvent(((MFTraxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFTraxnRowDeleted != null)) {
                    this.MFTraxnRowDeleted(this, new MFTraxnRowChangeEvent(((MFTraxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFTraxnRowDeleting != null)) {
                    this.MFTraxnRowDeleting(this, new MFTraxnRowChangeEvent(((MFTraxnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFTraxnRow(MFTraxnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFTraxnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReportHeaderDataTable : global::System.Data.TypedTableBase<ReportHeaderRow> {
            
            private global::System.Data.DataColumn columnHeader1;
            
            private global::System.Data.DataColumn columnHeader2;
            
            private global::System.Data.DataColumn columnHeader3;
            
            private global::System.Data.DataColumn columnHeader4;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderDataTable() {
                this.TableName = "ReportHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReportHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header1Column {
                get {
                    return this.columnHeader1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header2Column {
                get {
                    return this.columnHeader2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header3Column {
                get {
                    return this.columnHeader3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Header4Column {
                get {
                    return this.columnHeader4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow this[int index] {
                get {
                    return ((ReportHeaderRow)(this.Rows[index]));
                }
            }
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowChanging;
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowChanged;
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowDeleting;
            
            public event ReportHeaderRowChangeEventHandler ReportHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReportHeaderRow(ReportHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow AddReportHeaderRow(string Header1, string Header2, string Header3, string Header4) {
                ReportHeaderRow rowReportHeaderRow = ((ReportHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Header1,
                        Header2,
                        Header3,
                        Header4};
                rowReportHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReportHeaderRow);
                return rowReportHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReportHeaderDataTable cln = ((ReportHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReportHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeader1 = base.Columns["Header1"];
                this.columnHeader2 = base.Columns["Header2"];
                this.columnHeader3 = base.Columns["Header3"];
                this.columnHeader4 = base.Columns["Header4"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeader1 = new global::System.Data.DataColumn("Header1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader1);
                this.columnHeader2 = new global::System.Data.DataColumn("Header2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader2);
                this.columnHeader3 = new global::System.Data.DataColumn("Header3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader3);
                this.columnHeader4 = new global::System.Data.DataColumn("Header4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader4);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow NewReportHeaderRow() {
                return ((ReportHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReportHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReportHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReportHeaderRowChanged != null)) {
                    this.ReportHeaderRowChanged(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReportHeaderRowChanging != null)) {
                    this.ReportHeaderRowChanging(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReportHeaderRowDeleted != null)) {
                    this.ReportHeaderRowDeleted(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReportHeaderRowDeleting != null)) {
                    this.ReportHeaderRowDeleting(this, new ReportHeaderRowChangeEvent(((ReportHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReportHeaderRow(ReportHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReportHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFClosingBalanceDataTable : global::System.Data.TypedTableBase<MFClosingBalanceRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnOpen;
            
            private global::System.Data.DataColumn columnTranxnType;
            
            private global::System.Data.DataColumn columnBuySell;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFClosingBalanceDataTable() {
                this.TableName = "MFClosingBalance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFClosingBalanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFClosingBalanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenColumn {
                get {
                    return this.columnOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TranxnTypeColumn {
                get {
                    return this.columnTranxnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuySellColumn {
                get {
                    return this.columnBuySell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFClosingBalanceRow this[int index] {
                get {
                    return ((MFClosingBalanceRow)(this.Rows[index]));
                }
            }
            
            public event MFClosingBalanceRowChangeEventHandler MFClosingBalanceRowChanging;
            
            public event MFClosingBalanceRowChangeEventHandler MFClosingBalanceRowChanged;
            
            public event MFClosingBalanceRowChangeEventHandler MFClosingBalanceRowDeleting;
            
            public event MFClosingBalanceRowChangeEventHandler MFClosingBalanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFClosingBalanceRow(MFClosingBalanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFClosingBalanceRow AddMFClosingBalanceRow(string CustomerName, string CustomerId, string PortfolioName, string PortfolioId, string ScripName, string FolioNum, string TransactionDate, decimal Price, string Units, string Amount, double Open, string TranxnType, string BuySell) {
                MFClosingBalanceRow rowMFClosingBalanceRow = ((MFClosingBalanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        CustomerId,
                        PortfolioName,
                        PortfolioId,
                        ScripName,
                        FolioNum,
                        TransactionDate,
                        Price,
                        Units,
                        Amount,
                        Open,
                        TranxnType,
                        BuySell};
                rowMFClosingBalanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFClosingBalanceRow);
                return rowMFClosingBalanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFClosingBalanceDataTable cln = ((MFClosingBalanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFClosingBalanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
                this.columnPrice = base.Columns["Price"];
                this.columnUnits = base.Columns["Units"];
                this.columnAmount = base.Columns["Amount"];
                this.columnOpen = base.Columns["Open"];
                this.columnTranxnType = base.Columns["TranxnType"];
                this.columnBuySell = base.Columns["BuySell"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnOpen = new global::System.Data.DataColumn("Open", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpen);
                this.columnTranxnType = new global::System.Data.DataColumn("TranxnType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTranxnType);
                this.columnBuySell = new global::System.Data.DataColumn("BuySell", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuySell);
                this.columnTransactionDate.Caption = "InvStartDate";
                this.columnPrice.Caption = "BalanceUnits";
                this.columnUnits.Caption = "PurchaseAmt";
                this.columnAmount.Caption = "RedeemedAmt";
                this.columnOpen.Caption = "AvgPrice";
                this.columnOpen.DefaultValue = ((double)(0));
                this.columnTranxnType.Caption = "CurrentNAV";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFClosingBalanceRow NewMFClosingBalanceRow() {
                return ((MFClosingBalanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFClosingBalanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFClosingBalanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFClosingBalanceRowChanged != null)) {
                    this.MFClosingBalanceRowChanged(this, new MFClosingBalanceRowChangeEvent(((MFClosingBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFClosingBalanceRowChanging != null)) {
                    this.MFClosingBalanceRowChanging(this, new MFClosingBalanceRowChangeEvent(((MFClosingBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFClosingBalanceRowDeleted != null)) {
                    this.MFClosingBalanceRowDeleted(this, new MFClosingBalanceRowChangeEvent(((MFClosingBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFClosingBalanceRowDeleting != null)) {
                    this.MFClosingBalanceRowDeleting(this, new MFClosingBalanceRowChangeEvent(((MFClosingBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFClosingBalanceRow(MFClosingBalanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFClosingBalanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MFHoldingXIRRDataTable : global::System.Data.TypedTableBase<MFHoldingXIRRRow> {
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnFolioNum;
            
            private global::System.Data.DataColumn columnScripName;
            
            private global::System.Data.DataColumn columnXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFHoldingXIRRDataTable() {
                this.TableName = "MFHoldingXIRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFHoldingXIRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MFHoldingXIRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolioNumColumn {
                get {
                    return this.columnFolioNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScripNameColumn {
                get {
                    return this.columnScripName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XIRRColumn {
                get {
                    return this.columnXIRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFHoldingXIRRRow this[int index] {
                get {
                    return ((MFHoldingXIRRRow)(this.Rows[index]));
                }
            }
            
            public event MFHoldingXIRRRowChangeEventHandler MFHoldingXIRRRowChanging;
            
            public event MFHoldingXIRRRowChangeEventHandler MFHoldingXIRRRowChanged;
            
            public event MFHoldingXIRRRowChangeEventHandler MFHoldingXIRRRowDeleting;
            
            public event MFHoldingXIRRRowChangeEventHandler MFHoldingXIRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMFHoldingXIRRRow(MFHoldingXIRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFHoldingXIRRRow AddMFHoldingXIRRRow(string CustomerId, string PortfolioId, string FolioNum, string ScripName, string XIRR) {
                MFHoldingXIRRRow rowMFHoldingXIRRRow = ((MFHoldingXIRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerId,
                        PortfolioId,
                        FolioNum,
                        ScripName,
                        XIRR};
                rowMFHoldingXIRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMFHoldingXIRRRow);
                return rowMFHoldingXIRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MFHoldingXIRRDataTable cln = ((MFHoldingXIRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MFHoldingXIRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnFolioNum = base.Columns["FolioNum"];
                this.columnScripName = base.Columns["ScripName"];
                this.columnXIRR = base.Columns["XIRR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnFolioNum = new global::System.Data.DataColumn("FolioNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolioNum);
                this.columnScripName = new global::System.Data.DataColumn("ScripName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScripName);
                this.columnXIRR = new global::System.Data.DataColumn("XIRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIRR);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFHoldingXIRRRow NewMFHoldingXIRRRow() {
                return ((MFHoldingXIRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MFHoldingXIRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MFHoldingXIRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MFHoldingXIRRRowChanged != null)) {
                    this.MFHoldingXIRRRowChanged(this, new MFHoldingXIRRRowChangeEvent(((MFHoldingXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MFHoldingXIRRRowChanging != null)) {
                    this.MFHoldingXIRRRowChanging(this, new MFHoldingXIRRRowChangeEvent(((MFHoldingXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MFHoldingXIRRRowDeleted != null)) {
                    this.MFHoldingXIRRRowDeleted(this, new MFHoldingXIRRRowChangeEvent(((MFHoldingXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MFHoldingXIRRRowDeleting != null)) {
                    this.MFHoldingXIRRRowDeleting(this, new MFHoldingXIRRRowChangeEvent(((MFHoldingXIRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMFHoldingXIRRRow(MFHoldingXIRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFReturns ds = new MFReturns();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MFHoldingXIRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFReturnRow : global::System.Data.DataRow {
            
            private MFReturnDataTable tableMFReturn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFReturnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFReturn = ((MFReturnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvStartDate {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.InvStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvStartDate\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.InvStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BalanceUnits {
                get {
                    try {
                        return ((decimal)(this[this.tableMFReturn.BalanceUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BalanceUnits\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.BalanceUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PurchaseAmt {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.PurchaseAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchaseAmt\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.PurchaseAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RedeemedAmt {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.RedeemedAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RedeemedAmt\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.RedeemedAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AvgPrice {
                get {
                    try {
                        return ((double)(this[this.tableMFReturn.AvgPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgPrice\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.AvgPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvestedCost {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.InvestedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvestedCost\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.InvestedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentNAV {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.CurrentNAVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentNAV\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.CurrentNAVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentNAVDate {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.CurrentNAVDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentNAVDate\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.CurrentNAVDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentValue {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.CurrentValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentValue\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.CurrentValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVR {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.DVRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVR\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.DVRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVP {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PL {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.PLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PL\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.PLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABS {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.ABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABS\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.ABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XIRR {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.PAIC_AssetInstrumentCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryName\' in table \'MFReturn\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.PAIC_AssetInstrumentCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNum {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.AccountNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountNum\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.AccountNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.BankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankName\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.BankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Days {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.DaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.DaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOH {
                get {
                    try {
                        return ((string)(this[this.tableMFReturn.MOHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOH\' in table \'MFReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFReturn.MOHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFReturn.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFReturn.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableMFReturn.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableMFReturn.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFReturn.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFReturn.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableMFReturn.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableMFReturn.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableMFReturn.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableMFReturn.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableMFReturn.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableMFReturn.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvStartDateNull() {
                return this.IsNull(this.tableMFReturn.InvStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvStartDateNull() {
                this[this.tableMFReturn.InvStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceUnitsNull() {
                return this.IsNull(this.tableMFReturn.BalanceUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceUnitsNull() {
                this[this.tableMFReturn.BalanceUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaseAmtNull() {
                return this.IsNull(this.tableMFReturn.PurchaseAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchaseAmtNull() {
                this[this.tableMFReturn.PurchaseAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRedeemedAmtNull() {
                return this.IsNull(this.tableMFReturn.RedeemedAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRedeemedAmtNull() {
                this[this.tableMFReturn.RedeemedAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgPriceNull() {
                return this.IsNull(this.tableMFReturn.AvgPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgPriceNull() {
                this[this.tableMFReturn.AvgPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvestedCostNull() {
                return this.IsNull(this.tableMFReturn.InvestedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvestedCostNull() {
                this[this.tableMFReturn.InvestedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentNAVNull() {
                return this.IsNull(this.tableMFReturn.CurrentNAVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentNAVNull() {
                this[this.tableMFReturn.CurrentNAVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentNAVDateNull() {
                return this.IsNull(this.tableMFReturn.CurrentNAVDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentNAVDateNull() {
                this[this.tableMFReturn.CurrentNAVDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentValueNull() {
                return this.IsNull(this.tableMFReturn.CurrentValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentValueNull() {
                this[this.tableMFReturn.CurrentValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVRNull() {
                return this.IsNull(this.tableMFReturn.DVRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVRNull() {
                this[this.tableMFReturn.DVRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableMFReturn.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableMFReturn.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLNull() {
                return this.IsNull(this.tableMFReturn.PLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLNull() {
                this[this.tableMFReturn.PLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABSNull() {
                return this.IsNull(this.tableMFReturn.ABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABSNull() {
                this[this.tableMFReturn.ABSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tableMFReturn.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tableMFReturn.XIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryNameNull() {
                return this.IsNull(this.tableMFReturn.PAIC_AssetInstrumentCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryNameNull() {
                this[this.tableMFReturn.PAIC_AssetInstrumentCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNumNull() {
                return this.IsNull(this.tableMFReturn.AccountNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNumNull() {
                this[this.tableMFReturn.AccountNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableMFReturn.BankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableMFReturn.BankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysNull() {
                return this.IsNull(this.tableMFReturn.DaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysNull() {
                this[this.tableMFReturn.DaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOHNull() {
                return this.IsNull(this.tableMFReturn.MOHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOHNull() {
                this[this.tableMFReturn.MOHColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortfolioXIRRRow : global::System.Data.DataRow {
            
            private PortfolioXIRRDataTable tablePortfolioXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortfolioXIRR = ((PortfolioXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XIRR {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABS {
                get {
                    try {
                        return ((string)(this[this.tablePortfolioXIRR.ABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABS\' in table \'PortfolioXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePortfolioXIRR.ABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tablePortfolioXIRR.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tablePortfolioXIRR.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tablePortfolioXIRR.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tablePortfolioXIRR.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tablePortfolioXIRR.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tablePortfolioXIRR.XIRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABSNull() {
                return this.IsNull(this.tablePortfolioXIRR.ABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABSNull() {
                this[this.tablePortfolioXIRR.ABSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFCapitalGainRow : global::System.Data.DataRow {
            
            private MFCapitalGainDataTable tableMFCapitalGain;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFCapitalGainRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFCapitalGain = ((MFCapitalGainDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SellDate {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.SellDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellDate\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.SellDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SellRate {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.SellRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellRate\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.SellRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SellAmount {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.SellAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellAmount\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.SellAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyDate {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.BuyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyDate\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.BuyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyRate {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.BuyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyRate\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.BuyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyAmount {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.BuyAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyAmount\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.BuyAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Days {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.DaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.DaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LTCG {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.LTCGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LTCG\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.LTCGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STCG {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.STCGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STCG\' in table \'MFCapitalGain\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.STCGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableMFCapitalGain.PAIC_AssetInstrumentCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryName\' in table \'MFCapitalGain\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFCapitalGain.PAIC_AssetInstrumentCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFCapitalGain.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFCapitalGain.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableMFCapitalGain.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableMFCapitalGain.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFCapitalGain.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFCapitalGain.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableMFCapitalGain.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableMFCapitalGain.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableMFCapitalGain.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableMFCapitalGain.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableMFCapitalGain.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableMFCapitalGain.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableMFCapitalGain.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableMFCapitalGain.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellDateNull() {
                return this.IsNull(this.tableMFCapitalGain.SellDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellDateNull() {
                this[this.tableMFCapitalGain.SellDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellRateNull() {
                return this.IsNull(this.tableMFCapitalGain.SellRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellRateNull() {
                this[this.tableMFCapitalGain.SellRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellAmountNull() {
                return this.IsNull(this.tableMFCapitalGain.SellAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellAmountNull() {
                this[this.tableMFCapitalGain.SellAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyDateNull() {
                return this.IsNull(this.tableMFCapitalGain.BuyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyDateNull() {
                this[this.tableMFCapitalGain.BuyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyRateNull() {
                return this.IsNull(this.tableMFCapitalGain.BuyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyRateNull() {
                this[this.tableMFCapitalGain.BuyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyAmountNull() {
                return this.IsNull(this.tableMFCapitalGain.BuyAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyAmountNull() {
                this[this.tableMFCapitalGain.BuyAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysNull() {
                return this.IsNull(this.tableMFCapitalGain.DaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysNull() {
                this[this.tableMFCapitalGain.DaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLTCGNull() {
                return this.IsNull(this.tableMFCapitalGain.LTCGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLTCGNull() {
                this[this.tableMFCapitalGain.LTCGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTCGNull() {
                return this.IsNull(this.tableMFCapitalGain.STCGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTCGNull() {
                this[this.tableMFCapitalGain.STCGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryNameNull() {
                return this.IsNull(this.tableMFCapitalGain.PAIC_AssetInstrumentCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryNameNull() {
                this[this.tableMFCapitalGain.PAIC_AssetInstrumentCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFTraxnRow : global::System.Data.DataRow {
            
            private MFTraxnDataTable tableMFTraxn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFTraxnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFTraxn = ((MFTraxnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionDate {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.TransactionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionDate\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableMFTraxn.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditUnits {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.CreditUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditUnits\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.CreditUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditAmount {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.CreditAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditAmount\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.CreditAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DebitUnits {
                get {
                    try {
                        return ((double)(this[this.tableMFTraxn.DebitUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebitUnits\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.DebitUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebitAmount {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.DebitAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebitAmount\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.DebitAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVP {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.DVPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVP\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.DVPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TranxnType {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.TranxnTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TranxnType\' in table \'MFTraxn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.TranxnTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAIC_AssetInstrumentCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableMFTraxn.PAIC_AssetInstrumentCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAIC_AssetInstrumentCategoryName\' in table \'MFTraxn\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableMFTraxn.PAIC_AssetInstrumentCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFTraxn.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFTraxn.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableMFTraxn.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableMFTraxn.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFTraxn.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFTraxn.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableMFTraxn.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableMFTraxn.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableMFTraxn.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableMFTraxn.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableMFTraxn.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableMFTraxn.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionDateNull() {
                return this.IsNull(this.tableMFTraxn.TransactionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionDateNull() {
                this[this.tableMFTraxn.TransactionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableMFTraxn.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableMFTraxn.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditUnitsNull() {
                return this.IsNull(this.tableMFTraxn.CreditUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditUnitsNull() {
                this[this.tableMFTraxn.CreditUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditAmountNull() {
                return this.IsNull(this.tableMFTraxn.CreditAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditAmountNull() {
                this[this.tableMFTraxn.CreditAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitUnitsNull() {
                return this.IsNull(this.tableMFTraxn.DebitUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitUnitsNull() {
                this[this.tableMFTraxn.DebitUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitAmountNull() {
                return this.IsNull(this.tableMFTraxn.DebitAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitAmountNull() {
                this[this.tableMFTraxn.DebitAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVPNull() {
                return this.IsNull(this.tableMFTraxn.DVPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVPNull() {
                this[this.tableMFTraxn.DVPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTranxnTypeNull() {
                return this.IsNull(this.tableMFTraxn.TranxnTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTranxnTypeNull() {
                this[this.tableMFTraxn.TranxnTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAIC_AssetInstrumentCategoryNameNull() {
                return this.IsNull(this.tableMFTraxn.PAIC_AssetInstrumentCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAIC_AssetInstrumentCategoryNameNull() {
                this[this.tableMFTraxn.PAIC_AssetInstrumentCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReportHeaderRow : global::System.Data.DataRow {
            
            private ReportHeaderDataTable tableReportHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReportHeader = ((ReportHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header1 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header1\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header2 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header2\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header3 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header3\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Header4 {
                get {
                    try {
                        return ((string)(this[this.tableReportHeader.Header4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Header4\' in table \'ReportHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportHeader.Header4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader1Null() {
                return this.IsNull(this.tableReportHeader.Header1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader1Null() {
                this[this.tableReportHeader.Header1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader2Null() {
                return this.IsNull(this.tableReportHeader.Header2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader2Null() {
                this[this.tableReportHeader.Header2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader3Null() {
                return this.IsNull(this.tableReportHeader.Header3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader3Null() {
                this[this.tableReportHeader.Header3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeader4Null() {
                return this.IsNull(this.tableReportHeader.Header4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeader4Null() {
                this[this.tableReportHeader.Header4Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFClosingBalanceRow : global::System.Data.DataRow {
            
            private MFClosingBalanceDataTable tableMFClosingBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFClosingBalanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFClosingBalance = ((MFClosingBalanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.PortfolioNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioName\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.PortfolioNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionDate {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.TransactionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionDate\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableMFClosingBalance.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Amount {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Open {
                get {
                    try {
                        return ((double)(this[this.tableMFClosingBalance.OpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Open\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.OpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TranxnType {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.TranxnTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TranxnType\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.TranxnTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuySell {
                get {
                    try {
                        return ((string)(this[this.tableMFClosingBalance.BuySellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuySell\' in table \'MFClosingBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFClosingBalance.BuySellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableMFClosingBalance.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableMFClosingBalance.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableMFClosingBalance.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableMFClosingBalance.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioNameNull() {
                return this.IsNull(this.tableMFClosingBalance.PortfolioNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioNameNull() {
                this[this.tableMFClosingBalance.PortfolioNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableMFClosingBalance.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableMFClosingBalance.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableMFClosingBalance.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableMFClosingBalance.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableMFClosingBalance.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableMFClosingBalance.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionDateNull() {
                return this.IsNull(this.tableMFClosingBalance.TransactionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionDateNull() {
                this[this.tableMFClosingBalance.TransactionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableMFClosingBalance.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableMFClosingBalance.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableMFClosingBalance.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableMFClosingBalance.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableMFClosingBalance.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableMFClosingBalance.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenNull() {
                return this.IsNull(this.tableMFClosingBalance.OpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpenNull() {
                this[this.tableMFClosingBalance.OpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTranxnTypeNull() {
                return this.IsNull(this.tableMFClosingBalance.TranxnTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTranxnTypeNull() {
                this[this.tableMFClosingBalance.TranxnTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuySellNull() {
                return this.IsNull(this.tableMFClosingBalance.BuySellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuySellNull() {
                this[this.tableMFClosingBalance.BuySellColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MFHoldingXIRRRow : global::System.Data.DataRow {
            
            private MFHoldingXIRRDataTable tableMFHoldingXIRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MFHoldingXIRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMFHoldingXIRR = ((MFHoldingXIRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tableMFHoldingXIRR.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'MFHoldingXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFHoldingXIRR.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioId {
                get {
                    try {
                        return ((string)(this[this.tableMFHoldingXIRR.PortfolioIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioId\' in table \'MFHoldingXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFHoldingXIRR.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FolioNum {
                get {
                    try {
                        return ((string)(this[this.tableMFHoldingXIRR.FolioNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FolioNum\' in table \'MFHoldingXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFHoldingXIRR.FolioNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScripName {
                get {
                    try {
                        return ((string)(this[this.tableMFHoldingXIRR.ScripNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScripName\' in table \'MFHoldingXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFHoldingXIRR.ScripNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XIRR {
                get {
                    try {
                        return ((string)(this[this.tableMFHoldingXIRR.XIRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XIRR\' in table \'MFHoldingXIRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMFHoldingXIRR.XIRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableMFHoldingXIRR.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableMFHoldingXIRR.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioIdNull() {
                return this.IsNull(this.tableMFHoldingXIRR.PortfolioIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioIdNull() {
                this[this.tableMFHoldingXIRR.PortfolioIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFolioNumNull() {
                return this.IsNull(this.tableMFHoldingXIRR.FolioNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFolioNumNull() {
                this[this.tableMFHoldingXIRR.FolioNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScripNameNull() {
                return this.IsNull(this.tableMFHoldingXIRR.ScripNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScripNameNull() {
                this[this.tableMFHoldingXIRR.ScripNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXIRRNull() {
                return this.IsNull(this.tableMFHoldingXIRR.XIRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXIRRNull() {
                this[this.tableMFHoldingXIRR.XIRRColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFReturnRowChangeEvent : global::System.EventArgs {
            
            private MFReturnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFReturnRowChangeEvent(MFReturnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFReturnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortfolioXIRRRowChangeEvent : global::System.EventArgs {
            
            private PortfolioXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRowChangeEvent(PortfolioXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFCapitalGainRowChangeEvent : global::System.EventArgs {
            
            private MFCapitalGainRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFCapitalGainRowChangeEvent(MFCapitalGainRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFCapitalGainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFTraxnRowChangeEvent : global::System.EventArgs {
            
            private MFTraxnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFTraxnRowChangeEvent(MFTraxnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFTraxnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReportHeaderRowChangeEvent : global::System.EventArgs {
            
            private ReportHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRowChangeEvent(ReportHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFClosingBalanceRowChangeEvent : global::System.EventArgs {
            
            private MFClosingBalanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFClosingBalanceRowChangeEvent(MFClosingBalanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFClosingBalanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MFHoldingXIRRRowChangeEvent : global::System.EventArgs {
            
            private MFHoldingXIRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFHoldingXIRRRowChangeEvent(MFHoldingXIRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MFHoldingXIRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591