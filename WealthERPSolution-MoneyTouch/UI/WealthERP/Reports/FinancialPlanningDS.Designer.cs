//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WealthERP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FinancialPlanningDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FinancialPlanningDS : global::System.Data.DataSet {
        
        private GoalDataTable tableGoal;
        
        private RiskProfileDataTable tableRiskProfile;
        
        private FamilyDetailsDataTable tableFamilyDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FinancialPlanningDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FinancialPlanningDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Goal"] != null)) {
                    base.Tables.Add(new GoalDataTable(ds.Tables["Goal"]));
                }
                if ((ds.Tables["RiskProfile"] != null)) {
                    base.Tables.Add(new RiskProfileDataTable(ds.Tables["RiskProfile"]));
                }
                if ((ds.Tables["FamilyDetails"] != null)) {
                    base.Tables.Add(new FamilyDetailsDataTable(ds.Tables["FamilyDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GoalDataTable Goal {
            get {
                return this.tableGoal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RiskProfileDataTable RiskProfile {
            get {
                return this.tableRiskProfile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FamilyDetailsDataTable FamilyDetails {
            get {
                return this.tableFamilyDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FinancialPlanningDS cln = ((FinancialPlanningDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Goal"] != null)) {
                    base.Tables.Add(new GoalDataTable(ds.Tables["Goal"]));
                }
                if ((ds.Tables["RiskProfile"] != null)) {
                    base.Tables.Add(new RiskProfileDataTable(ds.Tables["RiskProfile"]));
                }
                if ((ds.Tables["FamilyDetails"] != null)) {
                    base.Tables.Add(new FamilyDetailsDataTable(ds.Tables["FamilyDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGoal = ((GoalDataTable)(base.Tables["Goal"]));
            if ((initTable == true)) {
                if ((this.tableGoal != null)) {
                    this.tableGoal.InitVars();
                }
            }
            this.tableRiskProfile = ((RiskProfileDataTable)(base.Tables["RiskProfile"]));
            if ((initTable == true)) {
                if ((this.tableRiskProfile != null)) {
                    this.tableRiskProfile.InitVars();
                }
            }
            this.tableFamilyDetails = ((FamilyDetailsDataTable)(base.Tables["FamilyDetails"]));
            if ((initTable == true)) {
                if ((this.tableFamilyDetails != null)) {
                    this.tableFamilyDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FinancialPlanningDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FinancialPlanningDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGoal = new GoalDataTable();
            base.Tables.Add(this.tableGoal);
            this.tableRiskProfile = new RiskProfileDataTable();
            base.Tables.Add(this.tableRiskProfile);
            this.tableFamilyDetails = new FamilyDetailsDataTable();
            base.Tables.Add(this.tableFamilyDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGoal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRiskProfile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFamilyDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FinancialPlanningDS ds = new FinancialPlanningDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GoalRowChangeEventHandler(object sender, GoalRowChangeEvent e);
        
        public delegate void RiskProfileRowChangeEventHandler(object sender, RiskProfileRowChangeEvent e);
        
        public delegate void FamilyDetailsRowChangeEventHandler(object sender, FamilyDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GoalDataTable : global::System.Data.TypedTableBase<GoalRow> {
            
            private global::System.Data.DataColumn columnGoalId;
            
            private global::System.Data.DataColumn columnGoalName;
            
            private global::System.Data.DataColumn columnChildName;
            
            private global::System.Data.DataColumn columnCostToday;
            
            private global::System.Data.DataColumn columnMonthlySavingsRequired;
            
            private global::System.Data.DataColumn columnCalculatedOn;
            
            private global::System.Data.DataColumn columnYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalDataTable() {
                this.TableName = "Goal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GoalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalIdColumn {
                get {
                    return this.columnGoalId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalNameColumn {
                get {
                    return this.columnGoalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildNameColumn {
                get {
                    return this.columnChildName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostTodayColumn {
                get {
                    return this.columnCostToday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthlySavingsRequiredColumn {
                get {
                    return this.columnMonthlySavingsRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalculatedOnColumn {
                get {
                    return this.columnCalculatedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow this[int index] {
                get {
                    return ((GoalRow)(this.Rows[index]));
                }
            }
            
            public event GoalRowChangeEventHandler GoalRowChanging;
            
            public event GoalRowChangeEventHandler GoalRowChanged;
            
            public event GoalRowChangeEventHandler GoalRowDeleting;
            
            public event GoalRowChangeEventHandler GoalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGoalRow(GoalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow AddGoalRow(string GoalId, string GoalName, string ChildName, double CostToday, double MonthlySavingsRequired, System.DateTime CalculatedOn, string Year) {
                GoalRow rowGoalRow = ((GoalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GoalId,
                        GoalName,
                        ChildName,
                        CostToday,
                        MonthlySavingsRequired,
                        CalculatedOn,
                        Year};
                rowGoalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGoalRow);
                return rowGoalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GoalDataTable cln = ((GoalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GoalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGoalId = base.Columns["GoalId"];
                this.columnGoalName = base.Columns["GoalName"];
                this.columnChildName = base.Columns["ChildName"];
                this.columnCostToday = base.Columns["CostToday"];
                this.columnMonthlySavingsRequired = base.Columns["MonthlySavingsRequired"];
                this.columnCalculatedOn = base.Columns["CalculatedOn"];
                this.columnYear = base.Columns["Year"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGoalId = new global::System.Data.DataColumn("GoalId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalId);
                this.columnGoalName = new global::System.Data.DataColumn("GoalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalName);
                this.columnChildName = new global::System.Data.DataColumn("ChildName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildName);
                this.columnCostToday = new global::System.Data.DataColumn("CostToday", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToday);
                this.columnMonthlySavingsRequired = new global::System.Data.DataColumn("MonthlySavingsRequired", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthlySavingsRequired);
                this.columnCalculatedOn = new global::System.Data.DataColumn("CalculatedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalculatedOn);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow NewGoalRow() {
                return ((GoalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GoalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GoalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GoalRowChanged != null)) {
                    this.GoalRowChanged(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GoalRowChanging != null)) {
                    this.GoalRowChanging(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GoalRowDeleted != null)) {
                    this.GoalRowDeleted(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GoalRowDeleting != null)) {
                    this.GoalRowDeleting(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGoalRow(GoalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FinancialPlanningDS ds = new FinancialPlanningDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GoalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RiskProfileDataTable : global::System.Data.TypedTableBase<RiskProfileRow> {
            
            private global::System.Data.DataColumn columnRiskProfileId;
            
            private global::System.Data.DataColumn columnRiskScore;
            
            private global::System.Data.DataColumn columnRiskClass;
            
            private global::System.Data.DataColumn columnRiskProfileDate;
            
            private global::System.Data.DataColumn columnCashPer;
            
            private global::System.Data.DataColumn columnEquityPer;
            
            private global::System.Data.DataColumn columnDebtPer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RiskProfileDataTable() {
                this.TableName = "RiskProfile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RiskProfileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RiskProfileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RiskProfileIdColumn {
                get {
                    return this.columnRiskProfileId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RiskScoreColumn {
                get {
                    return this.columnRiskScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RiskClassColumn {
                get {
                    return this.columnRiskClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RiskProfileDateColumn {
                get {
                    return this.columnRiskProfileDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashPerColumn {
                get {
                    return this.columnCashPer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquityPerColumn {
                get {
                    return this.columnEquityPer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebtPerColumn {
                get {
                    return this.columnDebtPer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RiskProfileRow this[int index] {
                get {
                    return ((RiskProfileRow)(this.Rows[index]));
                }
            }
            
            public event RiskProfileRowChangeEventHandler RiskProfileRowChanging;
            
            public event RiskProfileRowChangeEventHandler RiskProfileRowChanged;
            
            public event RiskProfileRowChangeEventHandler RiskProfileRowDeleting;
            
            public event RiskProfileRowChangeEventHandler RiskProfileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRiskProfileRow(RiskProfileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RiskProfileRow AddRiskProfileRow(long RiskProfileId, double RiskScore, string RiskClass, System.DateTime RiskProfileDate, double CashPer, double EquityPer, double DebtPer) {
                RiskProfileRow rowRiskProfileRow = ((RiskProfileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RiskProfileId,
                        RiskScore,
                        RiskClass,
                        RiskProfileDate,
                        CashPer,
                        EquityPer,
                        DebtPer};
                rowRiskProfileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRiskProfileRow);
                return rowRiskProfileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RiskProfileDataTable cln = ((RiskProfileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RiskProfileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRiskProfileId = base.Columns["RiskProfileId"];
                this.columnRiskScore = base.Columns["RiskScore"];
                this.columnRiskClass = base.Columns["RiskClass"];
                this.columnRiskProfileDate = base.Columns["RiskProfileDate"];
                this.columnCashPer = base.Columns["CashPer"];
                this.columnEquityPer = base.Columns["EquityPer"];
                this.columnDebtPer = base.Columns["DebtPer"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRiskProfileId = new global::System.Data.DataColumn("RiskProfileId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRiskProfileId);
                this.columnRiskScore = new global::System.Data.DataColumn("RiskScore", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRiskScore);
                this.columnRiskClass = new global::System.Data.DataColumn("RiskClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRiskClass);
                this.columnRiskProfileDate = new global::System.Data.DataColumn("RiskProfileDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRiskProfileDate);
                this.columnCashPer = new global::System.Data.DataColumn("CashPer", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashPer);
                this.columnEquityPer = new global::System.Data.DataColumn("EquityPer", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquityPer);
                this.columnDebtPer = new global::System.Data.DataColumn("DebtPer", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebtPer);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RiskProfileRow NewRiskProfileRow() {
                return ((RiskProfileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RiskProfileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RiskProfileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RiskProfileRowChanged != null)) {
                    this.RiskProfileRowChanged(this, new RiskProfileRowChangeEvent(((RiskProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RiskProfileRowChanging != null)) {
                    this.RiskProfileRowChanging(this, new RiskProfileRowChangeEvent(((RiskProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RiskProfileRowDeleted != null)) {
                    this.RiskProfileRowDeleted(this, new RiskProfileRowChangeEvent(((RiskProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RiskProfileRowDeleting != null)) {
                    this.RiskProfileRowDeleting(this, new RiskProfileRowChangeEvent(((RiskProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRiskProfileRow(RiskProfileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FinancialPlanningDS ds = new FinancialPlanningDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RiskProfileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FamilyDetailsDataTable : global::System.Data.TypedTableBase<FamilyDetailsRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRelationShipCode;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnGoalCode;
            
            private global::System.Data.DataColumn columnGoalYear;
            
            private global::System.Data.DataColumn columnYearOfMarriage;
            
            private global::System.Data.DataColumn columnYearOfEducation;
            
            private global::System.Data.DataColumn columnIsGoalActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDetailsDataTable() {
                this.TableName = "FamilyDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamilyDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FamilyDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationShipCodeColumn {
                get {
                    return this.columnRelationShipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalCodeColumn {
                get {
                    return this.columnGoalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoalYearColumn {
                get {
                    return this.columnGoalYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearOfMarriageColumn {
                get {
                    return this.columnYearOfMarriage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearOfEducationColumn {
                get {
                    return this.columnYearOfEducation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGoalActiveColumn {
                get {
                    return this.columnIsGoalActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDetailsRow this[int index] {
                get {
                    return ((FamilyDetailsRow)(this.Rows[index]));
                }
            }
            
            public event FamilyDetailsRowChangeEventHandler FamilyDetailsRowChanging;
            
            public event FamilyDetailsRowChangeEventHandler FamilyDetailsRowChanged;
            
            public event FamilyDetailsRowChangeEventHandler FamilyDetailsRowDeleting;
            
            public event FamilyDetailsRowChangeEventHandler FamilyDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFamilyDetailsRow(FamilyDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDetailsRow AddFamilyDetailsRow(string Name, string RelationShipCode, System.DateTime DOB, string GoalCode, string GoalYear, string YearOfMarriage, string YearOfEducation, string IsGoalActive) {
                FamilyDetailsRow rowFamilyDetailsRow = ((FamilyDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        RelationShipCode,
                        DOB,
                        GoalCode,
                        GoalYear,
                        YearOfMarriage,
                        YearOfEducation,
                        IsGoalActive};
                rowFamilyDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFamilyDetailsRow);
                return rowFamilyDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FamilyDetailsDataTable cln = ((FamilyDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FamilyDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnRelationShipCode = base.Columns["RelationShipCode"];
                this.columnDOB = base.Columns["DOB"];
                this.columnGoalCode = base.Columns["GoalCode"];
                this.columnGoalYear = base.Columns["GoalYear"];
                this.columnYearOfMarriage = base.Columns["YearOfMarriage"];
                this.columnYearOfEducation = base.Columns["YearOfEducation"];
                this.columnIsGoalActive = base.Columns["IsGoalActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRelationShipCode = new global::System.Data.DataColumn("RelationShipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationShipCode);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnGoalCode = new global::System.Data.DataColumn("GoalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalCode);
                this.columnGoalYear = new global::System.Data.DataColumn("GoalYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoalYear);
                this.columnYearOfMarriage = new global::System.Data.DataColumn("YearOfMarriage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearOfMarriage);
                this.columnYearOfEducation = new global::System.Data.DataColumn("YearOfEducation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearOfEducation);
                this.columnIsGoalActive = new global::System.Data.DataColumn("IsGoalActive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGoalActive);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDetailsRow NewFamilyDetailsRow() {
                return ((FamilyDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FamilyDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FamilyDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FamilyDetailsRowChanged != null)) {
                    this.FamilyDetailsRowChanged(this, new FamilyDetailsRowChangeEvent(((FamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FamilyDetailsRowChanging != null)) {
                    this.FamilyDetailsRowChanging(this, new FamilyDetailsRowChangeEvent(((FamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FamilyDetailsRowDeleted != null)) {
                    this.FamilyDetailsRowDeleted(this, new FamilyDetailsRowChangeEvent(((FamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FamilyDetailsRowDeleting != null)) {
                    this.FamilyDetailsRowDeleting(this, new FamilyDetailsRowChangeEvent(((FamilyDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFamilyDetailsRow(FamilyDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FinancialPlanningDS ds = new FinancialPlanningDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FamilyDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GoalRow : global::System.Data.DataRow {
            
            private GoalDataTable tableGoal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGoal = ((GoalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoalId {
                get {
                    try {
                        return ((string)(this[this.tableGoal.GoalIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalId\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.GoalIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoalName {
                get {
                    try {
                        return ((string)(this[this.tableGoal.GoalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalName\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.GoalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChildName {
                get {
                    try {
                        return ((string)(this[this.tableGoal.ChildNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildName\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.ChildNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CostToday {
                get {
                    try {
                        return ((double)(this[this.tableGoal.CostTodayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToday\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.CostTodayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonthlySavingsRequired {
                get {
                    try {
                        return ((double)(this[this.tableGoal.MonthlySavingsRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonthlySavingsRequired\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.MonthlySavingsRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CalculatedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGoal.CalculatedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CalculatedOn\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.CalculatedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableGoal.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'Goal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGoal.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalIdNull() {
                return this.IsNull(this.tableGoal.GoalIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalIdNull() {
                this[this.tableGoal.GoalIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalNameNull() {
                return this.IsNull(this.tableGoal.GoalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalNameNull() {
                this[this.tableGoal.GoalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildNameNull() {
                return this.IsNull(this.tableGoal.ChildNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildNameNull() {
                this[this.tableGoal.ChildNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostTodayNull() {
                return this.IsNull(this.tableGoal.CostTodayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostTodayNull() {
                this[this.tableGoal.CostTodayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthlySavingsRequiredNull() {
                return this.IsNull(this.tableGoal.MonthlySavingsRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthlySavingsRequiredNull() {
                this[this.tableGoal.MonthlySavingsRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalculatedOnNull() {
                return this.IsNull(this.tableGoal.CalculatedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalculatedOnNull() {
                this[this.tableGoal.CalculatedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableGoal.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableGoal.YearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RiskProfileRow : global::System.Data.DataRow {
            
            private RiskProfileDataTable tableRiskProfile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RiskProfileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRiskProfile = ((RiskProfileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RiskProfileId {
                get {
                    try {
                        return ((long)(this[this.tableRiskProfile.RiskProfileIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RiskProfileId\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.RiskProfileIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RiskScore {
                get {
                    try {
                        return ((double)(this[this.tableRiskProfile.RiskScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RiskScore\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.RiskScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RiskClass {
                get {
                    try {
                        return ((string)(this[this.tableRiskProfile.RiskClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RiskClass\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.RiskClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RiskProfileDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRiskProfile.RiskProfileDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RiskProfileDate\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.RiskProfileDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CashPer {
                get {
                    try {
                        return ((double)(this[this.tableRiskProfile.CashPerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashPer\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.CashPerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EquityPer {
                get {
                    try {
                        return ((double)(this[this.tableRiskProfile.EquityPerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquityPer\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.EquityPerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DebtPer {
                get {
                    try {
                        return ((double)(this[this.tableRiskProfile.DebtPerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebtPer\' in table \'RiskProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRiskProfile.DebtPerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRiskProfileIdNull() {
                return this.IsNull(this.tableRiskProfile.RiskProfileIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRiskProfileIdNull() {
                this[this.tableRiskProfile.RiskProfileIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRiskScoreNull() {
                return this.IsNull(this.tableRiskProfile.RiskScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRiskScoreNull() {
                this[this.tableRiskProfile.RiskScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRiskClassNull() {
                return this.IsNull(this.tableRiskProfile.RiskClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRiskClassNull() {
                this[this.tableRiskProfile.RiskClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRiskProfileDateNull() {
                return this.IsNull(this.tableRiskProfile.RiskProfileDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRiskProfileDateNull() {
                this[this.tableRiskProfile.RiskProfileDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashPerNull() {
                return this.IsNull(this.tableRiskProfile.CashPerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashPerNull() {
                this[this.tableRiskProfile.CashPerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquityPerNull() {
                return this.IsNull(this.tableRiskProfile.EquityPerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquityPerNull() {
                this[this.tableRiskProfile.EquityPerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebtPerNull() {
                return this.IsNull(this.tableRiskProfile.DebtPerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebtPerNull() {
                this[this.tableRiskProfile.DebtPerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FamilyDetailsRow : global::System.Data.DataRow {
            
            private FamilyDetailsDataTable tableFamilyDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamilyDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFamilyDetails = ((FamilyDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RelationShipCode {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.RelationShipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelationShipCode\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.RelationShipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFamilyDetails.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoalCode {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.GoalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalCode\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.GoalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoalYear {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.GoalYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoalYear\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.GoalYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearOfMarriage {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.YearOfMarriageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearOfMarriage\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.YearOfMarriageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearOfEducation {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.YearOfEducationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearOfEducation\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.YearOfEducationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsGoalActive {
                get {
                    try {
                        return ((string)(this[this.tableFamilyDetails.IsGoalActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsGoalActive\' in table \'FamilyDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyDetails.IsGoalActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableFamilyDetails.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableFamilyDetails.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationShipCodeNull() {
                return this.IsNull(this.tableFamilyDetails.RelationShipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationShipCodeNull() {
                this[this.tableFamilyDetails.RelationShipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableFamilyDetails.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableFamilyDetails.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalCodeNull() {
                return this.IsNull(this.tableFamilyDetails.GoalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalCodeNull() {
                this[this.tableFamilyDetails.GoalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoalYearNull() {
                return this.IsNull(this.tableFamilyDetails.GoalYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoalYearNull() {
                this[this.tableFamilyDetails.GoalYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearOfMarriageNull() {
                return this.IsNull(this.tableFamilyDetails.YearOfMarriageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearOfMarriageNull() {
                this[this.tableFamilyDetails.YearOfMarriageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearOfEducationNull() {
                return this.IsNull(this.tableFamilyDetails.YearOfEducationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearOfEducationNull() {
                this[this.tableFamilyDetails.YearOfEducationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsGoalActiveNull() {
                return this.IsNull(this.tableFamilyDetails.IsGoalActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsGoalActiveNull() {
                this[this.tableFamilyDetails.IsGoalActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GoalRowChangeEvent : global::System.EventArgs {
            
            private GoalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRowChangeEvent(GoalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RiskProfileRowChangeEvent : global::System.EventArgs {
            
            private RiskProfileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RiskProfileRowChangeEvent(RiskProfileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RiskProfileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FamilyDetailsRowChangeEvent : global::System.EventArgs {
            
            private FamilyDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDetailsRowChangeEvent(FamilyDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591